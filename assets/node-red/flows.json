[
    {
        "id": "92e5dfcb5c3552c2",
        "type": "tab",
        "label": "Immo24 Global",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b443cd6f4046fd9f",
        "type": "tab",
        "label": "[Modul] Produktionsbuch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "571c9add5c07840b",
        "type": "tab",
        "label": "[Modul] Pro Tools",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dc0428f114f14299",
        "type": "tab",
        "label": "[Modul] Soundminer",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d0d17784f71f39d9",
        "type": "subflow",
        "name": "Audio Package kopieren",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "5255f9beb131ad73"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1500,
                "y": 80,
                "wires": [
                    {
                        "id": "d21db72004540ae5",
                        "port": 0
                    },
                    {
                        "id": "5255f9beb131ad73",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e09b23f59c044bf8",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "name": "Formular",
        "style": {
            "label": true
        },
        "nodes": [
            "b04e57b948e77106",
            "68d4f6662ecbfeb3",
            "cecafe4be4e250a0",
            "6d11f8df05045052",
            "16cb66e38510f820",
            "f5da02b2bd8d63a6",
            "f82475d3c09d70a2",
            "e7c1ee6dc65845d6",
            "db2490f64f65d46a",
            "74af9c8a17157812",
            "40544c83e4544ac3",
            "a9d910d2311ea732",
            "c9d8b67e08e0694a",
            "3be3c68955e61f67",
            "c2d65d2b5328f056",
            "6c1ecb3ede12bd26",
            "61acbcf2c1762413",
            "c6effc2fa16f157a",
            "a804729e2fe35486",
            "60723f36d0588b1c",
            "e8ec6f49a002acc9",
            "f03d105771fc0c67",
            "25b1d00e5f7f1bcd"
        ],
        "x": 34,
        "y": 499,
        "w": 2652,
        "h": 302
    },
    {
        "id": "3f6058c22847f23d",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "name": "Produktionsbuch Konfiguration",
        "style": {
            "label": true
        },
        "nodes": [
            "36ed84ccc9d35759",
            "75c5fbafa4446ee5",
            "cd99fbc23bfa41b0",
            "3d38c4563478a24c",
            "b37885c9be6e0c33",
            "7bebdb3370022b2f",
            "25b39abb2c577e54",
            "20d6df6b06396c8d",
            "b49b21837662227a",
            "00aa34757e5184b5",
            "20a9d9b4af147904",
            "e7ccf4e57b055790",
            "2e2a317d13f0f6ff",
            "476e40734497434f",
            "24d85613a2d37961",
            "a4f9ae49b73f0cd9",
            "689c9849faf696d0",
            "a00da8a35639dbd8",
            "3be16e807066c9f4",
            "0cdcc1e9ef5f3e29",
            "b8cfaa564f921f12",
            "bd31b537d98d1d41"
        ],
        "x": 34,
        "y": 959,
        "w": 1952,
        "h": 282
    },
    {
        "id": "844ea0e2d48407a4",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "name": "Admin PW Konfig-Panel",
        "style": {
            "label": true
        },
        "nodes": [
            "1fc8a67db0883fbf",
            "965b3c8fd920c952",
            "be5f366354440cc0",
            "bc4d2fcb1292f184",
            "9e6d05ed3a7e1f73",
            "2efc0cbd79d32843",
            "c269273b6151b3ba",
            "0b64a9434672861a",
            "92cfee7ee2b864cf",
            "1e33850e291001d2",
            "7ccfa3d0c632af77"
        ],
        "x": 34,
        "y": 1859,
        "w": 1172,
        "h": 182
    },
    {
        "id": "682d5ba9e57c89d0",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "name": "Initialisierung",
        "style": {
            "label": true
        },
        "nodes": [
            "0b4443336c7bd8ae",
            "22c77170bc28046b",
            "7935cf731073a570",
            "104b571128586e5f",
            "c0aa387d8488293b",
            "3d5bcef0e3e1d8e1",
            "67df1612aa33160e",
            "0b59bc840a6c75b4",
            "6a158b47a9a44d52",
            "abfb2e6ff7c827c4",
            "26e136e20196659a",
            "ccab7051afe7c5f9",
            "8c98a713fae2174e",
            "61086db22d8b853d",
            "09539a417349ed12",
            "349c507dcedc766a",
            "703535289b800aa9"
        ],
        "x": 34,
        "y": 19,
        "w": 1792,
        "h": 262
    },
    {
        "id": "e26be10f69baa19a",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "name": "Konfiguration - Pfade",
        "style": {
            "label": true
        },
        "nodes": [
            "64fcfd417c2d2c3f",
            "0a04cc918e1099a3",
            "16f984c570189fdb",
            "38a319aec097873b",
            "686120e0242c6e78",
            "3b9ce4a5ce885716",
            "b376e9b9b273d316",
            "a49a99f318f8c8a9",
            "8a1867e72a7d1cdf",
            "975bba0b013c6913",
            "ac0bdf33d3ceac64",
            "3efc42592dbe14c5",
            "17d495e513099ccd",
            "3acd3a13433e546d",
            "d8f01b3cc92d1167",
            "c525012d8c78c4b7",
            "9836651176dc7871"
        ],
        "x": 34,
        "y": 1059,
        "w": 1472,
        "h": 222
    },
    {
        "id": "8a2acb12476d4853",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "name": "Konfiguration - Datei/Ordnerschema",
        "style": {
            "label": true
        },
        "nodes": [
            "4ffc5daf677ec631",
            "8fabcb73dec928c3",
            "34d4dff87db069a4",
            "6b575f053cf737f1",
            "5da5a2a98450f900",
            "72f7fe6d9db4a64b",
            "1809518017dbcabf",
            "c95b6a77fbecb357",
            "84a54dfd32c09623",
            "1d16bbe8cc72169d",
            "02a64ed83e42b932",
            "3dcdb1f1d4539178",
            "148040fcc730ca47"
        ],
        "x": 34,
        "y": 1619,
        "w": 1532,
        "h": 202
    },
    {
        "id": "dc4af3db75f61152",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "name": "Login / Logout",
        "style": {
            "label": true
        },
        "nodes": [
            "493257847a89607c",
            "4d0412ea662244b2",
            "21ec615fa112d830",
            "099c10320de220de",
            "5e9e7b80f7ec109e",
            "452e7f1fce6cd35e",
            "f9ffa4cff5e42b6c",
            "839a98d79f088090",
            "3aa9611b4da07733",
            "b323d5d8aaef30c7"
        ],
        "x": 34,
        "y": 299,
        "w": 1492,
        "h": 142
    },
    {
        "id": "6be8557272aec66a",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1a86fd43dc214f2e",
            "52b1a396d290f184",
            "24a5473359171122",
            "b9e241fc311d4a8e",
            "011503d41e3558fb",
            "8ce945730cd5d01d",
            "db07b5ab350e85bb",
            "2a61d62257f7adba",
            "11da59bf9c49b269",
            "38643e44f98a6583",
            "18f6220e38521937",
            "a8652c7098e651f4",
            "f512e915f1bef756",
            "5036f285ad308641",
            "32033b1942a816ca",
            "f76642bcb1764cca",
            "61816f910386b34c",
            "7f0afda97c05ab7f",
            "f12d625b1efdeba0",
            "135b0f9e7062482a"
        ],
        "x": 34,
        "y": 579,
        "w": 2052,
        "h": 222
    },
    {
        "id": "e7ecc6a6616c1795",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d30dfe6c1a9a0ec2",
            "e6e5edd1e7c1104b",
            "eaf345ce67077f77"
        ],
        "x": 34,
        "y": 459,
        "w": 692,
        "h": 82
    },
    {
        "id": "353adffaf98dbce5",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "07041f344aea141d",
            "a29b45ce8662063f",
            "84239da3ef9920ba",
            "d1380deb997605f5",
            "9594938aa57ba1e4",
            "798096a61f91b326",
            "897b0239ea7136a4",
            "6e1e460999059bbc",
            "0ae5b94a4fdaabd9",
            "a4056ba0f72c5e5a",
            "d06d9a5d2e099b86",
            "ce86d3ee96f10372",
            "7b2d14455bd6e85f",
            "02a0f39c7026dc2c",
            "91978a0f8d70300f",
            "eebd44240de5fb71",
            "7f3c436b70327156",
            "cbb4b8942696bb9d",
            "cfde9cbf7130a7bb",
            "202dfb827bd90aa1",
            "dfe946a1c6b4afd3"
        ],
        "x": 34,
        "y": 839,
        "w": 2392,
        "h": 182
    },
    {
        "id": "5096f3feef6a6d43",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "name": "Projektanlage",
        "style": {
            "label": true
        },
        "nodes": [
            "175a674c11285c85",
            "6c009de142b00a69",
            "465673bffca4e0d2",
            "33e7012a8455dcea",
            "a5cbafaa75b73c7c",
            "a077f771503b109f",
            "03462b00bd70668a",
            "1301b6fbc4bf55ad",
            "08f8137fd2a41a4d",
            "29a3309d34314c7e",
            "e76960526db64fc2",
            "3d6f9168757f7650",
            "6081efcfefcbc92f",
            "312cfa25ef98de9e",
            "7ee3c33896935646",
            "f5930766aa85876a",
            "3890f6f8ca6ac208",
            "4890dfe41d974f67",
            "73545854ec411151",
            "5850040864838c78",
            "80b78c3e4e6b59d9",
            "81057573ebad6e60",
            "af7c4fbadcc8f62d",
            "42889590e1925a96",
            "005adac3f0dbf505",
            "3a2458c69f992c7a",
            "fc39c9a148bef52e",
            "4b5fca601da3958f",
            "1941045c90a03f2e",
            "e494e48fd35f1809",
            "78f6564684f6027e",
            "2abf4b17d6827b67",
            "3e7fc290994492cd",
            "fec6c59f3697b0bb",
            "13f3227b56812c1a",
            "fa9d2fac02be4c9f",
            "c1e5c60f79c68184",
            "905fc9e0315efe87",
            "1eea91f2906456bc",
            "bf4d8a80d210b362",
            "37e19dd539506efd",
            "14eb4bbb946eedea",
            "b0aef2d54e9d0ec3",
            "3d95844779504430",
            "bcbf5fb38d99c996",
            "92760ac63c811f81"
        ],
        "x": 34,
        "y": 39,
        "w": 2732,
        "h": 442
    },
    {
        "id": "6e172dd935fc089e",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a5b3212ee0a897af",
            "1d2f2c031ccf07cb",
            "530d5ce378abe4a4",
            "45b8aaec67b9454d",
            "8f60e803a9417da9",
            "0a7761f43773cf50",
            "25db702b7507e6dd"
        ],
        "x": 34,
        "y": 831.5,
        "w": 1452,
        "h": 97
    },
    {
        "id": "f6673a3f7d474371",
        "type": "group",
        "z": "571c9add5c07840b",
        "name": "PT App Status",
        "style": {
            "label": true
        },
        "nodes": [
            "acbdc911869fcb0b",
            "449fca97fdcc9e44",
            "d35141a1aff39a50",
            "d6e97db390ed12fd",
            "f332e7773e0b1d75",
            "01d7ac052395b113"
        ],
        "x": 34,
        "y": 31.5,
        "w": 1212,
        "h": 97
    },
    {
        "id": "4e47faa505954ee5",
        "type": "group",
        "z": "571c9add5c07840b",
        "name": "PT-Modul Funktionen",
        "style": {
            "label": true
        },
        "nodes": [
            "32022cc80658355b",
            "448887b282ce2524",
            "6fa66f45920c7270",
            "bf80e98ba0ab77be",
            "256f0f49f6febd7a",
            "13de4de9c70eec3b",
            "9d1aa8c292ad24aa",
            "3f3caea81473eca0",
            "a520c01c5814fdac",
            "843cd62abaaec61f",
            "b1253b63671bc6bf",
            "8946011e70d4ed9e",
            "f2c7b2760eb46d43",
            "6be4880a2368c056",
            "24b94f8f5582405c",
            "c228aba48bf6fd27",
            "fc811062d1cbf27f"
        ],
        "x": 34,
        "y": 173,
        "w": 3592,
        "h": 1834
    },
    {
        "id": "7284fb4c28608256",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "name": "Health-Check",
        "style": {
            "label": true
        },
        "nodes": [
            "3ebd9c51cfdf4ba8",
            "e04a90dbd5bf3cd6",
            "2030ad39c5ce3066"
        ],
        "x": 34,
        "y": 2079,
        "w": 512,
        "h": 82
    },
    {
        "id": "ff71a0cd16ac6b9a",
        "type": "group",
        "z": "dc0428f114f14299",
        "name": "SM App Status",
        "style": {
            "label": true
        },
        "nodes": [
            "9dc3f8daa6165afa",
            "a59b36ea067e1e1d",
            "d75c1435d5327109",
            "6f78ed16ec0b7d1d",
            "7aca2be01d9adf50",
            "4a043797261bc164"
        ],
        "x": 14,
        "y": 11.5,
        "w": 1212,
        "h": 97
    },
    {
        "id": "d1026232071f8035",
        "type": "group",
        "z": "dc0428f114f14299",
        "name": "SM-Modul Funktionen",
        "style": {
            "label": true
        },
        "nodes": [
            "af1e02d1ab6b667f",
            "5bbaacf6d81a1fd8",
            "805c84f4a6107c66",
            "f21d5854511e80b1",
            "e1774f21848a73f9",
            "7bd0e3d340c2defe",
            "7ca377477ddf71a2",
            "13df15e725ddf3e0",
            "9c27162cd4fef719",
            "ce6570fba079d51d"
        ],
        "x": 14,
        "y": 133,
        "w": 2672,
        "h": 400
    },
    {
        "id": "5381319fd7c06d55",
        "type": "group",
        "z": "92e5dfcb5c3552c2",
        "name": "Konfiguration - Module",
        "style": {
            "label": true
        },
        "nodes": [
            "e671f4a51b6362bc",
            "1ade0bf0a6f674ee",
            "f398f167cb8c7178",
            "9a9282133aeacde2",
            "26b9a8e7932224ac",
            "1f895ac9932a7cee",
            "8170b5bc86b3784d",
            "62c2acd3be62b23d",
            "771b3e806a126478",
            "2923ea5fd1c21c81",
            "ee974cb3fd7f6996",
            "4ff74ba316e148db",
            "ac5eefe43e71e5d0",
            "6251fde0a0385289",
            "4c56eea28bb6fae8",
            "6597a2c2d9574b19",
            "acfb3b627f62a753",
            "c1c396c4cb20147e",
            "242004fdae032167",
            "eae9c18d41aab546"
        ],
        "x": 34,
        "y": 1319,
        "w": 1472,
        "h": 262
    },
    {
        "id": "843cd62abaaec61f",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Track Data",
        "style": {
            "label": true
        },
        "nodes": [
            "edce99a5cffcc7e5",
            "4b4b88c1be70ec42",
            "eecef021cf5ea5f9",
            "67bd53b720f256d8",
            "b20e0716bb69c289",
            "b777a94f111ff071",
            "9bdaf0d4392acc21",
            "b45c327d585b78b2",
            "a553c31ecabc9da0",
            "3794b8b88a124018",
            "51858e71739fe5f0",
            "e406fa5e851023e7",
            "4e89fbef3af60f1c",
            "0df45444bc06051c",
            "aa88ebcbb973c6d3",
            "6d456d2a0be0d42d",
            "7add7f28bc5bf8dd",
            "e96c8725de1a8e8f",
            "963ca3740f921cf8"
        ],
        "x": 494,
        "y": 1539,
        "w": 1752,
        "h": 202
    },
    {
        "id": "b1253b63671bc6bf",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Memory Location",
        "style": {
            "label": true
        },
        "nodes": [
            "39d13a464431d31b",
            "fafc7a55859a7190",
            "05d86ab1ea26b37b",
            "81215275a16d8c68",
            "970f9fc0808ec60f",
            "0b70528cdccb53e7",
            "73306ab970c38caf",
            "2c990ce67e5034a6",
            "0dbec11db74424cd",
            "a278233615cac6e0",
            "b0fb0ad905b35602",
            "25bc3768c7ae50d3",
            "c53ffd5c163eadcb",
            "d60bb26669de3657",
            "32f7122ac9fe151b",
            "e83c364cfbd30d42",
            "a4ad4a34a821d771",
            "46ac2dd8fba3cbd0",
            "facd8f20ee00818d"
        ],
        "x": 494,
        "y": 1299,
        "w": 1792,
        "h": 222
    },
    {
        "id": "8946011e70d4ed9e",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Clip Effects Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "404d5678657dac10",
            "338d50cd66e07956",
            "e6c214decef4eadd",
            "c80234e5017b0a98",
            "1066641335f87e3b",
            "2a28990d8768c2bf",
            "bfc6384b6602ee8c",
            "e3fc98cad4c5a589",
            "3e07cec2c354b562",
            "b8b13e0434601759",
            "98b18cba1d87bf68",
            "9d5687462b806359",
            "02b22dc642dc2fef",
            "7723b0bc17fd7e13",
            "d3407d76b6b96bd9",
            "6f1bdfeeef1718e0",
            "59542c4cb71f0d92",
            "d19e7fada3c78c77",
            "b838cce695308516"
        ],
        "x": 494,
        "y": 1059,
        "w": 1752,
        "h": 222
    },
    {
        "id": "f2c7b2760eb46d43",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Keyboard Shortcuts",
        "style": {
            "label": true
        },
        "nodes": [
            "dec159441b93f814",
            "126ecdd30c809417",
            "4190da9a9792cbcc",
            "57085a5e232a9565",
            "563eea3d7ff40ed2",
            "9ccfc5bdc5b504f8",
            "1e1ceeb243c3e34b",
            "b08666bf6d1a972b",
            "cb04caf391cac468",
            "d95b6caced6d8123",
            "eecbec774963fbb5",
            "08170b3dbaac1481",
            "d48d6bfe020662f4",
            "f1e3f6051c6ae603",
            "056065ca8f0d9a0c",
            "49b6df07bce631a3",
            "13cf5781fe9bad4b",
            "2ed8480660f224f9",
            "3d51bf9aaaa43479"
        ],
        "x": 494,
        "y": 1759,
        "w": 1752,
        "h": 222
    },
    {
        "id": "6be4880a2368c056",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Templates",
        "style": {
            "label": true
        },
        "nodes": [
            "026123ed6fbfbff9",
            "03c50850773c2cb2",
            "a2992087464cfb1c",
            "5df36f9d8643344d",
            "8a745d4f06ab7d74",
            "be000d24df49fdf0",
            "a35593c5dcda4bb3",
            "9a3c9241d9bdb9dd"
        ],
        "x": 494,
        "y": 199,
        "w": 1172,
        "h": 162
    },
    {
        "id": "24b94f8f5582405c",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Track Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "5a142e72217b90d9",
            "2614347baa37cc3e",
            "71a251e7b77b506b",
            "09bcc4b2263e608f",
            "5f59f44b2aac691e",
            "dd5b551627f9f46d",
            "201c4cbdc53b4b05",
            "c34217e5aaba2b25"
        ],
        "x": 494,
        "y": 379,
        "w": 1192,
        "h": 162
    },
    {
        "id": "c228aba48bf6fd27",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Fade Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "d8eab152f365a0df",
            "9151b0e0d234cf6b",
            "c133d90e649a5ff2",
            "16b240c5ebff9643",
            "399704b1bba9111c",
            "4cd228b5b1ec067e",
            "77cfbeec620abcd6",
            "97c972e18dacc01e",
            "b8a6163e7afb5acf",
            "1b55abfd770dda78",
            "5ee9d6d3e3c4f2bd",
            "efcec27fd6452b4e",
            "312b4db1c260c987",
            "e940af9352af930c",
            "9ee5da509d5220c9",
            "ccb723d0652e28eb",
            "9bf63010af8c1d3b",
            "570bac17347d885f",
            "897d2cccd85f4c90",
            "03d2b25b9bdaa836"
        ],
        "x": 494,
        "y": 859,
        "w": 1892,
        "h": 182
    },
    {
        "id": "fc811062d1cbf27f",
        "type": "group",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Plug-In Settings",
        "style": {
            "label": true
        },
        "nodes": [
            "3118fab255283b8b",
            "c18f456a0f791f42",
            "929b5b35d429bd73",
            "8a66e0bb62460b38",
            "2b31b10a748b6d64",
            "9078dc5bb0f1fcb5",
            "a2619de64e762d39",
            "c3ed416bf7cc8c57",
            "780f8b7b325e3923",
            "71a4fd4af2c51838",
            "a77776b195ab0290",
            "74dfc0289041bfab",
            "f6530849f84ba28d",
            "ea1bb40fdd31379f",
            "0aff157563034614",
            "54941cd941124367",
            "37b447a9e5d21e4a",
            "af5ea42d65c2235d",
            "4a342a304d1bfc5e",
            "14360d1caf13a4e4"
        ],
        "x": 494,
        "y": 559,
        "w": 2472,
        "h": 242
    },
    {
        "id": "abcfbec7d754cfc2",
        "type": "group",
        "z": "dc0428f114f14299",
        "g": "ce6570fba079d51d",
        "name": "Tab Layouts v6 Pro",
        "style": {
            "label": true
        },
        "nodes": [
            "e5a6aaef78e0213f",
            "3cb4e46a592b768d",
            "85697c1f655fc5ad",
            "2d11e09698f93dd6",
            "075e0152b1769bc3",
            "378644b9e162c3f9",
            "f2b59359c1057179",
            "4d90b76601b01db2",
            "42a691e8f3dcac92",
            "aa36a54f20e4c10a"
        ],
        "x": 454,
        "y": 259,
        "w": 1392,
        "h": 222
    },
    {
        "id": "ce6570fba079d51d",
        "type": "group",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "Tab Layouts",
        "style": {
            "label": true
        },
        "nodes": [
            "b462655b17044340",
            "2bdfc8a3cb2667fb",
            "19865295a3b0b455",
            "2e86fe3ac42c241a",
            "abcfbec7d754cfc2",
            "4f9be02996cc22f6"
        ],
        "x": 428,
        "y": 159,
        "w": 1444,
        "h": 348
    },
    {
        "id": "800344319eb6565a",
        "type": "fs-ops-access",
        "z": "d0d17784f71f39d9",
        "name": "Audio Files vorhanden?",
        "path": "",
        "pathType": "str",
        "filename": "paths.audioDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 410,
        "y": 100,
        "wires": [
            [
                "fbc86336aef9e14f"
            ],
            [
                "fb0768f7e0953ec6"
            ]
        ]
    },
    {
        "id": "fbc86336aef9e14f",
        "type": "fs-ops-dir",
        "z": "d0d17784f71f39d9",
        "name": "Audio Source",
        "path": "paths.audioSource",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 640,
        "y": 40,
        "wires": [
            [
                "38dcc211c5514b61"
            ]
        ]
    },
    {
        "id": "fb0768f7e0953ec6",
        "type": "fs-ops-mkdir",
        "z": "d0d17784f71f39d9",
        "name": "\"Audio Files\" anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "paths.audioDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 640,
        "y": 200,
        "wires": [
            [
                "fbc86336aef9e14f"
            ]
        ]
    },
    {
        "id": "5255f9beb131ad73",
        "type": "function",
        "z": "d0d17784f71f39d9",
        "name": "Package?",
        "func": "// Nur wenn Package (audioSource vorhanden) → weiter zu Copy\nif (msg.paths.audioSource) return [msg, null];\n// sonst direkt Finalisieren\nreturn [null, msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 140,
        "wires": [
            [
                "800344319eb6565a"
            ],
            []
        ],
        "outputLabels": [
            "Package",
            "kein Package"
        ]
    },
    {
        "id": "38dcc211c5514b61",
        "type": "split",
        "z": "d0d17784f71f39d9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 770,
        "y": 80,
        "wires": [
            [
                "dce8ca91696a4b78"
            ]
        ]
    },
    {
        "id": "dce8ca91696a4b78",
        "type": "fs-ops-access",
        "z": "d0d17784f71f39d9",
        "name": "Datei am Ziel vorhanden?",
        "path": "paths.audioDest",
        "pathType": "msg",
        "filename": "files",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 970,
        "y": 40,
        "wires": [
            [
                "d21db72004540ae5"
            ],
            [
                "901af9c86ef35584"
            ]
        ]
    },
    {
        "id": "901af9c86ef35584",
        "type": "fs-ops-copy",
        "z": "d0d17784f71f39d9",
        "name": "Audio Files kopieren",
        "sourcePath": "paths.audioSource",
        "sourcePathType": "msg",
        "sourceFilename": "files",
        "sourceFilenameType": "msg",
        "destPath": "paths.audioDest",
        "destPathType": "msg",
        "destFilename": "files",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 1160,
        "y": 80,
        "wires": [
            [
                "d21db72004540ae5"
            ]
        ]
    },
    {
        "id": "d21db72004540ae5",
        "type": "join",
        "z": "d0d17784f71f39d9",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1390,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1fc8a67db0883fbf",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "",
        "url": "/api/check-password",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1920,
        "wires": [
            [
                "9e6d05ed3a7e1f73"
            ]
        ]
    },
    {
        "id": "965b3c8fd920c952",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "Passwort-Check",
        "func": "const given = (msg.givenPassword ?? '').toString();\n\n// Datei-Inhalt steckt jetzt in msg.payload (utf8-String)\nlet stored = '';\nconst raw = (msg.payload ?? '').toString().trim();\n\nif (!raw) {\n    // Kein gespeichertes PW vorhanden -> Zugriff verweigern\n    msg.statusCode = 401;\n    msg.payload = { ok: false };\n    return msg;\n}\n\n// Erst versuchen, JSON zu lesen { \"password\": \"...\" }\ntry {\n    const obj = JSON.parse(raw);\n    if (obj && typeof obj.password === 'string') {\n        stored = obj.password;\n    } else {\n        // Kein Feld \"password\" -> treat as plain\n        stored = raw;\n    }\n} catch {\n    // Nicht-JSON -> treat as plain string\n    stored = raw;\n}\n\nif (given && stored && given === stored) {\n    msg.statusCode = 200;\n    msg.payload = { ok: true };\n} else {\n    msg.statusCode = 401;\n    msg.payload = { ok: false };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1900,
        "wires": [
            [
                "be5f366354440cc0"
            ]
        ]
    },
    {
        "id": "be5f366354440cc0",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 1900,
        "wires": []
    },
    {
        "id": "64fcfd417c2d2c3f",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "",
        "url": "/api/paths",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1120,
        "wires": [
            [
                "0a04cc918e1099a3"
            ]
        ]
    },
    {
        "id": "0a04cc918e1099a3",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||\n    '';\n\nif (!base) {\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n}\n\nmsg.filename = base + '/path.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1120,
        "wires": [
            [
                "16f984c570189fdb"
            ]
        ]
    },
    {
        "id": "16f984c570189fdb",
        "type": "fs-ops-access",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "38a319aec097873b"
            ],
            [
                "3b9ce4a5ce885716"
            ]
        ]
    },
    {
        "id": "38a319aec097873b",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "path.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "allProps": false,
        "x": 720,
        "y": 1100,
        "wires": [
            [
                "686120e0242c6e78"
            ]
        ]
    },
    {
        "id": "686120e0242c6e78",
        "type": "json",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 890,
        "y": 1100,
        "wires": [
            [
                "b376e9b9b273d316"
            ]
        ]
    },
    {
        "id": "3b9ce4a5ce885716",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "Fallback: {}",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 1140,
        "wires": [
            [
                "b376e9b9b273d316"
            ]
        ]
    },
    {
        "id": "b376e9b9b273d316",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "Version anhängen + Globals",
        "func": "let ver = global.get('paths_version');\nif (!ver) { ver = String(Date.now()); global.set('paths_version', ver); }\nconst data = typeof msg.payload === 'object' && msg.payload ? msg.payload : {};\nif (data.PathMitarbeiter !== undefined) global.set('PathMitarbeiter', data.PathMitarbeiter);\nif (data.PathProduktionen !== undefined) global.set('PathProduktionen', data.PathProduktionen);\nif (data.PathStammdaten !== undefined) global.set('PathStammdaten', data.PathStammdaten);\nif (data.PathPTUser !== undefined) global.set('PathPTUser', data.PathPTUser);\nmsg.payload = { data, version: ver };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1100,
        "wires": [
            [
                "a49a99f318f8c8a9"
            ]
        ]
    },
    {
        "id": "a49a99f318f8c8a9",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1320,
        "y": 1100,
        "wires": []
    },
    {
        "id": "8a1867e72a7d1cdf",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "",
        "url": "/api/paths",
        "method": "put",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1220,
        "wires": [
            [
                "975bba0b013c6913"
            ]
        ]
    },
    {
        "id": "975bba0b013c6913",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "Body parsen + prüfen",
        "func": "// Robust parse helper\nfunction safeParse(x) {\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\n\nconst body = safeParse(msg.payload);\n\n// Grundprüfung\nif (!body || typeof body.version !== 'string' || typeof body.data !== 'object' || body.data === null || Array.isArray(body.data)) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\n\n// Felder whitelisten/normalisieren\nconst d = body.data;\nconst normalized = {\n  PathMitarbeiter: typeof d.PathMitarbeiter === 'string' ? d.PathMitarbeiter : '',\n  PathProduktionen: typeof d.PathProduktionen === 'string' ? d.PathProduktionen : '',\n  PathStammdaten: typeof d.PathStammdaten === 'string' ? d.PathStammdaten : '',\n  PathPTUser: typeof d.PathPTUser === 'string' ? d.PathPTUser : ''\n};\n\n// Ergebnis für die weiteren Nodes bereitstellen\nmsg.body = { data: normalized, version: body.version };\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1220,
        "wires": [
            [
                "3efc42592dbe14c5"
            ],
            [
                "ac0bdf33d3ceac64"
            ]
        ]
    },
    {
        "id": "ac0bdf33d3ceac64",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 590,
        "y": 1240,
        "wires": []
    },
    {
        "id": "3efc42592dbe14c5",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||\n    '';\n\nif (!base) {\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n}\n\nmsg.filename = base + '/path.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1200,
        "wires": [
            [
                "17d495e513099ccd"
            ]
        ]
    },
    {
        "id": "17d495e513099ccd",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "Version vergleichen",
        "func": "const cur = global.get('paths_version') || '0';\nconst cli = String(msg.body?.version || '');\nif (cli !== cur) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion: cur };\n  return [null, msg];\n}\nconst next = msg.body.data || {};\nmsg.payload = JSON.stringify(next, null, 2);\nmsg.nextVersion = String(Date.now());\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 770,
        "y": 1200,
        "wires": [
            [
                "d8f01b3cc92d1167"
            ],
            [
                "3acd3a13433e546d"
            ]
        ]
    },
    {
        "id": "3acd3a13433e546d",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 970,
        "y": 1220,
        "wires": []
    },
    {
        "id": "d8f01b3cc92d1167",
        "type": "file",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "path.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 990,
        "y": 1180,
        "wires": [
            [
                "c525012d8c78c4b7"
            ]
        ]
    },
    {
        "id": "c525012d8c78c4b7",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "Globals setzen + Antwort",
        "func": "try { var data = JSON.parse(msg.payload); } catch(e) { data = {}; }\nif (data.PathMitarbeiter !== undefined) global.set('PathMitarbeiter', data.PathMitarbeiter);\nif (data.PathProduktionen !== undefined) global.set('PathProduktionen', data.PathProduktionen);\nif (data.PathStammdaten !== undefined) global.set('PathStammdaten', data.PathStammdaten);\nif (data.PathPTUser !== undefined) global.set('PathPTUser', data.PathPTUser);\nif (msg.nextVersion) global.set('paths_version', msg.nextVersion);\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('paths_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1180,
        "wires": [
            [
                "9836651176dc7871"
            ]
        ]
    },
    {
        "id": "9836651176dc7871",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "e26be10f69baa19a",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 1430,
        "y": 1180,
        "wires": []
    },
    {
        "id": "bc4d2fcb1292f184",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "adminpw.json lesen",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 710,
        "y": 1900,
        "wires": [
            [
                "965b3c8fd920c952"
            ]
        ]
    },
    {
        "id": "9e6d05ed3a7e1f73",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "Body sichern + Pfad setzen",
        "func": "const body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst given = (body.password ?? '').toString();\n\nif (!given) {\n    msg.statusCode = 400;\n    msg.payload = { ok: false, error: 'missing_password' };\n    return [null, msg];\n}\n\n// Passwort für später parken\nmsg.givenPassword = given;\n\n// Datei-Pfad setzen (hier über den File-Node einfacher per ENV!)\n// -> im nachfolgenden \"file in\" Node dann Filename = ${IMMO24_USERDATA}/adminpw.json (Typ: env)\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1920,
        "wires": [
            [
                "bc4d2fcb1292f184"
            ],
            [
                "be5f366354440cc0"
            ]
        ]
    },
    {
        "id": "2efc0cbd79d32843",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "",
        "url": "/api/adminpw",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1980,
        "wires": [
            [
                "c269273b6151b3ba"
            ]
        ]
    },
    {
        "id": "c269273b6151b3ba",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "validate fields",
        "func": "const body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst newPassword = (body.newPassword ?? '').toString();\nconst repeatPassword = (body.repeatPassword ?? '').toString();\n\nif (!newPassword || !repeatPassword) {\n  msg.statusCode = 400;\n  msg.payload = { ok:false, error:'missing_fields' };\n  return [null, msg];\n}\nif (newPassword !== repeatPassword) {\n  msg.statusCode = 422;\n  msg.payload = { ok:false, error:'password_mismatch' };\n  return [null, msg];\n}\n// ok → für File-Node String vorbereiten\nmsg.payload = JSON.stringify({ password: newPassword }, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 360,
        "y": 1980,
        "wires": [
            [
                "0b64a9434672861a"
            ],
            [
                "1e33850e291001d2"
            ]
        ]
    },
    {
        "id": "0b64a9434672861a",
        "type": "file",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "adminpw.json schreiben",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 590,
        "y": 1960,
        "wires": [
            [
                "92cfee7ee2b864cf"
            ]
        ]
    },
    {
        "id": "92cfee7ee2b864cf",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "200 OK",
        "func": "msg.statusCode = 200;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 800,
        "y": 1960,
        "wires": [
            [
                "7ccfa3d0c632af77"
            ]
        ]
    },
    {
        "id": "1e33850e291001d2",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "error response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 2000,
        "wires": []
    },
    {
        "id": "7ccfa3d0c632af77",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "844ea0e2d48407a4",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 960,
        "y": 1960,
        "wires": []
    },
    {
        "id": "4ffc5daf677ec631",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "",
        "url": "/api/schema",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "84a54dfd32c09623"
            ]
        ]
    },
    {
        "id": "8fabcb73dec928c3",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "schemes.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 890,
        "y": 1660,
        "wires": [
            [
                "34d4dff87db069a4"
            ]
        ]
    },
    {
        "id": "34d4dff87db069a4",
        "type": "json",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 1660,
        "wires": [
            [
                "02a64ed83e42b932"
            ]
        ]
    },
    {
        "id": "6b575f053cf737f1",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1480,
        "y": 1700,
        "wires": []
    },
    {
        "id": "5da5a2a98450f900",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "",
        "url": "/api/schema",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1780,
        "wires": [
            [
                "72f7fe6d9db4a64b"
            ]
        ]
    },
    {
        "id": "72f7fe6d9db4a64b",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "Validate + toWrite",
        "func": "// Body robust ermitteln ({schema:{…}}, {data:{…}} oder flach)\nconst body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst container =\n  (body.schema && typeof body.schema === 'object') ? body.schema :\n    (body.data && typeof body.data === 'object') ? body.data :\n      body;\n\nconst projekt = container?.projektordnerSchema;\nconst session = container?.sessionSchema;\nconst version = body?.version;\n\n// Validierung\nif (typeof version !== 'string' || typeof projekt !== 'string' || typeof session !== 'string') {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\n\n// Für File-Node (schreibt nur die Schemes, ohne Version)\nmsg.payload = JSON.stringify({\n  projektordnerSchema: projekt,\n  sessionSchema: session\n}, null, 2);\n\nmsg.clientVersion = version;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1780,
        "wires": [
            [
                "1d16bbe8cc72169d"
            ],
            [
                "c95b6a77fbecb357"
            ]
        ],
        "outputLabels": [
            "okay",
            "error"
        ]
    },
    {
        "id": "1809518017dbcabf",
        "type": "file",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "schemes.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 850,
        "y": 1760,
        "wires": [
            [
                "c95b6a77fbecb357"
            ]
        ]
    },
    {
        "id": "c95b6a77fbecb357",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 1760,
        "wires": [],
        "info": "Bei Erfolg sendet der vorangehende http response (200) schon –\ndieser Knoten dient als Fallback für Fehlerausgänge."
    },
    {
        "id": "84a54dfd32c09623",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "schemes.json Verzeichnis",
        "func": "const base = (global.get('PathStammdaten') || '').replace(/[\\\\/]+$/, '');\nmsg.filename = base + '/schemes.json';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1680,
        "wires": [
            [
                "3dcdb1f1d4539178"
            ]
        ]
    },
    {
        "id": "1d16bbe8cc72169d",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "schemes.json Verzeichnis",
        "func": "const base = global.get('PathStammdaten');\nif (!base) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'no_stammdaten_path' };\n    return [null, msg];\n}\nmsg.filename = base + '/schemes.json';\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1760,
        "wires": [
            [
                "1809518017dbcabf"
            ]
        ]
    },
    {
        "id": "493257847a89607c",
        "type": "change",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "global.activeUser = payload.user",
        "rules": [
            {
                "t": "set",
                "p": "activeUser",
                "pt": "global",
                "to": "payload.user",
                "tot": "msg"
            }
        ],
        "x": 400,
        "y": 340,
        "wires": [
            [
                "f9ffa4cff5e42b6c"
            ]
        ]
    },
    {
        "id": "4d0412ea662244b2",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1440,
        "y": 340,
        "wires": []
    },
    {
        "id": "21ec615fa112d830",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "",
        "url": "/api/logout",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "099c10320de220de"
            ]
        ]
    },
    {
        "id": "099c10320de220de",
        "type": "change",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "global.activeUser = null",
        "rules": [
            {
                "t": "set",
                "p": "activeUser",
                "pt": "global",
                "to": "null",
                "tot": "json"
            }
        ],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "b323d5d8aaef30c7"
            ]
        ]
    },
    {
        "id": "5e9e7b80f7ec109e",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 880,
        "y": 400,
        "wires": []
    },
    {
        "id": "1a86fd43dc214f2e",
        "type": "fs-ops-dir",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "MA-Ordner lesen",
        "path": "PathMitarbeiter",
        "pathType": "global",
        "filter": "",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "52b1a396d290f184"
            ]
        ]
    },
    {
        "id": "52b1a396d290f184",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Unsichtbare filtern",
        "func": "if(!Array.isArray(msg.payload)) msg.payload=[];\nmsg.payload = msg.payload.filter(n => typeof n === 'string' && !n.startsWith('.'));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 680,
        "wires": [
            [
                "24a5473359171122"
            ]
        ]
    },
    {
        "id": "24a5473359171122",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "zu Pfaden konvertieren",
        "func": "const base = global.get('PathMitarbeiter') || '';\nmsg.payload = (msg.payload || []).map(n => base + '/' + n);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 680,
        "wires": [
            [
                "135b0f9e7062482a"
            ]
        ]
    },
    {
        "id": "b9e241fc311d4a8e",
        "type": "fs-ops-stats",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Ordner Stats",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1090,
        "y": 660,
        "wires": [
            [
                "011503d41e3558fb"
            ]
        ]
    },
    {
        "id": "011503d41e3558fb",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Nur Ordnernamen (Array)",
        "func": "const pfade = msg.payload || [];\nconst stats = msg.stats || [];\nconst out = [];\nfor (let i = 0; i < pfade.length; i++) {\n  const s = stats[i];\n  let isDir = false;\n  if (s) {\n    if (typeof s.isDirectory === 'function') {\n      isDir = s.isDirectory();\n    } else if (typeof s.mode === 'number') {\n      isDir = (s.mode & 0o170000) === 0o040000;\n    }\n  }\n  if (isDir) {\n    const teile = pfade[i].split(/[\\\\/]/);\n    const name = teile[teile.length - 1];\n    if (name && !name.startsWith('.')) out.push(name);\n  }\n}\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1310,
        "y": 660,
        "wires": [
            [
                "f12d625b1efdeba0"
            ]
        ]
    },
    {
        "id": "8ce945730cd5d01d",
        "type": "split",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "pro Ordner",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 740,
        "wires": [
            [
                "db07b5ab350e85bb"
            ]
        ]
    },
    {
        "id": "db07b5ab350e85bb",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Pfad zu immo24/immo24-user.json",
        "func": "const PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst userName = msg.payload; // einzelner Ordnername\nmsg.userName = userName;\nmsg.filename = `${PathMitarbeiter}/${userName}/immo24/immo24-user.json`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 740,
        "wires": [
            [
                "2a61d62257f7adba"
            ]
        ]
    },
    {
        "id": "2a61d62257f7adba",
        "type": "fs-ops-access",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Datei vorhanden?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 930,
        "y": 740,
        "wires": [
            [
                "11da59bf9c49b269"
            ],
            [
                "38643e44f98a6583"
            ]
        ]
    },
    {
        "id": "11da59bf9c49b269",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "immo24-user.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1170,
        "y": 720,
        "wires": [
            [
                "f512e915f1bef756"
            ]
        ]
    },
    {
        "id": "38643e44f98a6583",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "leer markieren",
        "func": "msg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1140,
        "y": 760,
        "wires": [
            [
                "18f6220e38521937"
            ]
        ]
    },
    {
        "id": "18f6220e38521937",
        "type": "join",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Array sammeln",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "useparts": true,
        "x": 1720,
        "y": 760,
        "wires": [
            [
                "a8652c7098e651f4"
            ]
        ]
    },
    {
        "id": "a8652c7098e651f4",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Nulls entfernen + sortieren",
        "func": "// Erwartet msg.payload = Array aus Objekten oder nulls\n// Format: { name: \"<ordnername>\", kuerzel: \"<string>\" }\n\n// Nulls entfernen\nlet arr = Array.isArray(msg.payload)\n    ? msg.payload.filter(v => v && typeof v === 'object')\n    : [];\n\n// Sortieren nach 'name'\narr.sort((a, b) => String(a.name).localeCompare(String(b.name), 'de'));\n\n// sauberes msg zurückgeben\nmsg.payload = arr;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 760,
        "wires": [
            [
                "61816f910386b34c"
            ]
        ]
    },
    {
        "id": "f512e915f1bef756",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Kürzel extrahieren (nie droppen)",
        "func": "let text = (msg.payload || \"\").trim();\n\nif (!text) {\n  msg.payload = null;\n} else {\n  msg.payload = { name: msg.userName, kuerzel: text };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 720,
        "wires": [
            [
                "18f6220e38521937"
            ]
        ]
    },
    {
        "id": "5036f285ad308641",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "",
        "url": "/api/user",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "32033b1942a816ca"
            ]
        ]
    },
    {
        "id": "32033b1942a816ca",
        "type": "link call",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Scan-Flow aufrufen",
        "links": [
            "7f0afda97c05ab7f"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 330,
        "y": 620,
        "wires": [
            [
                "f76642bcb1764cca"
            ]
        ]
    },
    {
        "id": "f76642bcb1764cca",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "200 JSON",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 550,
        "y": 620,
        "wires": []
    },
    {
        "id": "61816f910386b34c",
        "type": "link out",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "GET User Return",
        "mode": "return",
        "links": [],
        "x": 1995,
        "y": 700,
        "wires": []
    },
    {
        "id": "7f0afda97c05ab7f",
        "type": "link in",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "GET User Flow In",
        "links": [],
        "x": 75,
        "y": 680,
        "wires": [
            [
                "1a86fd43dc214f2e"
            ]
        ]
    },
    {
        "id": "452e7f1fce6cd35e",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "",
        "url": "/api/login",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "493257847a89607c"
            ]
        ]
    },
    {
        "id": "07041f344aea141d",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "",
        "url": "/api/user",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "a29b45ce8662063f"
            ]
        ]
    },
    {
        "id": "a29b45ce8662063f",
        "type": "link call",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "User-Flow aufrufen",
        "links": [
            "d1380deb997605f5"
        ],
        "linkType": "static",
        "timeout": "120",
        "x": 350,
        "y": 880,
        "wires": [
            [
                "84239da3ef9920ba"
            ]
        ]
    },
    {
        "id": "84239da3ef9920ba",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "HTTP 200",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 680,
        "y": 880,
        "wires": []
    },
    {
        "id": "d1380deb997605f5",
        "type": "link in",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "POST User Flow In",
        "links": [],
        "x": 75,
        "y": 940,
        "wires": [
            [
                "9594938aa57ba1e4"
            ]
        ]
    },
    {
        "id": "9594938aa57ba1e4",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "validate payload",
        "func": "const p = msg.payload || {};\nconst list = Array.isArray(p.mitarbeiter) ? p.mitarbeiter : [];\nif (!Array.isArray(list) || list.length === 0) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'mitarbeiter array required' };\n    return msg;\n}\nconst base = global.get('PathMitarbeiter') || '';\nmsg.base = base;\nmsg.payload = list.map(x => ({ name: String(x?.name ?? ''), kuerzel: String(x?.kuerzel ?? '') }));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 940,
        "wires": [
            [
                "798096a61f91b326"
            ]
        ]
    },
    {
        "id": "798096a61f91b326",
        "type": "split",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "split user",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 380,
        "y": 940,
        "wires": [
            [
                "897b0239ea7136a4"
            ]
        ]
    },
    {
        "id": "897b0239ea7136a4",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "Pfade festlegen",
        "func": "const base = msg.base || '';\nconst name = msg.payload.name;\nconst kuerzel = msg.payload.kuerzel;\nif (!name) { msg.payload = { name, action: 'skipped:name-missing' }; return msg; }\nmsg.user = { name, kuerzel };\nmsg.paths = {\n  userDir: `${base}/${name}`,\n  metaDir: `${base}/${name}/immo24`,\n  metaFile: `${base}/${name}/immo24/immo24-user.json`\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 940,
        "wires": [
            [
                "6e1e460999059bbc"
            ]
        ]
    },
    {
        "id": "6e1e460999059bbc",
        "type": "fs-ops-access",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "Check userDir",
        "path": "",
        "pathType": "str",
        "filename": "paths.userDir",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 760,
        "y": 940,
        "wires": [
            [
                "a4056ba0f72c5e5a"
            ],
            [
                "0ae5b94a4fdaabd9"
            ]
        ]
    },
    {
        "id": "0ae5b94a4fdaabd9",
        "type": "fs-ops-mkdir",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "mkdir userDir",
        "path": "",
        "pathType": "str",
        "dirname": "paths.userDir",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "dir",
        "fullpathType": "msg",
        "x": 940,
        "y": 960,
        "wires": [
            [
                "a4056ba0f72c5e5a"
            ]
        ]
    },
    {
        "id": "a4056ba0f72c5e5a",
        "type": "fs-ops-access",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "metaDir exists?",
        "path": "",
        "pathType": "str",
        "filename": "paths.metaDir",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1120,
        "y": 940,
        "wires": [
            [
                "ce86d3ee96f10372"
            ],
            [
                "d06d9a5d2e099b86"
            ]
        ]
    },
    {
        "id": "d06d9a5d2e099b86",
        "type": "fs-ops-mkdir",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "mkdir metaDir",
        "path": "",
        "pathType": "str",
        "dirname": "paths.metaDir",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "dir",
        "fullpathType": "msg",
        "x": 1300,
        "y": 960,
        "wires": [
            [
                "ce86d3ee96f10372",
                "cfde9cbf7130a7bb"
            ]
        ]
    },
    {
        "id": "ce86d3ee96f10372",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "payload/filename setzen",
        "func": "msg.filename = msg.paths.metaFile;\nmsg.payload = msg.user.kuerzel; // exakt wie geliefert\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1510,
        "y": 940,
        "wires": [
            [
                "7b2d14455bd6e85f"
            ]
        ]
    },
    {
        "id": "7b2d14455bd6e85f",
        "type": "file",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "immo24-user.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1760,
        "y": 940,
        "wires": [
            [
                "02a0f39c7026dc2c"
            ]
        ]
    },
    {
        "id": "02a0f39c7026dc2c",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "result entry",
        "func": "msg.payload = { name: msg.user.name, action: 'written' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1970,
        "y": 940,
        "wires": [
            [
                "91978a0f8d70300f"
            ]
        ]
    },
    {
        "id": "91978a0f8d70300f",
        "type": "join",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "",
        "joiner": "",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2110,
        "y": 940,
        "wires": [
            [
                "eebd44240de5fb71"
            ]
        ]
    },
    {
        "id": "eebd44240de5fb71",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "200 summary",
        "func": "const arr = Array.isArray(msg.payload) ? msg.payload : [];\nmsg.statusCode = 200;\nmsg.payload = { ok: true, results: arr, count: arr.length };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2260,
        "y": 940,
        "wires": [
            [
                "7f3c436b70327156"
            ]
        ]
    },
    {
        "id": "7f3c436b70327156",
        "type": "link out",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "POST User Flow Return",
        "mode": "return",
        "links": [],
        "x": 2385,
        "y": 940,
        "wires": []
    },
    {
        "id": "f9ffa4cff5e42b6c",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "Kürzel-Pfad festlegen",
        "func": "let activeUser = msg.payload.user;\nlet PathMitarbeiter = global.get('PathMitarbeiter') || '';\nmsg.PathKuerzel = `${PathMitarbeiter}/${activeUser}/immo24/immo24-user.json`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 340,
        "wires": [
            [
                "839a98d79f088090"
            ]
        ]
    },
    {
        "id": "839a98d79f088090",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "immo24-user.json lesen",
        "filename": "PathKuerzel",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 930,
        "y": 340,
        "wires": [
            [
                "3aa9611b4da07733"
            ]
        ]
    },
    {
        "id": "3aa9611b4da07733",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "setze global.activeUserKuerzel",
        "func": "global.set('activeUserKuerzel', msg.payload.trim());\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "4d0412ea662244b2"
            ]
        ]
    },
    {
        "id": "d30dfe6c1a9a0ec2",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "e7ecc6a6616c1795",
        "name": "",
        "url": "/api/activeUser",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "e6e5edd1e7c1104b"
            ]
        ]
    },
    {
        "id": "e6e5edd1e7c1104b",
        "type": "change",
        "z": "92e5dfcb5c3552c2",
        "g": "e7ecc6a6616c1795",
        "name": "msg.payload = global.activeUser",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "activeUser",
                "tot": "global"
            }
        ],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "eaf345ce67077f77"
            ]
        ]
    },
    {
        "id": "eaf345ce67077f77",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "e7ecc6a6616c1795",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 640,
        "y": 500,
        "wires": []
    },
    {
        "id": "b323d5d8aaef30c7",
        "type": "change",
        "z": "92e5dfcb5c3552c2",
        "g": "dc4af3db75f61152",
        "name": "global.activeUserKuerzel = null",
        "rules": [
            {
                "t": "set",
                "p": "activeUserKuerzel",
                "pt": "global",
                "to": "null",
                "tot": "json"
            }
        ],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "5e9e7b80f7ec109e"
            ]
        ]
    },
    {
        "id": "02a64ed83e42b932",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "Globals setzen + Antwort",
        "func": "let ver = global.get('scheme_version');\nif (!ver) { ver = String(Date.now()); global.set('scheme_version', ver); }\nconst data = typeof msg.payload === 'object' && msg.payload ? msg.payload : {};\nif (data.projektordnerSchema !== undefined) global.set('projektordnerSchema', data.projektordnerSchema);\nif (data.sessionSchema !== undefined) global.set('sessionSchema', data.sessionSchema);\nmsg.payload = { data, version: ver };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1660,
        "wires": [
            [
                "6b575f053cf737f1"
            ]
        ]
    },
    {
        "id": "0b4443336c7bd8ae",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "",
        "url": "/api/initialize",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "abfb2e6ff7c827c4"
            ]
        ]
    },
    {
        "id": "22c77170bc28046b",
        "type": "http request",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "GET Schema",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:59593/api/schema",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 160,
        "wires": [
            [
                "3d5bcef0e3e1d8e1"
            ]
        ]
    },
    {
        "id": "7935cf731073a570",
        "type": "http request",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "GET User",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:59593/api/user",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 200,
        "wires": [
            [
                "3d5bcef0e3e1d8e1"
            ]
        ]
    },
    {
        "id": "104b571128586e5f",
        "type": "change",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "topic = schema",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "schema",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 160,
        "wires": [
            [
                "22c77170bc28046b"
            ]
        ]
    },
    {
        "id": "c0aa387d8488293b",
        "type": "change",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "topic = user",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "user",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 200,
        "wires": [
            [
                "7935cf731073a570"
            ]
        ]
    },
    {
        "id": "3d5bcef0e3e1d8e1",
        "type": "join",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1090,
        "y": 180,
        "wires": [
            [
                "67df1612aa33160e"
            ]
        ]
    },
    {
        "id": "67df1612aa33160e",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "Globals setzen, Finalize",
        "func": "const all = msg.payload || {};\nlet schemaIn = all.schema || {};\nconst user = all.user || [];\nconst modules = all.modules || {};\n\n// Bestehendes initialize (vom Schema-Endpoint oder Check path) übernehmen\nconst upstreamInit =\n    (schemaIn && typeof schemaIn === \"object\" && schemaIn.initialize && typeof schemaIn.initialize === \"object\")\n        ? schemaIn.initialize\n        : {};\n\nconst modulesData = (modules && typeof modules === 'object' &&\n    modules.data && typeof modules.data === 'object')\n    ? modules.data\n    : {};\n\n\n// Schema normalisieren (falls {data:{...}})\nconst schemaObj = (schemaIn && typeof schemaIn === \"object\" && schemaIn.data)\n    ? schemaIn.data\n    : schemaIn;\n\n// Schema-Felder extrahieren als Strings\nconst schemaOut = {\n    sessionSchema: typeof schemaObj?.sessionSchema === \"string\" ? schemaObj.sessionSchema : \"\",\n    projektordnerSchema: typeof schemaObj?.projektordnerSchema === \"string\" ? schemaObj.projektordnerSchema : \"\"\n};\n\n// Paths aus msg.paths ODER aus Globals\nconst fromGlobals = {\n    PathProduktionen: global.get(\"PathProduktionen\") || \"\",\n    PathMitarbeiter: global.get(\"PathMitarbeiter\") || \"\",\n    PathStammdaten: global.get(\"PathStammdaten\") || \"\",\n    PathPTUser: global.get(\"PathPTUser\") || \"\"\n};\nconst paths = (msg.paths && typeof msg.paths === \"object\") ? msg.paths : fromGlobals;\n\n// Bewertung (nur für Felder, die wir beisteuern)\nconst schemaOK = !!(schemaOut.sessionSchema || schemaOut.projektordnerSchema);\n\n// Initialize zusammenführen – vorhandene Felder aus upstreamInit werden respektiert\nconst initialize = {\n    // Falls upstream etwas gesetzt hat, übernehmen; sonst sinnvolle Defaults\n    paths_json_present: upstreamInit.paths_json_present ?? true,\n    required_keys_ok: upstreamInit.required_keys_ok ?? true,\n\n    // aktueller Stand zum Schema\n    schema_ok: upstreamInit.schema_ok ?? schemaOK,\n\n    // Weitere Felder durchreichen, wenn vorhanden\n    dirs_exist: upstreamInit.dirs_exist ?? null,\n    missingKeys: Array.isArray(upstreamInit.missingKeys) ? upstreamInit.missingKeys : [],\n    emptyKeys: Array.isArray(upstreamInit.emptyKeys) ? upstreamInit.emptyKeys : [],\n    notFoundDirs: upstreamInit.notFoundDirs ?? null,\n\n    // needsUserAction: bleibt true, sobald irgendein Schritt das verlangt\n    needsUserAction: !!upstreamInit.needsUserAction\n};\n\n// === Vorgabe: ready immer true ===\nconst ready = true;\n\n// Globale Flags setzen\ntry { global.set(\"configReady\", ready, \"file\"); } catch { global.set(\"configReady\", ready); }\ntry { global.set(\"configReadyAt\", Date.now(), \"file\"); } catch { global.set(\"configReadyAt\", Date.now()); }\n\n// HTTP-Status immer 200\nmsg.statusCode = 200;\n\n// Antwort zusammensetzen: ready, initialize, paths, schema\nmsg.payload = {\n    ready,\n    initialize,\n    paths,\n    schema: schemaOut,\n    modules: modulesData\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 180,
        "wires": [
            [
                "0b59bc840a6c75b4"
            ]
        ]
    },
    {
        "id": "0b59bc840a6c75b4",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1620,
        "y": 160,
        "wires": []
    },
    {
        "id": "6a158b47a9a44d52",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "path.json lesen",
        "filename": "filenamePath",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1240,
        "y": 80,
        "wires": [
            [
                "26e136e20196659a"
            ]
        ]
    },
    {
        "id": "abfb2e6ff7c827c4",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "Userdata-Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||   // Fallback, falls du es global setzt\n    '';\n\nif (!base) {\n    // optionales Logging hilft beim Debuggen\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n    // Wenn du willst, kannst du hier noch einen Default setzen:\n    // msg.filename = '/tmp/path.json'; return msg;\n}\n\nmsg.filenamePath = base + '/path.json';\nmsg.filenameConfig = base + '/config.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "8c98a713fae2174e"
            ]
        ]
    },
    {
        "id": "26e136e20196659a",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "Check path.json",
        "func": "function isPlainObject(v) {\n    return v !== null && typeof v === \"object\" && !Array.isArray(v);\n}\n\nlet parsed = null;\ntry {\n    parsed = msg.payload ? JSON.parse(msg.payload) : null;\n} catch {\n    parsed = null; // kaputte JSON => wie leer behandeln\n}\n\nlet paths = isPlainObject(parsed) && isPlainObject(parsed.data) ? parsed.data : parsed;\n\n// ungültig/leeres Objekt?\nconst isEmptyOrInvalid = !isPlainObject(paths) || Object.keys(paths).length === 0;\n\nconst requiredPathKeys = [\"PathProduktionen\", \"PathMitarbeiter\"];\nconst missingKeys = isEmptyOrInvalid ? requiredPathKeys : requiredPathKeys.filter(k => !(k in paths));\nconst emptyKeys = isEmptyOrInvalid ? requiredPathKeys : requiredPathKeys.filter(k => typeof paths[k] !== \"string\" || paths[k].trim() === \"\");\n\nconst requiredKeysOk = !isEmptyOrInvalid && missingKeys.length === 0 && emptyKeys.length === 0;\n\nif (isEmptyOrInvalid || !requiredKeysOk) {\n    const initialize = {\n        paths_json_present: !isEmptyOrInvalid,\n        required_keys_ok: requiredKeysOk,\n        schema_ok: false,\n        dirs_exist: null,\n        missingKeys,\n        emptyKeys,\n        notFoundDirs: null,\n        needsUserAction: true\n    };\n\n    global.set(\"configReady\", false);\n    global.set(\"configReadyAt\", Date.now());\n\n    // WICHTIG: bestehendes msg wiederverwenden!\n    msg.statusCode = 503;\n    msg.payload = { ready: true, initialize };\n    return [null, msg]; // Out2 -> http response\n}\n\n// OK → Pfade weiterreichen\nmsg.paths = paths;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 80,
        "wires": [
            [
                "ccab7051afe7c5f9"
            ],
            [
                "0b59bc840a6c75b4"
            ]
        ],
        "outputLabels": [
            "Ok",
            "Abbruch"
        ]
    },
    {
        "id": "ccab7051afe7c5f9",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "Set Path Globals & Fan-out",
        "func": "// Erwartet: msg.paths = validiertes, normalisiertes Paths-Objekt (aus \"Check path.json\")\n// Wirkung: setzt die Global-Variablen synchron, dann gleicher msg weiter\n\nconst paths = msg.paths || {};\nconst set = (k, v) => { try { global.set(k, v, \"file\"); } catch { global.set(k, v); } };\n\n// Nur setzen, was existiert\nif (paths.PathProduktionen) set(\"PathProduktionen\", paths.PathProduktionen);\nif (paths.PathMitarbeiter) set(\"PathMitarbeiter\", paths.PathMitarbeiter);\nif (paths.PathStammdaten) set(\"PathStammdaten\", paths.PathStammdaten);\nif (paths.PathPTUser) set(\"PathPTUser\", paths.PathPTUser);\n\n// Optional hilfreiche Flags/Logs\nset(\"configReady\", false); // noch nicht fertig – Schema fehlt ja noch\nset(\"configReadyAt\", Date.now());\n\n// WICHTIG: denselben msg weitergeben (HTTP-Kopplung erhalten)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 60,
        "wires": [
            [
                "104b571128586e5f",
                "c0aa387d8488293b",
                "09539a417349ed12"
            ]
        ]
    },
    {
        "id": "f12d625b1efdeba0",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Leer Abbruch",
        "func": "// Out1 = normal weiter (es gibt Ordner)\n// Out2 = sofort [] zurück (keine Ordner) – gleiches msg behalten!\nif (!Array.isArray(msg.payload) || msg.payload.length === 0) {\n    msg.payload = [];\n    return [null, msg];   // <— gleiches msg!\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 660,
        "wires": [
            [
                "8ce945730cd5d01d"
            ],
            [
                "61816f910386b34c"
            ]
        ],
        "outputLabels": [
            "Ok",
            "Abbruch"
        ]
    },
    {
        "id": "135b0f9e7062482a",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "6be8557272aec66a",
        "name": "Leer Abbruch",
        "func": "if (!Array.isArray(msg.payload) || msg.payload.length === 0) {\n    msg.payload = [];\n    return [null, msg];   // <— nicht { payload: [] }, sondern dasselbe msg!\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 680,
        "wires": [
            [
                "b9e241fc311d4a8e"
            ],
            [
                "61816f910386b34c"
            ]
        ],
        "outputLabels": [
            "Ok",
            "Abbruch"
        ]
    },
    {
        "id": "cbb4b8942696bb9d",
        "type": "fs-ops-mkdir",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "Pro Tools Ordner anlegen",
        "path": "dir",
        "pathType": "msg",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1970,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "cfde9cbf7130a7bb",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "PT Modul aktiv?",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 980,
        "wires": [
            [
                "202dfb827bd90aa1"
            ]
        ]
    },
    {
        "id": "202dfb827bd90aa1",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "Ordnerliste",
        "func": "\nmsg.payload = [\n    \"clipeffectspresets\",\n    \"fadepresets\",\n    \"keyboardshortcuts\",\n    \"memorylocationpresets\",\n    \"pluginsettings\",\n    \"templates\",\n    \"trackdatapresets\",\n    \"trackdatarecallpresets\",\n    \"trackpresets\"\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 980,
        "wires": [
            [
                "dfe946a1c6b4afd3"
            ]
        ]
    },
    {
        "id": "dfe946a1c6b4afd3",
        "type": "split",
        "z": "92e5dfcb5c3552c2",
        "g": "353adffaf98dbce5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1790,
        "y": 980,
        "wires": [
            [
                "cbb4b8942696bb9d"
            ]
        ]
    },
    {
        "id": "3dcdb1f1d4539178",
        "type": "fs-ops-access",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "schemes.json vorhanden?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 640,
        "y": 1680,
        "wires": [
            [
                "8fabcb73dec928c3"
            ],
            [
                "148040fcc730ca47"
            ]
        ]
    },
    {
        "id": "148040fcc730ca47",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "8a2acb12476d4853",
        "name": "Schema fehlt",
        "func": "msg.statusCode = 404;\nmsg.payload = {\n    data: {},\n    version: null,\n    initialize: {\n        paths_json_present: true,   // Pfade waren da\n        required_keys_ok: true,     // Pfade ok\n        schema_ok: false,           // aber kein Schema\n        dirs_exist: null,\n        missingKeys: [],\n        emptyKeys: [],\n        notFoundDirs: null,\n        needsUserAction: true       // <--- wichtig\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1700,
        "wires": [
            [
                "6b575f053cf737f1"
            ]
        ]
    },
    {
        "id": "3ebd9c51cfdf4ba8",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "7284fb4c28608256",
        "name": "",
        "url": "/api/ping",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 2120,
        "wires": [
            [
                "e04a90dbd5bf3cd6"
            ]
        ]
    },
    {
        "id": "e04a90dbd5bf3cd6",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "7284fb4c28608256",
        "name": "ok/json",
        "func": "msg.payload = { ok: true }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2120,
        "wires": [
            [
                "2030ad39c5ce3066"
            ]
        ]
    },
    {
        "id": "2030ad39c5ce3066",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "7284fb4c28608256",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 460,
        "y": 2120,
        "wires": []
    },
    {
        "id": "8c98a713fae2174e",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "config.json lesen",
        "filename": "filenameConfig",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "61086db22d8b853d"
            ]
        ]
    },
    {
        "id": "61086db22d8b853d",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "Check config.json",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            [
                "703535289b800aa9"
            ]
        ]
    },
    {
        "id": "e671f4a51b6362bc",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "",
        "url": "/api/modules",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1420,
        "wires": [
            [
                "1ade0bf0a6f674ee"
            ]
        ]
    },
    {
        "id": "1ade0bf0a6f674ee",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||\n    '';\n\nif (!base) {\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n}\n\nmsg.filename = base + '/config.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1420,
        "wires": [
            [
                "f398f167cb8c7178"
            ]
        ]
    },
    {
        "id": "f398f167cb8c7178",
        "type": "fs-ops-access",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 520,
        "y": 1420,
        "wires": [
            [
                "9a9282133aeacde2"
            ],
            [
                "26b9a8e7932224ac"
            ]
        ]
    },
    {
        "id": "9a9282133aeacde2",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "config.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "allProps": false,
        "x": 730,
        "y": 1400,
        "wires": [
            [
                "242004fdae032167"
            ]
        ]
    },
    {
        "id": "26b9a8e7932224ac",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Fallback: {}",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 710,
        "y": 1440,
        "wires": [
            [
                "1f895ac9932a7cee"
            ]
        ]
    },
    {
        "id": "1f895ac9932a7cee",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Module anhängen + Globals",
        "func": "const raw = (msg.payload && typeof msg.payload === 'object') ? msg.payload : {};\nconst modules = (raw.modules && typeof raw.modules === 'object') ? raw.modules : {};\n\n// Version initialisieren/holen\nlet ver = global.get('modules_version');\nif (!ver) { ver = String(Date.now()); global.set('modules_version', ver); }\n\n// Globals setzen\nconst sm = modules.soundminer || {};\nglobal.set('modSoundminerEnabled', !!sm.enabled);\nglobal.set('modSoundminerVersion', typeof sm.version === 'string' ? sm.version : '');\nglobal.set('modSoundminerSupportPath', typeof sm.supportPath === 'string' ? sm.supportPath : '');\n\nmsg.payload = { data: modules, version: ver };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1400,
        "wires": [
            [
                "8170b5bc86b3784d"
            ]
        ]
    },
    {
        "id": "8170b5bc86b3784d",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1320,
        "y": 1400,
        "wires": []
    },
    {
        "id": "62c2acd3be62b23d",
        "type": "http in",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "",
        "url": "/api/modules",
        "method": "put",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1520,
        "wires": [
            [
                "771b3e806a126478"
            ]
        ]
    },
    {
        "id": "771b3e806a126478",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Body parsen + prüfen",
        "func": "// Robustes Parsing\nfunction safeParse(x) {\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\n\nconst body = safeParse(msg.payload);\n\n// Erwartet: { version: string, data: object }  mit data = { <modulname>: {…}, ... }\nif (!body || typeof body.version !== 'string' || typeof body.data !== 'object' || body.data === null || Array.isArray(body.data)) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\n\n// Minimalvalidierung pro Modul (hier: Soundminer strikt, andere Module pass-through)\nfunction normalizeModule(name, val) {\n  const v = (val && typeof val === 'object') ? val : {};\n  if (name.toLowerCase() === 'soundminer') {\n    return {\n      enabled: !!v.enabled,\n      version: typeof v.version === 'string' ? v.version : '',\n      supportPath: typeof v.supportPath === 'string' ? v.supportPath : ''\n    };\n  }\n  // Default: einfache Sanitization (keine Funktionen)\n  const out = {};\n  for (const k of Object.keys(v)) {\n    const x = v[k];\n    if (['string', 'number', 'boolean'].includes(typeof x) || (x && typeof x === 'object' && !Array.isArray(x))) {\n      out[k] = x;\n    }\n  }\n  return out;\n}\n\n// Alle Module normalisieren (aber NICHT mergen – das kommt später)\nconst incoming = {};\nfor (const m of Object.keys(body.data)) {\n  incoming[m] = normalizeModule(m, body.data[m]);\n}\n\nmsg.body = {\n  version: body.version,\n  incomingModules: incoming\n};\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1520,
        "wires": [
            [
                "4ff74ba316e148db"
            ],
            [
                "2923ea5fd1c21c81"
            ]
        ]
    },
    {
        "id": "2923ea5fd1c21c81",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 590,
        "y": 1540,
        "wires": []
    },
    {
        "id": "ee974cb3fd7f6996",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||\n    '';\n\nif (!base) {\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n}\n\nmsg.filename = base + '/config.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1480,
        "wires": [
            [
                "acfb3b627f62a753"
            ]
        ]
    },
    {
        "id": "4ff74ba316e148db",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Version vergleichen",
        "func": "const cur = global.get('modules_version') || '0';\nconst cli = String(msg.body?.version ?? '');\n\nif (!cli) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_required', currentVersion: cur };\n  return [null, msg];\n}\n\nif (cli !== cur) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion: cur };\n  return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1500,
        "wires": [
            [
                "ee974cb3fd7f6996"
            ],
            [
                "ac5eefe43e71e5d0"
            ]
        ]
    },
    {
        "id": "ac5eefe43e71e5d0",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 790,
        "y": 1520,
        "wires": []
    },
    {
        "id": "6251fde0a0385289",
        "type": "file",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "config.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1000,
        "y": 1480,
        "wires": [
            [
                "4c56eea28bb6fae8"
            ]
        ]
    },
    {
        "id": "4c56eea28bb6fae8",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Globals setzen + Antwort",
        "func": "// Neue modules_version setzen\nif (msg.nextVersion) global.set('modules_version', msg.nextVersion);\n\n// Optional: hilfreiche Module-Globals aktualisieren\nlet cfg;\ntry { cfg = JSON.parse(msg.payload); } catch { cfg = {}; }\nconst modules = (cfg.modules && typeof cfg.modules === 'object') ? cfg.modules : {};\nconst sm = modules.soundminer || {};\nglobal.set('SoundminerEnabled', !!sm.enabled);\nglobal.set('SoundminerVersion', typeof sm.version === 'string' ? sm.version : '');\nglobal.set('SoundminerSupportPath', typeof sm.supportPath === 'string' ? sm.supportPath : '');\n\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('modules_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 1480,
        "wires": [
            [
                "6597a2c2d9574b19"
            ]
        ]
    },
    {
        "id": "6597a2c2d9574b19",
        "type": "http response",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 1430,
        "y": 1480,
        "wires": []
    },
    {
        "id": "acfb3b627f62a753",
        "type": "file in",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "config.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "allProps": false,
        "x": 970,
        "y": 1440,
        "wires": [
            [
                "eae9c18d41aab546"
            ]
        ]
    },
    {
        "id": "c1c396c4cb20147e",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "Mergen + JSON bauen",
        "func": "const cfg = (msg.payload && typeof msg.payload === 'object') ? msg.payload : {};\nif (!cfg.modules || typeof cfg.modules !== 'object') cfg.modules = {};\n\nconst incoming = msg.body?.incomingModules || {};\nfor (const name of Object.keys(incoming)) {\n    const before = (cfg.modules[name] && typeof cfg.modules[name] === 'object') ? cfg.modules[name] : {};\n    cfg.modules[name] = { ...before, ...incoming[name] };\n}\n\nmsg.nextVersion = String(Date.now());\nmsg.payload = JSON.stringify(cfg, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1440,
        "wires": [
            [
                "6251fde0a0385289"
            ]
        ]
    },
    {
        "id": "242004fdae032167",
        "type": "json",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 890,
        "y": 1360,
        "wires": [
            [
                "1f895ac9932a7cee"
            ]
        ]
    },
    {
        "id": "eae9c18d41aab546",
        "type": "json",
        "z": "92e5dfcb5c3552c2",
        "g": "5381319fd7c06d55",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1130,
        "y": 1440,
        "wires": [
            [
                "c1c396c4cb20147e"
            ]
        ]
    },
    {
        "id": "09539a417349ed12",
        "type": "change",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "topic = modules",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "modules",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 240,
        "wires": [
            [
                "349c507dcedc766a"
            ]
        ]
    },
    {
        "id": "349c507dcedc766a",
        "type": "http request",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "GET Modules",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:59593/api/modules",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 940,
        "y": 240,
        "wires": [
            [
                "3d5bcef0e3e1d8e1"
            ]
        ]
    },
    {
        "id": "703535289b800aa9",
        "type": "function",
        "z": "92e5dfcb5c3552c2",
        "g": "682d5ba9e57c89d0",
        "name": "Set Config Globals",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 80,
        "wires": [
            [
                "6a158b47a9a44d52"
            ]
        ]
    },
    {
        "id": "36ed84ccc9d35759",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "url": "/api/pb/snapshot",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "75c5fbafa4446ee5"
            ]
        ]
    },
    {
        "id": "75c5fbafa4446ee5",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 1020,
        "wires": [
            [
                "cd99fbc23bfa41b0"
            ]
        ]
    },
    {
        "id": "cd99fbc23bfa41b0",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 560,
        "y": 1020,
        "wires": [
            [
                "3d38c4563478a24c"
            ],
            [
                "7bebdb3370022b2f"
            ]
        ]
    },
    {
        "id": "3d38c4563478a24c",
        "type": "file in",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "path.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "allProps": false,
        "x": 760,
        "y": 1000,
        "wires": [
            [
                "b37885c9be6e0c33"
            ]
        ]
    },
    {
        "id": "b37885c9be6e0c33",
        "type": "json",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 1000,
        "wires": [
            [
                "25b39abb2c577e54"
            ]
        ]
    },
    {
        "id": "7bebdb3370022b2f",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Fallback: []",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 1040,
        "wires": [
            [
                "25b39abb2c577e54"
            ]
        ]
    },
    {
        "id": "25b39abb2c577e54",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Version anhängen (global)",
        "func": "let ver = global.get('pb_version');\nif (!ver) { ver = String(Date.now()); global.set('pb_version', ver); }\nmsg.payload = { customers: Array.isArray(msg.payload) ? msg.payload : [], version: ver };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 1040,
        "wires": [
            [
                "20d6df6b06396c8d"
            ]
        ]
    },
    {
        "id": "20d6df6b06396c8d",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1340,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b49b21837662227a",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "url": "/api/pb/snapshot",
        "method": "put",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1160,
        "wires": [
            [
                "00aa34757e5184b5"
            ]
        ]
    },
    {
        "id": "00aa34757e5184b5",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Body parsen + prüfen",
        "func": "function safeParse(x){\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\nconst body = safeParse(msg.payload);\nif (!body || !Array.isArray(body.customers) || typeof body.version !== 'string') {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\nmsg.body = { customers: body.customers, version: body.version };\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 1160,
        "wires": [
            [
                "e7ccf4e57b055790"
            ],
            [
                "20a9d9b4af147904"
            ]
        ]
    },
    {
        "id": "20a9d9b4af147904",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 630,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e7ccf4e57b055790",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 1140,
        "wires": [
            [
                "2e2a317d13f0f6ff"
            ]
        ]
    },
    {
        "id": "2e2a317d13f0f6ff",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Version vergleichen (global)",
        "func": "// Version vergleichen (global) — mit Sortierung der Kundenliste\n\nconst currentVersion = global.get('pb_version') || '0';\nconst clientVersion = String(msg.body?.version || '');\nif (clientVersion !== currentVersion) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion };\n  return [null, msg];\n}\n\nconst next = Array.isArray(msg.body?.customers) ? msg.body.customers : [];\n\n// Namens-Feld ermitteln (String oder Objekt)\nfunction pickName(it) {\n  if (typeof it === 'string') return it;\n  if (it && typeof it === 'object') {\n    return it.name || it.title || it.kunde || it.customer || '';\n  }\n  return '';\n}\n\n// Deutsch sortieren, Groß/Klein ignorieren, numerisch korrekt (v2 < v10)\nconst collator = new Intl.Collator('de', { sensitivity: 'base', numeric: true });\n\n// In-Place sortieren\nnext.sort((a, b) => {\n  const A = String(pickName(a)).normalize('NFC').trim();\n  const B = String(pickName(b)).normalize('NFC').trim();\n  return collator.compare(A, B);\n});\n\n// JSON schreiben + neue Version setzen\nmsg.payload = JSON.stringify(next, null, 2);\nmsg.nextVersion = String(Date.now());\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1140,
        "wires": [
            [
                "a00da8a35639dbd8",
                "24d85613a2d37961"
            ],
            [
                "476e40734497434f"
            ]
        ]
    },
    {
        "id": "476e40734497434f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 1090,
        "y": 1200,
        "wires": []
    },
    {
        "id": "24d85613a2d37961",
        "type": "file",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1170,
        "y": 1160,
        "wires": [
            [
                "a4f9ae49b73f0cd9"
            ]
        ]
    },
    {
        "id": "a4f9ae49b73f0cd9",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "200 + neue Version setzen",
        "func": "if (msg.nextVersion) { global.set('pb_version', msg.nextVersion); }\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('pb_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1460,
        "y": 1160,
        "wires": [
            [
                "689c9849faf696d0"
            ]
        ]
    },
    {
        "id": "689c9849faf696d0",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 1650,
        "y": 1160,
        "wires": []
    },
    {
        "id": "b04e57b948e77106",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "",
        "url": "/api/projektanlage/templates",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 580,
        "wires": [
            [
                "e7c1ee6dc65845d6"
            ]
        ]
    },
    {
        "id": "68d4f6662ecbfeb3",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2590,
        "y": 560,
        "wires": []
    },
    {
        "id": "175a674c11285c85",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "url": "/api/projektanlage/projekte",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "6c009de142b00a69"
            ]
        ]
    },
    {
        "id": "a5b3212ee0a897af",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "",
        "url": "/api/projektanlage/launchpt",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 880,
        "wires": [
            [
                "0a7761f43773cf50"
            ]
        ]
    },
    {
        "id": "1d2f2c031ccf07cb",
        "type": "OS",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "",
        "x": 630,
        "y": 880,
        "wires": [
            [
                "8f60e803a9417da9"
            ]
        ]
    },
    {
        "id": "530d5ce378abe4a4",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "Befehle je nach OS",
        "func": "let fullPath = msg.filename;\nif (msg.payload.platform === \"win32\") {\n    fullPath = fullPath.replace(/\\//g, \"\\\\\");\n    msg.command = 'start \"\" \"' + fullPath + '\"';\n} else if (msg.payload.platform === \"darwin\") {\n    msg.command = 'open \"' + fullPath + '\"';\n} else {\n    msg.command = \"echo OS nicht unterstützt\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "45b8aaec67b9454d"
            ]
        ]
    },
    {
        "id": "45b8aaec67b9454d",
        "type": "exec",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Pro Tools öffnen",
        "x": 1220,
        "y": 880,
        "wires": [
            [
                "25db702b7507e6dd"
            ],
            [],
            []
        ]
    },
    {
        "id": "8f60e803a9417da9",
        "type": "delay",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 880,
        "wires": [
            [
                "530d5ce378abe4a4"
            ]
        ]
    },
    {
        "id": "6c009de142b00a69",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Pflichtfelder + Vorbereitung",
        "func": "// Body sicher holen\nconst b = (msg.payload && typeof msg.payload === \"object\") ? msg.payload : (msg.req && msg.req.body) || {};\n\n// Pflichtfelder\nconst need = [\"kunde\", \"datum\", \"moid\", \"projektname\", \"stufe\", \"template\"];\nconst fehlende = need.filter(k => !b[k]);\nif (fehlende.length) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"missing fields\", fields: fehlende };\n    return [null, msg];\n}\n\n// --- Windows-Namen prüfen ---\nfunction windowsNameReport(input) {\n    const res = { valid: true, errors: [] };\n    const s = String(input ?? '').trim();\n\n    // Verbotene Zeichen + Steuerzeichen\n    const forbiddenRe = /[<>:\"/\\\\|?*\\u0000-\\u001F]/g;\n    const bad = s.match(forbiddenRe);\n    if (bad) {\n        res.valid = false;\n        const uniq = [...new Set(bad)];\n        res.errors.push({\n            code: 'forbidden_chars',\n            chars: uniq,\n            message: `Unzulässige Zeichen: ${uniq.join(' ')}`\n        });\n    }\n\n    // Kein Punkt oder Leerzeichen am Ende\n    if (/[. ]$/.test(s)) {\n        res.valid = false;\n        res.errors.push({\n            code: 'trailing_dot_or_space',\n            message: 'Darf nicht mit Punkt oder Leerzeichen enden'\n        });\n    }\n\n    // Reservierte Namen\n    if (/^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\..*)?$/i.test(s)) {\n        res.valid = false;\n        res.errors.push({\n            code: 'reserved_name',\n            message: 'Reservierter Windows-Name'\n        });\n    }\n\n    return res;\n}\n\n// Felder, die zu Pfaden werden, validieren\nconst fieldReports = {\n    projektname: windowsNameReport(b.projektname),\n    moid: windowsNameReport(b.moid),\n    kunde: windowsNameReport(String(b.kunde)),\n};\n\nconst validationErrors = Object.entries(fieldReports)\n    .filter(([, rep]) => !rep.valid)\n    .map(([field, rep]) => ({ field, errors: rep.errors }));\n\nif (validationErrors.length) {\n    msg.statusCode = 422;\n    msg.payload = { error: 'validation_failed', details: validationErrors };\n    return [null, msg];\n}\n\n// --- Globals ---\nconst PathProduktionen = global.get(\"PathProduktionen\") || \"\";\nconst PathMitarbeiter = global.get(\"PathMitarbeiter\") || \"\";\nconst activeUser = global.get(\"activeUser\") || \"\";\nconst activeUserKuerzel = global.get(\"activeUserKuerzel\") || \"\";\nconst projektordnerSchema = global.get(\"projektordnerSchema\") || \"\";\nconst kundenStammdaten = global.get(\"kundenStammdaten\") || [];\nmsg.sessionSchema = global.get(\"sessionSchema\") || \"{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}\";\n\n// Ordnername aus Schema\nconst values = {\n    datum: b.datum,\n    projektname: b.projektname,\n    moid: b.moid,\n    benutzer: activeUserKuerzel,\n    kunde: b.kunde\n};\nconst projektOrdner = projektordnerSchema.replace(/{{(\\w+)}}/g, (_, k) => values[k] || \"\");\nconst zielPfad = `${PathProduktionen}/${b.kunde}/${projektOrdner}`;\n\n// Unterordner & Label\nconst kundeObj = (kundenStammdaten || []).find(k => k.kunde === b.kunde) || {};\nconst unterordner = Array.isArray(kundeObj.ordner) ? kundeObj.ordner : [];\nconst stufeObj = unterordner.find(o => o.name === b.stufe);\nconst stufeLabel = stufeObj ? stufeObj.label : b.stufe;\n\n// --- Template-Handling ---\nconst baseTemplates = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\nconst t = String(b.template || \"\");\nconst isFile = /\\.ptxt$/i.test(t);\n\nlet templateSource = \"\";\nlet audioSource = null;\n\nif (isFile) {\n    templateSource = `${baseTemplates}/${t}`;\n} else {\n    const ptxtName = `${t}.ptxt`;\n    templateSource = `${baseTemplates}/${t}/${ptxtName}`;\n    audioSource = `${baseTemplates}/${t}/Audio Files`;\n}\n\n// Alles unter msg.paths bündeln\nmsg.paths = {\n    zielPfad,\n    templateDest: `${zielPfad}/${b.stufe}`,\n    audioDest: `${zielPfad}/${b.stufe}/Audio Files`,\n    templateSource,\n    audioSource\n};\n\n// persist\nmsg.data = { ...b, stufeLabel, zielPfad, unterordner };\nmsg.filename = `${zielPfad}/immo24-proj.json`;\nmsg.payload = zielPfad; // für fs-ops-access\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "465673bffca4e0d2"
            ],
            [
                "a077f771503b109f"
            ]
        ],
        "outputLabels": [
            "access",
            "error"
        ]
    },
    {
        "id": "465673bffca4e0d2",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Duplikate prüfen",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 720,
        "y": 240,
        "wires": [
            [
                "33e7012a8455dcea"
            ],
            [
                "a5cbafaa75b73c7c"
            ]
        ]
    },
    {
        "id": "33e7012a8455dcea",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Dupl. error",
        "func": "msg.statusCode = 409;\nmsg.payload = { error: \"Das Projekt existiert bereits.\", zielPfad: msg.payload };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "1301b6fbc4bf55ad"
            ]
        ]
    },
    {
        "id": "a5cbafaa75b73c7c",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Projektordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "data.zielPfad",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 940,
        "y": 260,
        "wires": [
            [
                "03462b00bd70668a"
            ]
        ]
    },
    {
        "id": "a077f771503b109f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 700,
        "y": 280,
        "wires": []
    },
    {
        "id": "03462b00bd70668a",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "JSON formatieren",
        "func": "const d = msg.data;\nmsg.filename = `${d.zielPfad}/immo24-proj.json`;\nmsg.payload = JSON.stringify({\n    erstellt_am: d.datum,\n    kunde: d.kunde,\n    projektname: d.projektname,\n    mo_id: d.moid,\n    user: global.get('activeUser')\n}, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 260,
        "wires": [
            [
                "08f8137fd2a41a4d"
            ]
        ]
    },
    {
        "id": "1301b6fbc4bf55ad",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 220,
        "wires": []
    },
    {
        "id": "08f8137fd2a41a4d",
        "type": "file",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "immo24-proj.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1380,
        "y": 260,
        "wires": [
            [
                "29a3309d34314c7e"
            ]
        ]
    },
    {
        "id": "29a3309d34314c7e",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Unterordner anlegen",
        "func": "const d = msg.data;\nmsg.payload = (d.unterordner || []).map(o => `${d.zielPfad}/${o.name}`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 260,
        "wires": [
            [
                "e76960526db64fc2"
            ]
        ]
    },
    {
        "id": "e76960526db64fc2",
        "type": "split",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 950,
        "y": 320,
        "wires": [
            [
                "3d6f9168757f7650"
            ]
        ]
    },
    {
        "id": "3d6f9168757f7650",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Unterordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "6081efcfefcbc92f"
            ]
        ]
    },
    {
        "id": "6081efcfefcbc92f",
        "type": "join",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 320,
        "wires": [
            [
                "312cfa25ef98de9e"
            ]
        ]
    },
    {
        "id": "312cfa25ef98de9e",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Session-Files auflisten",
        "path": "paths.templateDest",
        "pathType": "msg",
        "filter": "*.ptx",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 1460,
        "y": 320,
        "wires": [
            [
                "7ee3c33896935646"
            ]
        ]
    },
    {
        "id": "7ee3c33896935646",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Nummerierung",
        "func": "function normalize(s) { return (s || '').normalize('NFC') }\nconst files = (msg.payload || []).map(normalize);\nconst d = msg.data;\nconst values = {\n    datum: normalize(d.datum),\n    projektname: normalize(d.projektname),\n    moid: normalize(d.moid),\n    benutzer: normalize(global.get('activeUserKuerzel') || ''),\n    kunde: normalize(d.kunde),\n    produktionsstufe: normalize(d.stufeLabel)\n};\nlet base = normalize(msg.sessionSchema || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}');\n\n// Regex für alles außer {{version}}\nlet rePattern = base\n    .replace(/\\./g, '\\\\.') // Punkte escapen\n    .replace(/{{version}}/g, \"v(\\\\d+)\")\n    .replace(/{{(\\w+)}}/g, (_, k) => {\n        if (k === 'version') return '';\n        const val = values[k];\n        return val ? val.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '.*';\n    });\n\nconst re = new RegExp('^' + rePattern + '\\\\.ptx$');\nlet maxV = 0;\nfiles.forEach(f => { const m = re.exec(f); if (m && m[1]) { const v = parseInt(m[1], 10); if (v > maxV) maxV = v; } });\nconst nextV = maxV + 1;\n\nvalues.version = `v${nextV}`;\nlet filename = base.replace(/{{(\\w+)}}/g, (_, k) => values[k] || '');\nfilename = filename.replace(/\\.[^.]+$/, '') + '.ptx';\n\nmsg.filename = filename;                // nur Name\nmsg.destFull = `${msg.templateDest}/${filename}`; // voller Zielpfad\nmsg.sourcePath = msg.templateSource;    // Quelle\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 320,
        "wires": [
            [
                "f5930766aa85876a"
            ]
        ]
    },
    {
        "id": "f5930766aa85876a",
        "type": "fs-ops-copy",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Template → neue PTX",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "paths.templateSource",
        "sourceFilenameType": "msg",
        "destPath": "paths.templateDest",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 1860,
        "y": 320,
        "wires": [
            [
                "bcbf5fb38d99c996"
            ]
        ]
    },
    {
        "id": "3890f6f8ca6ac208",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Finalisieren",
        "func": "msg.payload = {\n    ok: true,\n    zielPfad: msg.data.zielPfad,\n    templateDest: msg.paths.templateDest,\n    filename: msg.filename\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 320,
        "wires": [
            [
                "4890dfe41d974f67"
            ]
        ]
    },
    {
        "id": "4890dfe41d974f67",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2440,
        "y": 320,
        "wires": []
    },
    {
        "id": "73545854ec411151",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "url": "/api/projektanlage/projekte",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "5850040864838c78"
            ]
        ]
    },
    {
        "id": "5850040864838c78",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "root",
        "func": "// Nur echte HTTP-Requests verarbeiten\nif (!msg.req || !msg.res) {\n    // z.B. Messages vom Inject-Node -> ignorieren\n    return null;\n}\n\nconst kunde = (msg.req.query?.kunde || '').trim();\nif (!kunde) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"kunde required\" };\n    return [null, msg]; // → HTTP Response (Fehler)\n}\n\n// Pfad bauen\nconst base = global.get('PathProduktionen') || '';\nmsg.root = `${base}/${kunde}`;\nmsg.payload = msg.root;\n\n// Vorsorglich CORS/Cache-Header setzen (optional, hilft gegen Zwischen-Caches)\nmsg.headers = {\n    'Cache-Control': 'no-store',\n    'Content-Type': 'application/json; charset=utf-8'\n};\n\nreturn [msg, null]; // → weiter\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "1941045c90a03f2e"
            ],
            [
                "4b5fca601da3958f"
            ]
        ],
        "outputLabels": [
            "ok",
            "error"
        ]
    },
    {
        "id": "80b78c3e4e6b59d9",
        "type": "split",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 990,
        "y": 120,
        "wires": [
            [
                "81057573ebad6e60"
            ]
        ]
    },
    {
        "id": "81057573ebad6e60",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Pfad anreichern",
        "func": "msg.projektRoot = msg.root;\nmsg.payload = { name: msg.payload, path: `${msg.root}/${msg.payload}` };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 120,
        "wires": [
            [
                "78f6564684f6027e"
            ]
        ]
    },
    {
        "id": "af7c4fbadcc8f62d",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1750,
        "y": 100,
        "wires": [
            [
                "42889590e1925a96"
            ],
            [
                "3e7fc290994492cd"
            ]
        ]
    },
    {
        "id": "42889590e1925a96",
        "type": "file in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "immo24-proj.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1970,
        "y": 80,
        "wires": [
            [
                "005adac3f0dbf505"
            ]
        ]
    },
    {
        "id": "005adac3f0dbf505",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "parseRow",
        "func": "try {\n    const data = JSON.parse(msg.payload);\n    msg.payload = {\n        date: data.erstellt_am,\n        projektname: data.projektname,\n        moid: data.mo_id,\n        user: data.user\n    };\n    return msg;\n} catch (e) {\n    // Dummy durchreichen, msg-Objekt beibehalten (req/res/parts bleiben erhalten)\n    msg.payload = { skip: true };\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 80,
        "wires": [
            [
                "3a2458c69f992c7a"
            ]
        ]
    },
    {
        "id": "3a2458c69f992c7a",
        "type": "join",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2370,
        "y": 100,
        "wires": [
            [
                "fc39c9a148bef52e"
            ]
        ]
    },
    {
        "id": "fc39c9a148bef52e",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "filterValid",
        "func": "let arr = Array.isArray(msg.payload) ? msg.payload : [];\narr = arr.filter(x => x && !x.skip && x.date && x.projektname && x.moid && x.user);\nmsg.payload = arr;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 100,
        "wires": [
            [
                "4b5fca601da3958f"
            ]
        ]
    },
    {
        "id": "4b5fca601da3958f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2680,
        "y": 100,
        "wires": []
    },
    {
        "id": "cecafe4be4e250a0",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Array filtern",
        "func": "let arr = [];\ntry { arr = JSON.parse(msg.payload) } catch { arr = [] }\n\nglobal.set(\"kundenStammdaten\", arr);\nconst out = arr.map(k => ({\n    label: k.kunde,\n    value: k.kunde,\n    stufen: (k.ordner || [])\n        .filter(o => o.ist_Produktionsstufe)\n        .map(o => ({ label: o.label, value: o.name }))\n}));\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 760,
        "wires": [
            [
                "f82475d3c09d70a2"
            ]
        ]
    },
    {
        "id": "6d11f8df05045052",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "",
        "url": "/api/projektanlage/kunden",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 760,
        "wires": [
            [
                "16cb66e38510f820"
            ]
        ]
    },
    {
        "id": "16cb66e38510f820",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 760,
        "wires": [
            [
                "f5da02b2bd8d63a6"
            ]
        ]
    },
    {
        "id": "f5da02b2bd8d63a6",
        "type": "file in",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "kunden_stammdaten.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 760,
        "wires": [
            [
                "cecafe4be4e250a0"
            ]
        ]
    },
    {
        "id": "f82475d3c09d70a2",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 760,
        "wires": []
    },
    {
        "id": "1941045c90a03f2e",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Projekte lesen",
        "path": "payload",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 580,
        "y": 140,
        "wires": [
            [
                "2abf4b17d6827b67"
            ]
        ]
    },
    {
        "id": "e494e48fd35f1809",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "nach Ordnern filtern",
        "func": "if (msg.stats && msg.stats.isDirectory()) {\n    msg.filename = msg.payload.path + \"/immo24-proj.json\";\n    return [msg, null];              // Ordner → weiter\n}\n\n// Kein Ordner → Dummy, aber req/res/parts erhalten!\nconst dummy = { ...msg, payload: { skip: true } };\nreturn [null, dummy];              // direkt zum join\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 120,
        "wires": [
            [
                "af7c4fbadcc8f62d"
            ],
            [
                "3a2458c69f992c7a"
            ]
        ],
        "outputLabels": [
            "Ordner",
            "Skip"
        ]
    },
    {
        "id": "78f6564684f6027e",
        "type": "fs-ops-stats",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.path",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1340,
        "y": 120,
        "wires": [
            [
                "e494e48fd35f1809"
            ]
        ]
    },
    {
        "id": "2abf4b17d6827b67",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Leerer Ordner Check",
        "func": "// msg.payload ist das Array aus fs-ops-dir\nconst arr = Array.isArray(msg.payload) ? msg.payload : [];\nif (arr.length === 0) {\n    // gleiche msg behalten → req/res bleibt erhalten\n    msg.statusCode = 200;\n    msg.payload = [];\n    return [null, msg];     // Out2 → http response\n}\nreturn [msg, null];       // Out1 → split\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 140,
        "wires": [
            [
                "80b78c3e4e6b59d9"
            ],
            [
                "4b5fca601da3958f"
            ]
        ],
        "outputLabels": [
            "nein",
            "leer"
        ]
    },
    {
        "id": "3e7fc290994492cd",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "keine immo24-proj.json",
        "func": "// Datei existiert NICHT -> Dummy an Join, aber msg beibehalten!\nconst dummy = { ...msg, payload: { skip: true } };\nreturn dummy;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 120,
        "wires": [
            [
                "3a2458c69f992c7a"
            ]
        ]
    },
    {
        "id": "0a7761f43773cf50",
        "type": "change",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "filename setzen",
        "rules": [
            {
                "t": "move",
                "p": "payload.fullPath",
                "pt": "msg",
                "to": "filename",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 880,
        "wires": [
            [
                "1d2f2c031ccf07cb"
            ]
        ]
    },
    {
        "id": "25db702b7507e6dd",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1400,
        "y": 880,
        "wires": []
    },
    {
        "id": "fec6c59f3697b0bb",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "url": "/api/projektanlage/resolve-existing",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "13f3227b56812c1a"
            ]
        ]
    },
    {
        "id": "13f3227b56812c1a",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Pflichtfelder + Vorbereitung",
        "func": "// Body holen\nconst b = (msg.payload && typeof msg.payload === 'object') ? msg.payload : (msg.req && msg.req.body) || {};\nconst need = ['kunde', 'datum', 'projektname', 'moid', 'stufe', 'template'];\nconst fehlende = need.filter(k => !b[k]);\nif (fehlende.length) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'missing', fields: fehlende };\n  return [null, msg];\n}\n\n// --- Windows-Namen prüfen (wie bei \"Neue Projekte\") ---\nfunction windowsNameReport(input) {\n  const res = { valid: true, errors: [] };\n  const s = String(input ?? '').trim();\n\n  // Verbotene Zeichen + Steuerzeichen\n  const forbiddenRe = /[<>:\"/\\\\|?*\\u0000-\\u001F]/g;\n  const bad = s.match(forbiddenRe);\n  if (bad) {\n    res.valid = false;\n    const uniq = [...new Set(bad)];\n    res.errors.push({\n      code: 'forbidden_chars',\n      chars: uniq,\n      message: `Unzulässige Zeichen: ${uniq.join(' ')}`\n    });\n  }\n\n  // Kein Punkt oder Leerzeichen am Ende\n  if (/[. ]$/.test(s)) {\n    res.valid = false;\n    res.errors.push({\n      code: 'trailing_dot_or_space',\n      message: 'Darf nicht mit Punkt oder Leerzeichen enden'\n    });\n  }\n\n  // Reservierte Namen\n  if (/^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\..*)?$/i.test(s)) {\n    res.valid = false;\n    res.errors.push({\n      code: 'reserved_name',\n      message: 'Reservierter Windows-Name'\n    });\n  }\n  return res;\n}\n\n// Felder, die zu Pfaden werden, validieren\nconst fieldReports = {\n  projektname: windowsNameReport(b.projektname),\n  moid: windowsNameReport(b.moid),\n  kunde: windowsNameReport(String(b.kunde)),\n};\n\nconst validationErrors = Object.entries(fieldReports)\n  .filter(([, rep]) => !rep.valid)\n  .map(([field, rep]) => ({ field, errors: rep.errors }));\n\nif (validationErrors.length) {\n  msg.statusCode = 422;\n  msg.payload = { error: 'validation_failed', details: validationErrors };\n  return [null, msg];\n}\n\n// --- Globals ---\nconst PathProduktionen = global.get('PathProduktionen') || '';\nconst PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst activeUser = global.get('activeUser') || '';\nconst projektordnerSchema = global.get('projektordnerSchema') || '';\nconst sessionSchema = global.get('sessionSchema') || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}';\n\n// --- Einfaches Template-Handling (wie bei \"Neue Projekte\") ---\nconst baseTemplates = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\nconst t = String(b.template || '');\nconst isFile = /\\.ptxt$/i.test(t);\n\nlet templateSource = '';\nlet audioSource = null;\n\nif (isFile) {\n  // einzelne .ptxt-Datei\n  templateSource = `${baseTemplates}/${t}`;\n} else {\n  // Package: Ordner=t, .ptxt=\"<ordner>.ptxt\", Audio-Folder=\"<ordner>/Audio Files\"\n  const ptxtName = `${t}.ptxt`;\n  templateSource = `${baseTemplates}/${t}/${ptxtName}`;\n  audioSource = `${baseTemplates}/${t}/Audio Files`;\n}\n\n// --- Daten & Pfade bündeln ---\n// (zielPfad / templateDest / audioDest werden erst nach Schema-Suche gesetzt)\nmsg.data = { ...b };\nmsg.paths = {\n  root: `${PathProduktionen}/${b.kunde}`,\n  templateSource,\n  audioSource\n};\n\n// Für spätere Schritte\nmsg.sessionSchema = sessionSchema;\nmsg.schema = projektordnerSchema;\n\n// Response-Header (optional)\nmsg.headers = { 'Cache-Control': 'no-store', 'Content-Type': 'application/json; charset=utf-8' };\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 440,
        "wires": [
            [
                "c1e5c60f79c68184"
            ],
            [
                "fa9d2fac02be4c9f"
            ]
        ],
        "outputLabels": [
            "ok",
            "error"
        ]
    },
    {
        "id": "fa9d2fac02be4c9f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1280,
        "y": 440,
        "wires": []
    },
    {
        "id": "c1e5c60f79c68184",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Ordner unter Kunde lesen",
        "path": "paths.root",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 770,
        "y": 400,
        "wires": [
            [
                "905fc9e0315efe87"
            ]
        ]
    },
    {
        "id": "905fc9e0315efe87",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Projektordner per Schema finden",
        "func": "function n(s){ return String(s||'').normalize('NFC'); }\nconst entries = Array.isArray(msg.payload) ? msg.payload : [];\nconst { projektname, moid, kunde, datum, stufe } = msg.data;\nconst schema = n(msg.schema||'');\n\n// Regex aus Schema bauen\nconst values = { datum:n(datum), projektname:n(projektname), moid:n(moid), kunde:n(kunde) };\nlet pat = schema\n  .replace(/{{benutzer}}/g, '.+')\n  .replace(/{{(\\w+)}}/g, (_,k) => values[k] ? values[k].replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&') : '.*');\npat = '^' + pat.replace(/ /g,'\\\\s+') + '$';\nconst re = new RegExp(pat);\n\n// versteckte raus, normalisieren, matchen\nconst list = entries.filter(x => x && !String(x).startsWith('.')).map(n);\nconst gefunden = list.find(name => re.test(name));\nif (!gefunden){\n  msg.statusCode = 404;\n  msg.payload = { error: 'not_found' };\n  return [null, msg];\n}\n\nmsg.paths.zielPfad = `${msg.paths.root}/${gefunden}`;\nmsg.paths.templateDest = `${msg.paths.zielPfad}/${stufe}`;\nmsg.paths.audioDest = `${msg.paths.templateDest}/Audio Files`;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "1eea91f2906456bc"
            ],
            [
                "fa9d2fac02be4c9f"
            ]
        ],
        "outputLabels": [
            "match",
            "404"
        ]
    },
    {
        "id": "1eea91f2906456bc",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Unterordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "paths.templateDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "payload",
        "fullpathType": "msg",
        "x": 1320,
        "y": 400,
        "wires": [
            [
                "bf4d8a80d210b362"
            ]
        ]
    },
    {
        "id": "bf4d8a80d210b362",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "PTX im Stufenordner",
        "path": "paths.templateDest",
        "pathType": "msg",
        "filter": "*.ptx",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 1540,
        "y": 400,
        "wires": [
            [
                "37e19dd539506efd"
            ]
        ]
    },
    {
        "id": "37e19dd539506efd",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Nummerierung + Dateiname",
        "func": "function n(s) { return String(s || '').normalize('NFC'); }\n\nconst files = (msg.payload || []).map(n);\nconst d = msg.data || {};\n\n// heutiges Datum YYYY-MM-DD\nconst now = new Date();\nconst datumHeute = now.toISOString().slice(0, 10);\n\n// Platzhalter-Werte\nconst values = {\n  datum: datumHeute,\n  projektname: n(d.projektname),\n  moid: n(d.moid),\n  benutzer: n(global.get('activeUserKuerzel') || ''),\n  kunde: n(d.kunde),\n  produktionsstufe: n(d.stufeLabel)\n};\n\n// Template (falls none gesetzt): inkl. datum & version\nlet base = n(msg.sessionSchema || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{datum}} {{version}}');\n\n// Regex bauen: Version capturen; Datum & Benutzer ignorieren (beliebig)\nlet rePattern = base\n  .replace(/\\./g, '\\\\.')\n  .replace(/{{version}}/g, 'v(\\\\d+)')\n  .replace(/{{(\\w+)}}/g, (_, k) => {\n    if (k === 'version') return '';\n    if (k === 'datum' || k === 'benutzer') return '.*'; // <— beide egal bei Suche\n    const v = values[k];\n    return v ? v.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '.*';\n  });\n\nconst re = new RegExp('^' + rePattern + '\\\\.ptx$');\n\n// höchste vorhandene Version über ALLE Daten/Benutzer finden\nlet maxV = 0;\nfor (const f of files) {\n  const m = re.exec(f);\n  if (m && m[1]) {\n    const v = parseInt(m[1], 10);\n    if (!Number.isNaN(v) && v > maxV) maxV = v;\n  }\n}\n\n// nächste Version und finalen Dateinamen setzen\nconst nextV = maxV + 1;\nvalues.version = `v${nextV}`;\n\nlet filename = base.replace(/{{(\\w+)}}/g, (_, k) => values[k] || '');\nfilename = filename.replace(/\\.[^.]+$/, '') + '.ptx';\n\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 400,
        "wires": [
            [
                "14eb4bbb946eedea"
            ]
        ]
    },
    {
        "id": "14eb4bbb946eedea",
        "type": "fs-ops-copy",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Template → neue PTX",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "paths.templateSource",
        "sourceFilenameType": "msg",
        "destPath": "paths.templateDest",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 2020,
        "y": 400,
        "wires": [
            [
                "92760ac63c811f81"
            ]
        ]
    },
    {
        "id": "b0aef2d54e9d0ec3",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Finalisieren",
        "func": "msg.payload = {\n  ok: true,\n  zielPfad: msg.paths.zielPfad,\n  templateDest: msg.paths.templateDest,\n  filename: msg.filename\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 400,
        "wires": [
            [
                "3d95844779504430"
            ]
        ]
    },
    {
        "id": "3d95844779504430",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2600,
        "y": 400,
        "wires": []
    },
    {
        "id": "a00da8a35639dbd8",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Kunden Ordnerpfade aus Snapshot",
        "func": "// Erwartet: msg.body.customers (Array von Strings ODER Objekten mit name/title/kunde)\n// Liefert: msg.payload = [ \"/produktionen/<kunde1>\", \"/produktionen/<kunde2>\", ... ]\n\nconst base = (global.get('PathProduktionen') || '').replace(/[\\\\/]+$/, '');\nconst raw = Array.isArray(msg.body && msg.body.customers) ? msg.body.customers : [];\n\nfunction pickName(item) {\n    if (typeof item === 'string') return item;\n    if (item && typeof item === 'object') {\n        return item.name || item.title || item.kunde || item.customer || '';\n    }\n    return '';\n}\n\nfunction sanitize(name) {\n    let s = String(name || '').trim();\n    // Verbotene/ungünstige Zeichen neutralisieren\n    s = s.replace(/[\\\\/:*?\"<>|]/g, '_');\n    // Doppelte Punkte/Slashes vereinfachen\n    s = s.replace(/\\s+/g, ' ').replace(/^\\.+/, '').replace(/\\.+$/, '');\n    return s;\n}\n\nconst paths = [];\nfor (const it of raw) {\n    const name = sanitize(pickName(it));\n    if (!name) continue;\n    paths.push(base + '/' + name);\n}\n\n// Falls keine Kunden → trotzdem leeres Array setzen\nmsg.payload = paths;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1100,
        "wires": [
            [
                "3be16e807066c9f4"
            ]
        ]
    },
    {
        "id": "3be16e807066c9f4",
        "type": "split",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1370,
        "y": 1100,
        "wires": [
            [
                "0cdcc1e9ef5f3e29"
            ]
        ]
    },
    {
        "id": "0cdcc1e9ef5f3e29",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Ordner existiert?",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1530,
        "y": 1100,
        "wires": [
            [
                "b8cfaa564f921f12"
            ],
            [
                "bd31b537d98d1d41"
            ]
        ]
    },
    {
        "id": "b8cfaa564f921f12",
        "type": "join",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1910,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "bd31b537d98d1d41",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Kundenordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1740,
        "y": 1120,
        "wires": [
            [
                "b8cfaa564f921f12"
            ]
        ]
    },
    {
        "id": "e7c1ee6dc65845d6",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Template Pfad setzen",
        "func": "let PathMitarbeiter = global.get('PathMitarbeiter');\nlet activeUser = global.get('activeUser');\nmsg.dir = `${PathMitarbeiter}/${activeUser}/immo24/templates/`;\n\n// stabile Korrelations-ID in topic\nmsg.topic = msg.topic || ('templates:' + msg._msgid);\n// Mirror\nmsg.corr = msg.topic;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 580,
        "wires": [
            [
                "db2490f64f65d46a"
            ]
        ]
    },
    {
        "id": "db2490f64f65d46a",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Templates lesen",
        "path": "dir",
        "pathType": "msg",
        "filter": "",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 670,
        "y": 580,
        "wires": [
            [
                "74af9c8a17157812",
                "40544c83e4544ac3"
            ]
        ]
    },
    {
        "id": "74af9c8a17157812",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": ".ptxt filtern",
        "func": "// msg.payload ist ein Array von Dateinamen\nconst arr = Array.isArray(msg.payload) ? msg.payload : [];\n\n// Nur Einträge behalten, die auf \".ptxt\" enden (case-insensitive)\nconst filtered = arr.filter(name => /\\.ptxt$/i.test(name));\n\n// in Objekte mappen (label + value), damit UI direkt Optionen hat\nmsg.payload = filtered.map(n => ({\n    label: n.replace(/\\.ptxt$/i, ''), // Extension weg für Anzeige\n    value: n,\n    kind: 'file'\n}));\nmsg.files = msg.payload; // [{label,value,kind:'file'}, ...]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 540,
        "wires": [
            [
                "e8ec6f49a002acc9"
            ]
        ]
    },
    {
        "id": "40544c83e4544ac3",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Ordner leer?",
        "func": "const arr = Array.isArray(msg.payload) ? msg.payload : [];\nif (arr.length === 0) {\n    msg.payload = [];\n    return [null, msg];   // Out2 → direkt zum „Dummys verwerfen“\n}\nreturn [msg, null];     // Out1 → zum Split",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 620,
        "wires": [
            [
                "a9d910d2311ea732"
            ],
            [
                "a804729e2fe35486"
            ]
        ],
        "outputLabels": [
            "Weiter",
            "Abbruch"
        ]
    },
    {
        "id": "a9d910d2311ea732",
        "type": "split",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1040,
        "y": 600,
        "wires": [
            [
                "6c1ecb3ede12bd26"
            ]
        ]
    },
    {
        "id": "c9d8b67e08e0694a",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Ordner filtern",
        "func": "if (msg.stats && msg.stats.isDirectory() && !msg.folderName.startsWith('.')) {\n    return [msg, null];     // Out1 → „Audio Files?“\n}\nmsg.payload = null;        // Dummy zählt für den Join\nreturn [null, msg];        // Out2 → Join",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 600,
        "wires": [
            [
                "c2d65d2b5328f056"
            ],
            [
                "a804729e2fe35486"
            ]
        ],
        "outputLabels": [
            "Ordner",
            "kein Ordner"
        ]
    },
    {
        "id": "3be3c68955e61f67",
        "type": "fs-ops-stats",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "folderFull",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1330,
        "y": 600,
        "wires": [
            [
                "c9d8b67e08e0694a"
            ]
        ]
    },
    {
        "id": "c2d65d2b5328f056",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Check Audio Files",
        "path": "folderFull",
        "pathType": "msg",
        "filename": "Audio Files",
        "filenameType": "str",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1680,
        "y": 580,
        "wires": [
            [
                "61acbcf2c1762413"
            ],
            [
                "f03d105771fc0c67"
            ]
        ]
    },
    {
        "id": "6c1ecb3ede12bd26",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Pfade setzen",
        "func": "msg.folderName = String(msg.payload);\nmsg.folderFull = `${msg.dir}/${msg.folderName}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 600,
        "wires": [
            [
                "3be3c68955e61f67"
            ]
        ]
    },
    {
        "id": "61acbcf2c1762413",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Ordner Check",
        "path": "folderFull",
        "pathType": "msg",
        "filter": "*.ptxt",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 1890,
        "y": 540,
        "wires": [
            [
                "c6effc2fa16f157a"
            ]
        ]
    },
    {
        "id": "c6effc2fa16f157a",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": ".ptxt filtern",
        "func": "const files = Array.isArray(msg.payload) ? msg.payload : [];\nif (files.length > 0) {\n    msg.payload = { folder: msg.folderName, files };\n    return [msg, null];    // gültig\n} else {\n    msg.payload = null;    // ungültig\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 540,
        "wires": [
            [
                "a804729e2fe35486"
            ],
            [
                "a804729e2fe35486"
            ]
        ],
        "outputLabels": [
            ".ptxt vorhanden",
            "Abbruch"
        ]
    },
    {
        "id": "a804729e2fe35486",
        "type": "join",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2240,
        "y": 620,
        "wires": [
            [
                "60723f36d0588b1c"
            ]
        ]
    },
    {
        "id": "60723f36d0588b1c",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Dummys filtern",
        "func": "const arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst out = arr.filter(Boolean).map(x => {\n    if (typeof x === 'string') return { folder: x, files: [] };\n    return x; // {folder, files}\n});\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 620,
        "wires": [
            [
                "e8ec6f49a002acc9"
            ]
        ]
    },
    {
        "id": "e8ec6f49a002acc9",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Merge",
        "func": "// Merge Files + Packages (ohne Timeout) + saubere relPtxt-Ermittlung\nconst key = msg.corr || msg.topic || ('merge:' + msg._msgid);\nconst ctx = flow.get('mergeStore') || {};\nconst inArr = Array.isArray(msg.payload) ? msg.payload : [];\n\n// Eintrag holen/erzeugen\nconst entry = ctx[key] || { files: null, packages: null, packagesDone: false };\n\n// Klassifizieren\nconst looksLikeFiles = inArr.length > 0 && inArr.every(x => x && x.kind === 'file');\nconst looksLikePackages = inArr.length > 0 && inArr.every(x => x && typeof x.folder === 'string');\n\n// Files übernehmen (.ptxt auf Root-Ebene)\nif (looksLikeFiles) {\n    entry.files = inArr;\n}\n\n// Packages übernehmen und relPtxt NUR aus echten Dateien bestimmen\nif (looksLikePackages) {\n    entry.packages = inArr.map(p => {\n        const folder = String(p.folder || '');\n\n        // vorhandene .ptxt-Dateien im Paket (relativ, z.B. \"Intro.ptxt\")\n        const ptxtFiles = Array.isArray(p.files)\n            ? p.files.filter(f => /\\.ptxt$/i.test(String(f || '')))\n            : [];\n\n        // bevorzugt: Datei, deren Basename dem Ordner entspricht\n        const preferred = (() => {\n            if (ptxtFiles.length === 0) return null;\n            const folderLc = folder.toLowerCase();\n            const exact = ptxtFiles.find(f => String(f).replace(/\\.ptxt$/i, '').toLowerCase() === folderLc);\n            return exact || ptxtFiles[0];\n        })();\n\n        return {\n            label: `${folder} (mit Clips)`,\n            value: folder,          // Ordnername\n            kind: 'package',\n            relPtxt: preferred || null // nur echte Datei, sonst null\n        };\n    });\n\n    entry.packagesDone = true;\n}\n\n// „leeres Array“ als „Packages fertig, aber leer“ interpretieren\nif (!looksLikeFiles && !looksLikePackages && Array.isArray(msg.payload) && msg.payload.length === 0) {\n    entry.packages = [];\n    entry.packagesDone = true;\n}\n\n// Zustand sichern\nctx[key] = entry;\nflow.set('mergeStore', ctx);\n\n// Fertig, wenn Files da sind UND Packages fertig (leer oder gefüllt)\nif (entry.files && entry.packagesDone) {\n    const out = [...entry.files, ...(entry.packages || [])].filter(Boolean);\n\n    // sortieren (de, numerisch)\n    out.sort((a, b) =>\n        String(a.label || a.folder || '').localeCompare(\n            String(b.label || b.folder || ''), 'de', { sensitivity: 'base', numeric: true }\n        )\n    );\n\n    // aufräumen\n    delete ctx[key];\n    flow.set('mergeStore', ctx);\n\n    msg.payload = out;\n    return msg;\n}\n\n// sonst warten\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 560,
        "wires": [
            [
                "68d4f6662ecbfeb3",
                "25b1d00e5f7f1bcd"
            ]
        ]
    },
    {
        "id": "f03d105771fc0c67",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Dummy generieren",
        "func": "msg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 580,
        "wires": [
            [
                "a804729e2fe35486"
            ]
        ]
    },
    {
        "id": "bcbf5fb38d99c996",
        "type": "subflow:d0d17784f71f39d9",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "x": 2090,
        "y": 320,
        "wires": [
            [
                "3890f6f8ca6ac208"
            ]
        ]
    },
    {
        "id": "92760ac63c811f81",
        "type": "subflow:d0d17784f71f39d9",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "x": 2250,
        "y": 400,
        "wires": [
            [
                "b0aef2d54e9d0ec3"
            ]
        ]
    },
    {
        "id": "25b1d00e5f7f1bcd",
        "type": "debug",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "TEMPLATES",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 640,
        "wires": []
    },
    {
        "id": "acbdc911869fcb0b",
        "type": "http in",
        "z": "571c9add5c07840b",
        "g": "f6673a3f7d474371",
        "name": "",
        "url": "/api/protools/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "f332e7773e0b1d75"
            ]
        ]
    },
    {
        "id": "449fca97fdcc9e44",
        "type": "exec",
        "z": "571c9add5c07840b",
        "g": "f6673a3f7d474371",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check Pro Tools",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "d35141a1aff39a50"
            ],
            [],
            []
        ]
    },
    {
        "id": "d35141a1aff39a50",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "f6673a3f7d474371",
        "name": "JSON formatieren",
        "func": "const out = (msg.payload||'').toString().trim().toLowerCase();\nmsg.payload = { online: out === 'true' };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 80,
        "wires": [
            [
                "d6e97db390ed12fd"
            ]
        ]
    },
    {
        "id": "d6e97db390ed12fd",
        "type": "http response",
        "z": "571c9add5c07840b",
        "g": "f6673a3f7d474371",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1160,
        "y": 80,
        "wires": []
    },
    {
        "id": "32022cc80658355b",
        "type": "http in",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "",
        "url": "/api/protools/presets",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1020,
        "wires": [
            [
                "6fa66f45920c7270"
            ]
        ]
    },
    {
        "id": "f332e7773e0b1d75",
        "type": "OS",
        "z": "571c9add5c07840b",
        "g": "f6673a3f7d474371",
        "name": "",
        "x": 370,
        "y": 80,
        "wires": [
            [
                "01d7ac052395b113"
            ]
        ]
    },
    {
        "id": "01d7ac052395b113",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "f6673a3f7d474371",
        "name": "Befehle je nach OS",
        "func": "const platform = (msg?.payload?.platform) || process.platform;\n\nif (platform === 'win32') {\n    // Windows: prüft auf Prozess \"ProTools\"\n    msg.command = `powershell -NoProfile -Command \"Get-Process | Where-Object { $_.ProcessName -eq 'ProTools' } | Measure | ForEach-Object { $_.Count -gt 0 }\"`;\n} else if (platform === 'darwin') {\n    // macOS: prüft auf Prozess \"Pro Tools\"\n    msg.command = `osascript -e 'tell application \"System Events\" to (exists process \"Pro Tools\")'`;\n} else {\n    msg.command = `echo OS nicht unterstützt`;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "449fca97fdcc9e44"
            ]
        ]
    },
    {
        "id": "448887b282ce2524",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Auswahl",
        "func": "// ===== Robust body lesen (String oder Objekt) =====\nlet body = msg.payload;\nif (Buffer.isBuffer(body)) {\n    try { body = JSON.parse(body.toString('utf8')); } catch { body = {}; }\n} else if (typeof body === 'string') {\n    try { body = JSON.parse(body); } catch { body = {}; }\n} else if (typeof body !== 'object' || body === null) {\n    body = {};\n}\n\n// Erwartetes Format:\n// { action: \"store\" | \"recall\", categories: { cat1: [{key}], cat2: [{key,quick?}], cat3: [{key}] } }\nconst action = (body.action || '').toLowerCase();\nconst cats = body.categories || {};\nconst cat1 = Array.isArray(cats.cat1) ? cats.cat1 : [];\nconst cat2 = Array.isArray(cats.cat2) ? cats.cat2 : [];\nconst cat3 = Array.isArray(cats.cat3) ? cats.cat3 : [];\n\n// ===== Globale Pfade & User holen =====\nconst PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst PathPTUser = global.get('PathPTUser') || '';\nconst activeUser = global.get('activeUser') || '';\n\n// ===== 9 Ausgänge vorbereiten =====\nconst outs = Array(9).fill(null);\n\n// kleine Helper zum Bauen der Payloads\nconst base = { action, PathMitarbeiter, PathPTUser, activeUser };\n\n// Mapping-Helfer: setzt outs[index] wenn Key in der Liste vorhanden ist\nfunction handleCat(items, matchKey, outIndex, extra = {}) {\n    const found = items.find(it => (it?.key || '').toLowerCase() === matchKey);\n    if (!found) return;\n    // quick bei cat2 optional durchreichen\n    outs[outIndex] = {\n        ...msg,\n        payload: { ...base, quick: !!found.quick, ...extra }\n    };\n}\n\n// ===== cat1 =====\nhandleCat(cat1, 'templates', 0);\nhandleCat(cat1, 'trackpresets', 1);\nhandleCat(cat1, 'pluginsettings', 2);\n\n// ===== cat2 =====\n// Achtung: UI liefert \"clipFxPresets\" → normalisieren auf lowercase:\nhandleCat(cat2, 'fadepresets', 3);\nhandleCat(cat2, 'clipfxpresets', 4);\nhandleCat(cat2, 'memorylocation', 5);\nhandleCat(cat2, 'trackdatatorecall', 6);\n\n// ===== cat3 =====\nhandleCat(cat3, 'keyboardshortcuts', 7);\nhandleCat(cat3, 'pluginmaps', 8);\n\n// Falls gar nichts ausgewählt war, optional 400 melden\nmsg.job = msg.job || {};\nmsg.job.action = action;   // \"store\" | \"recall\"\n\nreturn outs;",
        "outputs": 9,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "026123ed6fbfbff9"
            ],
            [
                "5a142e72217b90d9"
            ],
            [
                "74dfc0289041bfab"
            ],
            [
                "d8eab152f365a0df"
            ],
            [
                "404d5678657dac10"
            ],
            [
                "fafc7a55859a7190"
            ],
            [
                "edce99a5cffcc7e5"
            ],
            [
                "dec159441b93f814"
            ],
            []
        ],
        "outputLabels": [
            "Templates",
            "Track Presets",
            "Plug-In Settings",
            "Fade Presets",
            "Clip Effects Presets",
            "Memory Location Presets",
            "Track Data to Recall Presets",
            "Keyboard Shortcuts",
            "Plug-In Maps"
        ]
    },
    {
        "id": "026123ed6fbfbff9",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "Template Funktion",
        "func": "// Template Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action } = msg.payload || {};\n    msg.category = \"templates\";\n\n    // startCat nur 1x nebenbei senden\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    if (action === \"recall\") {\n        msg.templateSrc = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\n        msg.templateDest = `${PathPTUser}/Session Templates/${activeUser}`;\n        return [msg, startCat];\n    } else if (action === \"store\") {\n        msg.templateSrc = `${PathPTUser}/Session Templates/${activeUser}`;\n        msg.templateDest = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\n        return [msg, startCat];\n    }\n\n    // ungültige Aktion\n    return [null, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"templates\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "5df36f9d8643344d"
            ],
            [
                "8a745d4f06ab7d74"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "3118fab255283b8b",
        "type": "fs-ops-dir",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Plugin Pfad durchsuchen",
        "path": "payload.PluginPath",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 950,
        "y": 640,
        "wires": [
            [
                "c18f456a0f791f42"
            ]
        ]
    },
    {
        "id": "c18f456a0f791f42",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Split Plugin-Ordner",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1170,
        "y": 640,
        "wires": [
            [
                "929b5b35d429bd73"
            ]
        ]
    },
    {
        "id": "929b5b35d429bd73",
        "type": "change",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Pfad zum user-Ordner bauen",
        "rules": [
            {
                "t": "set",
                "p": "payload.pluginName",
                "pt": "msg",
                "to": "files",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.userDir",
                "pt": "msg",
                "to": "payload.PluginPath & \"/\" & files & \"/\" & payload.activeUser",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.pluginDir",
                "pt": "msg",
                "to": "payload.PluginPath & \"/\" & files",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1400,
        "y": 640,
        "wires": [
            [
                "0aff157563034614"
            ]
        ]
    },
    {
        "id": "8a66e0bb62460b38",
        "type": "fs-ops-stats",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.userDir",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1740,
        "y": 620,
        "wires": [
            [
                "2b31b10a748b6d64"
            ]
        ]
    },
    {
        "id": "2b31b10a748b6d64",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Ist ein Verzeichnis?",
        "func": "// Prüfen ob Stat-Wert ein Verzeichnis ist\nif (msg.stats && typeof msg.stats.mode === \"number\") {\n    if ((msg.stats.mode & 57344) === 16384) {\n        // Ist ein Verzeichnis\n        return msg;\n    }\n}\n// Kein Verzeichnis: Nachricht verwerfen\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 600,
        "wires": [
            [
                "71a4fd4af2c51838"
            ]
        ]
    },
    {
        "id": "9078dc5bb0f1fcb5",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Plug-In Settings Funktion",
        "func": "let PathMitarbeiter = msg.payload.PathMitarbeiter;\nlet activeUser = msg.payload.activeUser;\nlet pluginName = msg.payload.pluginName;\nlet userDir = msg.payload.userDir;\n\n// Ohne passenden payload keine Aktion\nif (msg.payload.action === \"recall\") {\n    msg.pluginsettingSrc = `${PathMitarbeiter}/${activeUser}/immo24/pluginsettings/${pluginName}`;\n    msg.pluginsettingDest = `${userDir}`;\n    return msg;\n} else if (msg.payload.action === \"store\") {\n    msg.pluginsettingSrc = `${userDir}`;\n    msg.pluginsettingDest = `${PathMitarbeiter}/${activeUser}/immo24/pluginsettings/${pluginName}`;\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 640,
        "wires": [
            [
                "4a342a304d1bfc5e"
            ]
        ]
    },
    {
        "id": "404d5678657dac10",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Clip Effects Preset Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Clip Effects Presets`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets/Quick Presets`;\n\n    msg.category = \"clipfxpresets\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.clipeffectSrc = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets`;\n        msg.clipeffectDest = `${rootDir}/${activeUser}`;\n        msg.clipeffectQuickDest = rootDir;\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.tfx`,\n                    destname: `Quick Preset ${i}.tfx`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.clipeffectSrc = `${rootDir}/${activeUser}`;\n        msg.clipeffectDest = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets`;\n        msg.clipeffectQuickDest = archiveDir;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.tfx`,\n                    destname: `Quick Preset ${i}.tfx`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"clipfxpresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1160,
        "wires": [
            [
                "e6c214decef4eadd",
                "6f1bdfeeef1718e0"
            ],
            [
                "59542c4cb71f0d92"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "338d50cd66e07956",
        "type": "fs-ops-copy",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1830,
        "y": 1160,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "e6c214decef4eadd",
        "type": "fs-ops-dir",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Pfad durchsuchen",
        "path": "clipeffectSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "bfc6384b6602ee8c"
            ]
        ]
    },
    {
        "id": "c80234e5017b0a98",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.clipeffectSrc, msg.clipeffectDest\nif (!msg.files || !msg.clipeffectSrc || !msg.clipeffectDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.clipeffectSrc}/${msg.files}`;\nconst itemDest = `${msg.clipeffectDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt clipeffectSrc/Dest -> hier pro Item überschreiben:\nmsg.clipeffectSrc = itemSrc;\nmsg.clipeffectDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1100,
        "wires": [
            [
                "b8b13e0434601759"
            ]
        ]
    },
    {
        "id": "39d13a464431d31b",
        "type": "switch",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1340,
        "wires": [
            [
                "2c990ce67e5034a6"
            ]
        ]
    },
    {
        "id": "fafc7a55859a7190",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Memory Location Preset Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Memory Location Window`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets/Quick Presets`;\n\n    msg.category = \"memoryLocation\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.memorylocationSrc = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets`;\n        msg.memorylocationDest = `${rootDir}/${activeUser}`;\n        msg.memorylocationQuickDest = rootDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.memorylocationSrc = `${rootDir}/${activeUser}`;\n        msg.memorylocationDest = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets`;\n        msg.memorylocationQuickDest = archiveDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"memoryLocation\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1400,
        "wires": [
            [
                "0b70528cdccb53e7",
                "0dbec11db74424cd"
            ],
            [
                "a4ad4a34a821d771"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "81215275a16d8c68",
        "type": "fs-ops-copy",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1830,
        "y": 1400,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "970f9fc0808ec60f",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1150,
        "y": 1420,
        "wires": [
            [
                "d60bb26669de3657"
            ]
        ]
    },
    {
        "id": "0b70528cdccb53e7",
        "type": "fs-ops-dir",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Pfad durchsuchen",
        "path": "memorylocationSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 930,
        "y": 1360,
        "wires": [
            [
                "25bc3768c7ae50d3"
            ]
        ]
    },
    {
        "id": "73306ab970c38caf",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1320,
        "y": 1340,
        "wires": [
            [
                "39d13a464431d31b"
            ]
        ]
    },
    {
        "id": "2c990ce67e5034a6",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.memorylocationSrc, msg.memorylocationDest\nif (!msg.files || !msg.memorylocationSrc || !msg.memorylocationDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.memorylocationSrc}/${msg.files}`;\nconst itemDest = `${msg.memorylocationDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt memorylocationSrc/Dest -> hier pro Item überschreiben:\nmsg.memorylocationSrc = itemSrc;\nmsg.memorylocationDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1340,
        "wires": [
            [
                "c53ffd5c163eadcb"
            ]
        ]
    },
    {
        "id": "edce99a5cffcc7e5",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "TrackData Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Track Data to Recall`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/trackdatarecallpresets/Quick Presets`;\n\n    msg.category = \"trackdatarecall\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.trackdataSrc = `${PathMitarbeiter}/${activeUser}/immo24/trackdatapresets`;\n        msg.trackdataDest = `${rootDir}/${activeUser}`;\n        msg.trackdataQuickDest = rootDir;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.trackdataSrc = `${rootDir}/${activeUser}`;\n        msg.trackdataDest = `${PathMitarbeiter}/${activeUser}/immo24/trackdatapresets`;\n        msg.trackdataQuickDest = archiveDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"trackdatarecall\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1620,
        "wires": [
            [
                "b20e0716bb69c289",
                "0df45444bc06051c"
            ],
            [
                "963ca3740f921cf8"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "eecef021cf5ea5f9",
        "type": "fs-ops-copy",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1830,
        "y": 1640,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "67bd53b720f256d8",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1150,
        "y": 1660,
        "wires": [
            [
                "6d456d2a0be0d42d"
            ]
        ]
    },
    {
        "id": "b20e0716bb69c289",
        "type": "fs-ops-dir",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Pfad durchsuchen",
        "path": "trackdataSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 930,
        "y": 1580,
        "wires": [
            [
                "51858e71739fe5f0"
            ]
        ]
    },
    {
        "id": "b777a94f111ff071",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1320,
        "y": 1580,
        "wires": [
            [
                "9bdaf0d4392acc21"
            ]
        ]
    },
    {
        "id": "9bdaf0d4392acc21",
        "type": "switch",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1580,
        "wires": [
            [
                "b45c327d585b78b2"
            ]
        ]
    },
    {
        "id": "b45c327d585b78b2",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.trackdataSrc, msg.trackdataDest\nif (!msg.files || !msg.trackdataSrc || !msg.trackdataDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.trackdataSrc}/${msg.files}`;\nconst itemDest = `${msg.trackdataDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt trackdataSrc/Dest -> hier pro Item überschreiben:\nmsg.trackdataSrc = itemSrc;\nmsg.trackdataDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1580,
        "wires": [
            [
                "4e89fbef3af60f1c"
            ]
        ]
    },
    {
        "id": "dec159441b93f814",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Keyboard Shortcut Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Keyboard Shortcuts`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortcuts/Quick Presets`;\n\n    msg.category = \"keyboardshortcuts\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.kbshortcutSrc = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortscuts`;\n        msg.kbshortcutDest = `${rootDir}/${activeUser}`;\n        msg.kbshortcutQuickDest = rootDir;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.kbshortcutSrc = `${rootDir}/${activeUser}`;\n        msg.kbshortcutDest = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortcuts`;\n        msg.kbshortcutQuickDest = archiveDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"keyboardshortcuts\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1860,
        "wires": [
            [
                "126ecdd30c809417",
                "d48d6bfe020662f4"
            ],
            [
                "9ccfc5bdc5b504f8"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "126ecdd30c809417",
        "type": "fs-ops-dir",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Pfad durchsuchen",
        "path": "kbshortcutSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 930,
        "y": 1800,
        "wires": [
            [
                "1e1ceeb243c3e34b"
            ]
        ]
    },
    {
        "id": "4190da9a9792cbcc",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.kbshortcutSrc, msg.kbshortcutDest\nif (!msg.files || !msg.kbshortcutSrc || !msg.kbshortcutDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.kbshortcutSrc}/${msg.files}`;\nconst itemDest = `${msg.kbshortcutDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt kbshortcutSrc/Dest -> hier pro Item überschreiben:\nmsg.kbshortcutSrc = itemSrc;\nmsg.kbshortcutDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1800,
        "wires": [
            [
                "eecbec774963fbb5"
            ]
        ]
    },
    {
        "id": "d8eab152f365a0df",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Fade Presets Funktion",
        "func": "// Fade Presets Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action, quick } = msg.payload || {};\n    if (!PathMitarbeiter || !PathPTUser || !activeUser || !action) return [null, null];\n\n    msg.category = \"fadePresets\";\n\n    // --- startCat NUR 1x pro Job+Kategorie senden (Flow-Flag) ---\n    let startCat = null;\n    const startKey = `startcat:${msg.job?.id || 'none'}:${msg.category}`;\n    if (!flow.get(startKey) && msg.job && msg.job.id) {\n        flow.set(startKey, true);\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    const rootDir = `${PathPTUser}/Fade Presets`;\n    const archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/fadepresets`;\n    const folders = [\"Batch Fade\", \"Cross Fade\", \"Fade In\", \"Fade Out\"];\n\n    // Quelle/Ziel für Bulk\n    if (action === \"recall\") {\n        msg.fadeSrc = archiveDir;\n        msg.fadeDest = rootDir;\n    } else if (action === \"store\") {\n        msg.fadeSrc = rootDir;\n        msg.fadeDest = archiveDir;\n    } else {\n        return [null, startCat];\n    }\n\n    // Quick Presets vorbereiten (separat kopieren)\n    const doQuick = (quick === true || quick === \"true\");\n    msg.quickPresets = [];\n    if (doQuick) {\n        for (const folder of folders) {\n            for (let i = 1; i <= 5; i++) {\n                if (action === \"recall\") {\n                    msg.quickPresets.push({\n                        src: `${archiveDir}/${folder}/Quick Preset ${i}.fdpreset`,\n                        destname: `Quick Preset ${i}.fdpreset`,\n                        destpath: `${rootDir}/${folder}`\n                    });\n                } else {\n                    msg.quickPresets.push({\n                        src: `${rootDir}/${folder}/Quick Preset ${i}.fdpreset`,\n                        destname: `Quick Preset ${i}.fdpreset`,\n                        destpath: `${archiveDir}/${folder}`\n                    });\n                }\n            }\n        }\n    }\n\n    // Ordnerliste für Bulk übergeben\n    msg.folders = folders;\n\n    return [msg, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"fadePresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 900,
        "wires": [
            [
                "97c972e18dacc01e",
                "9151b0e0d234cf6b"
            ],
            [
                "1b55abfd770dda78"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "9151b0e0d234cf6b",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Split Ordner (4x)",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "folders",
        "x": 840,
        "y": 900,
        "wires": [
            [
                "c133d90e649a5ff2"
            ]
        ]
    },
    {
        "id": "c133d90e649a5ff2",
        "type": "change",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "scanSrc / destFolder bauen",
        "rules": [
            {
                "t": "set",
                "p": "scanFolder",
                "pt": "msg",
                "to": "folders",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "scanSrc",
                "pt": "msg",
                "to": "fadeSrc & \"/\" & folders",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "destFolder",
                "pt": "msg",
                "to": "fadeDest & \"/\" & folders",
                "tot": "jsonata"
            }
        ],
        "x": 1060,
        "y": 900,
        "wires": [
            [
                "16b240c5ebff9643"
            ]
        ]
    },
    {
        "id": "16b240c5ebff9643",
        "type": "fs-ops-dir",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "List .fdpreset im Ordner",
        "path": "scanSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 1310,
        "y": 900,
        "wires": [
            [
                "399704b1bba9111c"
            ]
        ]
    },
    {
        "id": "399704b1bba9111c",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Split Dateien",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1510,
        "y": 900,
        "wires": [
            [
                "4cd228b5b1ec067e"
            ]
        ]
    },
    {
        "id": "4cd228b5b1ec067e",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Quick Presets filtern",
        "func": "// erwartet: msg.files (Dateiname), msg.scanSrc, msg.destFolder\nconst name = msg.files;\nif (!name || !msg.scanSrc || !msg.destFolder) return null;\n\n// nur .fdpreset\nconst isFdpreset = /\\.fdpreset$/i.test(name);\n// Quick Presets ausschließen\nconst isQuick = /^Quick Preset\\s+[1-5]\\.fdpreset$/i.test(name);\n\nif (!isFdpreset || isQuick) return null;\n\nmsg.fileSrc   = `${msg.scanSrc}/${name}`;\nmsg.fileName  = name;\n// Zielordner existiert ggf. noch nicht – fs-ops-copy legt Datei im destFolder/destFilename ab\nmsg.destFolder = msg.destFolder;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 900,
        "wires": [
            [
                "5ee9d6d3e3c4f2bd"
            ]
        ]
    },
    {
        "id": "77cfbeec620abcd6",
        "type": "fs-ops-copy",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Copy .fdpreset (Bulk)",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "fileSrc",
        "sourceFilenameType": "msg",
        "destPath": "destFolder",
        "destPathType": "msg",
        "destFilename": "fileName",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 2160,
        "y": 900,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "97c972e18dacc01e",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Split Quick Presets",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 850,
        "y": 940,
        "wires": [
            [
                "efcec27fd6452b4e"
            ]
        ]
    },
    {
        "id": "b8a6163e7afb5acf",
        "type": "fs-ops-copy",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Quick Presets kopieren (5×4)",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1560,
        "y": 940,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "a2992087464cfb1c",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "templateDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 260,
        "wires": [
            [
                "be000d24df49fdf0"
            ]
        ]
    },
    {
        "id": "5df36f9d8643344d",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "templateDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 930,
        "y": 240,
        "wires": [
            [
                "be000d24df49fdf0"
            ],
            [
                "a2992087464cfb1c"
            ]
        ]
    },
    {
        "id": "0dbec11db74424cd",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "memorylocationQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 940,
        "y": 1440,
        "wires": [
            [
                "970f9fc0808ec60f"
            ],
            [
                "a278233615cac6e0"
            ]
        ]
    },
    {
        "id": "a278233615cac6e0",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "memorylocationQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1160,
        "y": 1460,
        "wires": [
            [
                "970f9fc0808ec60f"
            ]
        ]
    },
    {
        "id": "b0fb0ad905b35602",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "memorylocationDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1340,
        "y": 1380,
        "wires": [
            [
                "73306ab970c38caf"
            ]
        ]
    },
    {
        "id": "25bc3768c7ae50d3",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "memorylocationDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1130,
        "y": 1360,
        "wires": [
            [
                "73306ab970c38caf"
            ],
            [
                "b0fb0ad905b35602"
            ]
        ]
    },
    {
        "id": "6fa66f45920c7270",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Job ID",
        "func": "// 2 Outputs: [weiter zum Flow, Start-Report an Aggregator]\nconst id = Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\n\nmsg.job = {\n    id,\n    started: new Date().toISOString()\n};\n\n// HTTP response Handle zwischenspeichern\nflow.set(\"job:\" + id + \":res\", msg.res);\n\n// 1) Normal weiter\nconst next = RED.util.cloneMessage(msg);\n\n// 2) Start-Event (optional, registriert res auch im Aggregator)\nconst start = {\n    topic: \"report\",\n    payload: { type: \"start\" },\n    job: msg.job,\n    res: msg.res\n};\n\nreturn [next, start];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "448887b282ce2524"
            ],
            [
                "3f3caea81473eca0"
            ]
        ],
        "outputLabels": [
            "Auswahl",
            "Report"
        ]
    },
    {
        "id": "bf80e98ba0ab77be",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Aggregator",
        "func": "// Aggregiert ohne Counts, nur Flags je Kategorie\nconst key = \"job:\" + (msg.job?.id || \"none\");\nlet st = flow.get(key) || {\n  started: msg.job?.started || new Date().toISOString(),\n  expect: {},    // cat → true (gestartet)\n  done: {},      // cat → true (fertig)\n  hasError: {},  // cat → true (Fehler aufgetreten)\n  hasSkipped: {} // cat → true (irgendwas übersprungen)\n};\n\n// 'start' kann res registrieren\nif (msg.topic === \"report\" && msg.payload?.type === \"start\" && msg.res) {\n  flow.set(key + \":res\", msg.res);\n}\n\nif (msg.topic === \"report\" && msg.payload) {\n  const p = msg.payload;\n\n  if (p.type === \"startCat\") {\n    const cat = p.category || \"unknown\";\n    st.expect[cat] = true;\n  }\n\n  if (p.type === \"skipped\") {\n    const cat = p.category || \"unknown\";\n    st.hasSkipped[cat] = true;\n  }\n\n  if (p.type === \"error\") {\n    const cat = p.category || \"unknown\";\n    st.hasError[cat] = true;\n  }\n\n  if (p.type === \"doneCat\") {\n    const cat = p.category || \"unknown\";\n    st.done[cat] = true;\n  }\n}\n\n// sichern\nflow.set(key, st);\n\n// fertig, wenn alle erwarteten Kategorien done sind\nconst expectedCats = Object.keys(st.expect);\nconst finished = expectedCats.length > 0 && expectedCats.every(cat => st.done[cat]);\n\nconst progressMsg = { ...msg, aggregated: st };\nif (finished) {\n  const finalizeMsg = { ...msg, aggregated: st, _ready: true };\n  return [progressMsg, finalizeMsg];\n}\nreturn [progressMsg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 940,
        "wires": [
            [],
            [
                "256f0f49f6febd7a"
            ]
        ],
        "outputLabels": [
            "Progress",
            "Finalize"
        ]
    },
    {
        "id": "256f0f49f6febd7a",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Finalize → HTTP response",
        "func": "// Nur antworten, wenn _ready\nif (!msg._ready) return null;\n\nconst key = \"job:\" + (msg.job?.id || \"none\");\nconst st = msg.aggregated || flow.get(key) || { expect: {}, done: {}, hasError: {}, hasSkipped: {} };\n\n// Kategorien sortiert (optional)\nconst cats = Object.keys(st.expect);\n\n// details ohne Counts\nconst details = cats.map(cat => {\n  const error = !!st.hasError[cat];\n  const skipped = !!st.hasSkipped[cat];\n\n  const status = error ? \"error\" : (skipped ? \"partial\" : \"ok\");\n  const note = status === \"partial\" ? \"some items were not present\" : undefined;\n\n  return { category: cat, status, note };\n});\n\n// overall + HTTP-Status\nconst hasError = details.some(d => d.status === \"error\");\nconst hasPartial = details.some(d => d.status === \"partial\");\nconst overall = hasError ? \"error\" : \"ok\";\n\n// res holen\nconst res = flow.get(key + \":res\");\nif (!res) {\n  flow.set(key, null);\n  flow.set(key + \":res\", null);\n  return null;\n}\n\n// Aktion, die wir schon in \"Auswahl\" auf msg.job.action gesetzt haben\nconst action = msg.job?.action || \"unknown\";\n\nmsg.res = res;\n// -> 207 jetzt auch bei \"partial\", nicht nur error\nmsg.statusCode = (hasError || hasPartial) ? 207 : 200;\n\nmsg.payload = {\n  action,             // \"store\" | \"recall\"\n  overall,            // \"ok\" | \"error\"\n  details,            // [{ category, status, note? }]\n  jobId: msg.job?.id,\n  started: st.started,\n  finished: new Date().toISOString(),\n  // Text fürs UI (Frontend nutzt bevorzugt \"message\")\n  message: hasError\n    ? \"Vorgang abgeschlossen – Fehler aufgetreten\"\n    : (hasPartial\n      ? \"Vorgang abgeschlossen – mit Hinweisen\"\n      : (action === \"store\" ? \"Store erfolgreich\" : \"Recall erfolgreich\"))\n};\n\n// Cleanup\nflow.set(key, null);\nflow.set(key + \":res\", null);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3320,
        "y": 940,
        "wires": [
            [
                "13de4de9c70eec3b"
            ]
        ]
    },
    {
        "id": "13de4de9c70eec3b",
        "type": "http response",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 3540,
        "y": 940,
        "wires": []
    },
    {
        "id": "9d1aa8c292ad24aa",
        "type": "link in",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "REPORT IN",
        "links": [
            "3f3caea81473eca0",
            "a4ad4a34a821d771",
            "963ca3740f921cf8",
            "59542c4cb71f0d92",
            "9ccfc5bdc5b504f8",
            "8a745d4f06ab7d74",
            "5f59f44b2aac691e",
            "1b55abfd770dda78",
            "a77776b195ab0290",
            "13d031566b37fbf4"
        ],
        "x": 2955,
        "y": 980,
        "wires": [
            [
                "bf80e98ba0ab77be"
            ]
        ]
    },
    {
        "id": "3f3caea81473eca0",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 315,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c53ffd5c163eadcb",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1890,
        "y": 1340,
        "wires": [
            [
                "05d86ab1ea26b37b"
            ]
        ]
    },
    {
        "id": "a520c01c5814fdac",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "4e47faa505954ee5",
        "name": "Counter -- & DONE",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nlet n = flow.get(key) || 0;\nif (n > 0) n--; else n = 0;\nflow.set(key, n);\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: \"report\",\n    payload: { type: \"doneCat\", category: cat },\n    job: msg.job\n  });\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 2890,
        "y": 940,
        "wires": [
            [
                "bf80e98ba0ab77be"
            ]
        ]
    },
    {
        "id": "d60bb26669de3657",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1350,
        "y": 1420,
        "wires": [
            [
                "32f7122ac9fe151b"
            ],
            [
                "e83c364cfbd30d42"
            ]
        ]
    },
    {
        "id": "32f7122ac9fe151b",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1400,
        "wires": [
            [
                "81215275a16d8c68"
            ]
        ]
    },
    {
        "id": "e83c364cfbd30d42",
        "type": "function",
        "z": "571c9add5c07840b",
        "d": true,
        "g": "b1253b63671bc6bf",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1440,
        "wires": [
            [
                "bf80e98ba0ab77be"
            ]
        ]
    },
    {
        "id": "a4ad4a34a821d771",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 895,
        "y": 1480,
        "wires": []
    },
    {
        "id": "46ac2dd8fba3cbd0",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "CATCH memoryLocation",
        "scope": [
            "0b70528cdccb53e7",
            "05d86ab1ea26b37b",
            "81215275a16d8c68",
            "a278233615cac6e0",
            "b0fb0ad905b35602",
            "25bc3768c7ae50d3",
            "0dbec11db74424cd"
        ],
        "uncaught": false,
        "x": 630,
        "y": 1440,
        "wires": [
            [
                "facd8f20ee00818d"
            ]
        ]
    },
    {
        "id": "facd8f20ee00818d",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'memoryLocation';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1480,
        "wires": [
            [
                "a4ad4a34a821d771"
            ]
        ]
    },
    {
        "id": "a553c31ecabc9da0",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "CATCH trackdata",
        "scope": [
            "4b4b88c1be70ec42",
            "eecef021cf5ea5f9",
            "e406fa5e851023e7",
            "aa88ebcbb973c6d3",
            "51858e71739fe5f0",
            "b20e0716bb69c289",
            "0df45444bc06051c"
        ],
        "uncaught": false,
        "x": 600,
        "y": 1660,
        "wires": [
            [
                "3794b8b88a124018"
            ]
        ]
    },
    {
        "id": "3794b8b88a124018",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'trackdatarecall';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1700,
        "wires": [
            [
                "963ca3740f921cf8"
            ]
        ]
    },
    {
        "id": "51858e71739fe5f0",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackdataDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1130,
        "y": 1580,
        "wires": [
            [
                "b777a94f111ff071"
            ],
            [
                "e406fa5e851023e7"
            ]
        ]
    },
    {
        "id": "e406fa5e851023e7",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackdataDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1340,
        "y": 1620,
        "wires": [
            [
                "b777a94f111ff071"
            ]
        ]
    },
    {
        "id": "4e89fbef3af60f1c",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1890,
        "y": 1580,
        "wires": [
            [
                "4b4b88c1be70ec42"
            ]
        ]
    },
    {
        "id": "0df45444bc06051c",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackdataQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 940,
        "y": 1660,
        "wires": [
            [
                "67bd53b720f256d8"
            ],
            [
                "aa88ebcbb973c6d3"
            ]
        ]
    },
    {
        "id": "aa88ebcbb973c6d3",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackdataQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1160,
        "y": 1700,
        "wires": [
            [
                "67bd53b720f256d8"
            ]
        ]
    },
    {
        "id": "6d456d2a0be0d42d",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1350,
        "y": 1660,
        "wires": [
            [
                "7add7f28bc5bf8dd"
            ],
            [
                "e96c8725de1a8e8f"
            ]
        ]
    },
    {
        "id": "7add7f28bc5bf8dd",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1640,
        "wires": [
            [
                "eecef021cf5ea5f9"
            ]
        ]
    },
    {
        "id": "e96c8725de1a8e8f",
        "type": "function",
        "z": "571c9add5c07840b",
        "d": true,
        "g": "843cd62abaaec61f",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1680,
        "wires": [
            [
                "bf80e98ba0ab77be"
            ]
        ]
    },
    {
        "id": "963ca3740f921cf8",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 895,
        "y": 1700,
        "wires": []
    },
    {
        "id": "1066641335f87e3b",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "CATCH clipeffects",
        "scope": [
            "e6c214decef4eadd",
            "6f1bdfeeef1718e0",
            "bfc6384b6602ee8c",
            "d3407d76b6b96bd9",
            "9d5687462b806359",
            "338d50cd66e07956",
            "98b18cba1d87bf68"
        ],
        "uncaught": false,
        "x": 610,
        "y": 1200,
        "wires": [
            [
                "2a28990d8768c2bf"
            ]
        ]
    },
    {
        "id": "2a28990d8768c2bf",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'clipfxpresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1240,
        "wires": [
            [
                "59542c4cb71f0d92"
            ]
        ]
    },
    {
        "id": "bfc6384b6602ee8c",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "clipeffectDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1130,
        "y": 1120,
        "wires": [
            [
                "e3fc98cad4c5a589"
            ],
            [
                "9d5687462b806359"
            ]
        ]
    },
    {
        "id": "e3fc98cad4c5a589",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1320,
        "y": 1100,
        "wires": [
            [
                "3e07cec2c354b562"
            ]
        ]
    },
    {
        "id": "3e07cec2c354b562",
        "type": "switch",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1100,
        "wires": [
            [
                "c80234e5017b0a98"
            ]
        ]
    },
    {
        "id": "b8b13e0434601759",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1890,
        "y": 1100,
        "wires": [
            [
                "98b18cba1d87bf68"
            ]
        ]
    },
    {
        "id": "9d5687462b806359",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "clipeffectDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1340,
        "y": 1140,
        "wires": [
            [
                "e3fc98cad4c5a589"
            ]
        ]
    },
    {
        "id": "02b22dc642dc2fef",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1350,
        "y": 1180,
        "wires": [
            [
                "d19e7fada3c78c77"
            ],
            [
                "b838cce695308516"
            ]
        ]
    },
    {
        "id": "7723b0bc17fd7e13",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1150,
        "y": 1180,
        "wires": [
            [
                "02b22dc642dc2fef"
            ]
        ]
    },
    {
        "id": "d3407d76b6b96bd9",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "clipeffectQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1160,
        "y": 1220,
        "wires": [
            [
                "7723b0bc17fd7e13"
            ]
        ]
    },
    {
        "id": "6f1bdfeeef1718e0",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "clipeffectQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 940,
        "y": 1200,
        "wires": [
            [
                "7723b0bc17fd7e13"
            ],
            [
                "d3407d76b6b96bd9"
            ]
        ]
    },
    {
        "id": "59542c4cb71f0d92",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 895,
        "y": 1240,
        "wires": []
    },
    {
        "id": "d19e7fada3c78c77",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1160,
        "wires": [
            [
                "338d50cd66e07956"
            ]
        ]
    },
    {
        "id": "b838cce695308516",
        "type": "function",
        "z": "571c9add5c07840b",
        "d": true,
        "g": "8946011e70d4ed9e",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1200,
        "wires": [
            [
                "bf80e98ba0ab77be"
            ]
        ]
    },
    {
        "id": "57085a5e232a9565",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "CATCH kbshortcuts",
        "scope": [
            "08170b3dbaac1481",
            "3d51bf9aaaa43479",
            "d95b6caced6d8123",
            "49b6df07bce631a3",
            "1e1ceeb243c3e34b",
            "056065ca8f0d9a0c",
            "d48d6bfe020662f4",
            "126ecdd30c809417"
        ],
        "uncaught": false,
        "x": 610,
        "y": 1900,
        "wires": [
            [
                "563eea3d7ff40ed2"
            ]
        ]
    },
    {
        "id": "563eea3d7ff40ed2",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'keyboardshortcuts';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1940,
        "wires": [
            [
                "9ccfc5bdc5b504f8"
            ]
        ]
    },
    {
        "id": "9ccfc5bdc5b504f8",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 895,
        "y": 1940,
        "wires": []
    },
    {
        "id": "1e1ceeb243c3e34b",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "kbshortcutDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1130,
        "y": 1800,
        "wires": [
            [
                "b08666bf6d1a972b"
            ],
            [
                "d95b6caced6d8123"
            ]
        ]
    },
    {
        "id": "b08666bf6d1a972b",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1320,
        "y": 1800,
        "wires": [
            [
                "cb04caf391cac468"
            ]
        ]
    },
    {
        "id": "cb04caf391cac468",
        "type": "switch",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1800,
        "wires": [
            [
                "4190da9a9792cbcc"
            ]
        ]
    },
    {
        "id": "d95b6caced6d8123",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "kbshortcutDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1340,
        "y": 1840,
        "wires": [
            [
                "b08666bf6d1a972b"
            ]
        ]
    },
    {
        "id": "eecbec774963fbb5",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1890,
        "y": 1800,
        "wires": [
            [
                "08170b3dbaac1481"
            ]
        ]
    },
    {
        "id": "d48d6bfe020662f4",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "kbshortcutQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 940,
        "y": 1880,
        "wires": [
            [
                "f1e3f6051c6ae603"
            ],
            [
                "056065ca8f0d9a0c"
            ]
        ]
    },
    {
        "id": "f1e3f6051c6ae603",
        "type": "split",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1150,
        "y": 1880,
        "wires": [
            [
                "49b6df07bce631a3"
            ]
        ]
    },
    {
        "id": "056065ca8f0d9a0c",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "kbshortcutQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1160,
        "y": 1920,
        "wires": [
            [
                "f1e3f6051c6ae603"
            ]
        ]
    },
    {
        "id": "49b6df07bce631a3",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1350,
        "y": 1880,
        "wires": [
            [
                "13cf5781fe9bad4b"
            ],
            [
                "2ed8480660f224f9"
            ]
        ]
    },
    {
        "id": "13cf5781fe9bad4b",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1860,
        "wires": [
            [
                "3d51bf9aaaa43479"
            ]
        ]
    },
    {
        "id": "2ed8480660f224f9",
        "type": "function",
        "z": "571c9add5c07840b",
        "d": true,
        "g": "f2c7b2760eb46d43",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1590,
        "y": 1900,
        "wires": [
            [
                "bf80e98ba0ab77be"
            ]
        ]
    },
    {
        "id": "3d51bf9aaaa43479",
        "type": "fs-ops-copy",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1830,
        "y": 1860,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "8a745d4f06ab7d74",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 905,
        "y": 320,
        "wires": []
    },
    {
        "id": "be000d24df49fdf0",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 240,
        "wires": [
            [
                "03c50850773c2cb2"
            ]
        ]
    },
    {
        "id": "a35593c5dcda4bb3",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "CATCH template",
        "scope": [
            "03c50850773c2cb2",
            "a2992087464cfb1c",
            "5df36f9d8643344d"
        ],
        "uncaught": false,
        "x": 600,
        "y": 280,
        "wires": [
            [
                "9a3c9241d9bdb9dd"
            ]
        ]
    },
    {
        "id": "9a3c9241d9bdb9dd",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'templates';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 320,
        "wires": [
            [
                "8a745d4f06ab7d74"
            ]
        ]
    },
    {
        "id": "5a142e72217b90d9",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "Track Presets Funktion",
        "func": "// trackkpreset Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action } = msg.payload || {};\n    msg.category = \"trackpresets\";\n\n    // startCat nur 1x nebenbei senden\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    if (action === \"recall\") {\n        msg.trackpresetSrc = `${PathMitarbeiter}/${activeUser}/immo24/trackpresets`;\n        msg.trackpresetDest = `${PathPTUser}/Track Presets/${activeUser}`;\n        return [msg, startCat];\n    } else if (action === \"store\") {\n        msg.trackpresetSrc = `${PathPTUser}/Track Presets/${activeUser}`;\n        msg.trackpresetDest = `${PathMitarbeiter}/${activeUser}/immo24/trackpresets`;\n        return [msg, startCat];\n    }\n\n    // ungültige Aktion\n    return [null, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"trackpresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 420,
        "wires": [
            [
                "09bcc4b2263e608f"
            ],
            [
                "5f59f44b2aac691e"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "71a251e7b77b506b",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackpresetDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 440,
        "wires": [
            [
                "dd5b551627f9f46d"
            ]
        ]
    },
    {
        "id": "09bcc4b2263e608f",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackpresetDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 930,
        "y": 420,
        "wires": [
            [
                "dd5b551627f9f46d"
            ],
            [
                "71a251e7b77b506b"
            ]
        ]
    },
    {
        "id": "5f59f44b2aac691e",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 905,
        "y": 500,
        "wires": []
    },
    {
        "id": "dd5b551627f9f46d",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 420,
        "wires": [
            [
                "2614347baa37cc3e"
            ]
        ]
    },
    {
        "id": "201c4cbdc53b4b05",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "CATCH trackpresets",
        "scope": [
            "2614347baa37cc3e",
            "71a251e7b77b506b",
            "09bcc4b2263e608f"
        ],
        "uncaught": false,
        "x": 610,
        "y": 460,
        "wires": [
            [
                "c34217e5aaba2b25"
            ]
        ]
    },
    {
        "id": "c34217e5aaba2b25",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'trackpresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 500,
        "wires": [
            [
                "5f59f44b2aac691e"
            ]
        ]
    },
    {
        "id": "1b55abfd770dda78",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 905,
        "y": 980,
        "wires": []
    },
    {
        "id": "5ee9d6d3e3c4f2bd",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1930,
        "y": 900,
        "wires": [
            [
                "77cfbeec620abcd6",
                "9bf63010af8c1d3b"
            ]
        ]
    },
    {
        "id": "efcec27fd6452b4e",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1050,
        "y": 940,
        "wires": [
            [
                "e940af9352af930c"
            ],
            [
                "312b4db1c260c987"
            ]
        ]
    },
    {
        "id": "312b4db1c260c987",
        "type": "function",
        "z": "571c9add5c07840b",
        "d": true,
        "g": "c228aba48bf6fd27",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1290,
        "y": 980,
        "wires": [
            [
                "bf80e98ba0ab77be"
            ]
        ]
    },
    {
        "id": "e940af9352af930c",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 940,
        "wires": [
            [
                "897d2cccd85f4c90"
            ]
        ]
    },
    {
        "id": "9ee5da509d5220c9",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "CATCH fadepresets",
        "scope": [
            "16b240c5ebff9643",
            "77cfbeec620abcd6",
            "b8a6163e7afb5acf",
            "efcec27fd6452b4e",
            "897d2cccd85f4c90",
            "03d2b25b9bdaa836",
            "9bf63010af8c1d3b",
            "570bac17347d885f"
        ],
        "uncaught": false,
        "x": 610,
        "y": 940,
        "wires": [
            [
                "ccb723d0652e28eb"
            ]
        ]
    },
    {
        "id": "ccb723d0652e28eb",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'fadepresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 980,
        "wires": [
            [
                "1b55abfd770dda78"
            ]
        ]
    },
    {
        "id": "c3ed416bf7cc8c57",
        "type": "catch",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "CATCH pluginsettings",
        "scope": [
            "3118fab255283b8b",
            "8a66e0bb62460b38",
            "f6530849f84ba28d",
            "ea1bb40fdd31379f",
            "0aff157563034614",
            "a2619de64e762d39",
            "54941cd941124367",
            "af5ea42d65c2235d",
            "4a342a304d1bfc5e"
        ],
        "uncaught": false,
        "x": 620,
        "y": 680,
        "wires": [
            [
                "780f8b7b325e3923"
            ]
        ]
    },
    {
        "id": "780f8b7b325e3923",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'pluginsettings';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 720,
        "wires": [
            [
                "a77776b195ab0290"
            ]
        ]
    },
    {
        "id": "71a4fd4af2c51838",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1930,
        "y": 640,
        "wires": [
            [
                "9078dc5bb0f1fcb5"
            ]
        ]
    },
    {
        "id": "a77776b195ab0290",
        "type": "link out",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "9d1aa8c292ad24aa"
        ],
        "x": 905,
        "y": 720,
        "wires": []
    },
    {
        "id": "74dfc0289041bfab",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Start CAT",
        "func": "// Plug-In Settings Start (Outputs: 2)\n// Out1 = passthrough, Out2 = startCat / error\ntry {\n    // Grunddaten / Kategorie\n    const { PathPTUser } = msg.payload || {};\n    msg.category = \"pluginsettings\";\n\n    // (Optional) hier weiterhin den Basis-Pfad setzen:\n    msg.payload = msg.payload || {};\n    msg.payload.PluginPath = `${PathPTUser}/Plug-In Settings`;\n\n    // startCat nur 1× pro Job/Kategorie senden\n    let report = null;\n    const jobId = msg.job?.id || \"none\";\n    const key = `startcat:${jobId}:${msg.category}`;\n    if (!flow.get(key) && msg.job && msg.job.id) {\n        flow.set(key, true);\n        report = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // Out1: normal weiter in deinen Scan/Stats-Flow\n    // Out2: startCat (oder null, wenn schon gesendet)\n    return [msg, report];\n\n} catch (err) {\n    // Fehler direkt reporten (Out2)\n    return [null, {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"pluginsettings\", message: err.message },\n        job: msg.job\n    }];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 640,
        "wires": [
            [
                "3118fab255283b8b"
            ],
            [
                "a77776b195ab0290"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "f6530849f84ba28d",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "pluginsettingDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 2590,
        "y": 620,
        "wires": [
            [
                "a2619de64e762d39"
            ],
            [
                "ea1bb40fdd31379f"
            ]
        ]
    },
    {
        "id": "ea1bb40fdd31379f",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "pluginsettingDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2820,
        "y": 640,
        "wires": [
            [
                "a2619de64e762d39"
            ]
        ]
    },
    {
        "id": "0aff157563034614",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.userDir",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1630,
        "y": 680,
        "wires": [
            [
                "8a66e0bb62460b38"
            ],
            [
                "54941cd941124367"
            ]
        ]
    },
    {
        "id": "9bf63010af8c1d3b",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "destFolder",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 2070,
        "y": 960,
        "wires": [
            [
                "77cfbeec620abcd6"
            ],
            [
                "570bac17347d885f"
            ]
        ]
    },
    {
        "id": "570bac17347d885f",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "destFolder",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2280,
        "y": 980,
        "wires": [
            [
                "77cfbeec620abcd6"
            ]
        ]
    },
    {
        "id": "897d2cccd85f4c90",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.destpath",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1540,
        "y": 1000,
        "wires": [
            [
                "b8a6163e7afb5acf"
            ],
            [
                "03d2b25b9bdaa836"
            ]
        ]
    },
    {
        "id": "03d2b25b9bdaa836",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "c228aba48bf6fd27",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "quickPresets.destpath",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1820,
        "y": 980,
        "wires": [
            [
                "b8a6163e7afb5acf"
            ]
        ]
    },
    {
        "id": "03c50850773c2cb2",
        "type": "fs-extra-copy",
        "z": "571c9add5c07840b",
        "g": "6be4880a2368c056",
        "name": "Copy Templates",
        "source": "templateSrc",
        "sourceType": "msg",
        "target": "templateDest",
        "targetType": "msg",
        "x": 1560,
        "y": 240,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "a2619de64e762d39",
        "type": "fs-extra-copy",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Copy Plug-In Settings",
        "source": "pluginsettingSrc",
        "sourceType": "msg",
        "target": "pluginsettingDest",
        "targetType": "msg",
        "x": 2840,
        "y": 600,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "05d86ab1ea26b37b",
        "type": "fs-extra-copy",
        "z": "571c9add5c07840b",
        "g": "b1253b63671bc6bf",
        "name": "Copy Memory Location Presets",
        "source": "memorylocationSrc",
        "sourceType": "msg",
        "target": "memorylocationDest",
        "targetType": "msg",
        "x": 2130,
        "y": 1340,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "4b4b88c1be70ec42",
        "type": "fs-extra-copy",
        "z": "571c9add5c07840b",
        "g": "843cd62abaaec61f",
        "name": "Copy TrackData Presets",
        "source": "trackdataSrc",
        "sourceType": "msg",
        "target": "trackdataDest",
        "targetType": "msg",
        "x": 2110,
        "y": 1580,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "98b18cba1d87bf68",
        "type": "fs-extra-copy",
        "z": "571c9add5c07840b",
        "g": "8946011e70d4ed9e",
        "name": "Copy Clip Effects Presets",
        "source": "clipeffectSrc",
        "sourceType": "msg",
        "target": "clipeffectDest",
        "targetType": "msg",
        "x": 2110,
        "y": 1100,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "08170b3dbaac1481",
        "type": "fs-extra-copy",
        "z": "571c9add5c07840b",
        "g": "f2c7b2760eb46d43",
        "name": "Copy Keyboard Shortcuts",
        "source": "kbshortcutSrc",
        "sourceType": "msg",
        "target": "kbshortcutDest",
        "targetType": "msg",
        "x": 2110,
        "y": 1800,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "2614347baa37cc3e",
        "type": "fs-extra-copy",
        "z": "571c9add5c07840b",
        "g": "24b94f8f5582405c",
        "name": "Copy Track Presets",
        "source": "trackpresetSrc",
        "sourceType": "msg",
        "target": "trackpresetDest",
        "targetType": "msg",
        "x": 1570,
        "y": 420,
        "wires": [
            [
                "a520c01c5814fdac"
            ]
        ]
    },
    {
        "id": "54941cd941124367",
        "type": "fs-ops-stats",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.pluginDir",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1740,
        "y": 740,
        "wires": [
            [
                "37b447a9e5d21e4a"
            ]
        ]
    },
    {
        "id": "37b447a9e5d21e4a",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Ist ein Verzeichnis?",
        "func": "// Prüfen ob Stat-Wert ein Verzeichnis ist\nif (msg.stats && typeof msg.stats.mode === \"number\") {\n    if ((msg.stats.mode & 57344) === 16384) {\n        // Ist ein Verzeichnis\n        return msg;\n    }\n}\n// Kein Verzeichnis: Nachricht verwerfen\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 760,
        "wires": [
            [
                "af5ea42d65c2235d"
            ]
        ]
    },
    {
        "id": "af5ea42d65c2235d",
        "type": "fs-ops-mkdir",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload.userDir",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2140,
        "y": 760,
        "wires": [
            [
                "0aff157563034614"
            ]
        ]
    },
    {
        "id": "4a342a304d1bfc5e",
        "type": "fs-ops-access",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Quellpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "pluginsettingSrc",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 2370,
        "y": 640,
        "wires": [
            [
                "f6530849f84ba28d"
            ],
            [
                "14360d1caf13a4e4"
            ]
        ]
    },
    {
        "id": "14360d1caf13a4e4",
        "type": "function",
        "z": "571c9add5c07840b",
        "g": "fc811062d1cbf27f",
        "name": "Recall: Quelle fehlt → soft skip",
        "func": "// Wenn recall-Quelle fehlt, nicht als Fehler werten:\n// Reporte 'info' + decrement pending (falls gesetzt) + doneCat\nconst category = msg.category || 'pluginsettings';\n\n// 1) Info-Report\nnode.send({\n    topic: 'report',\n    payload: { type: 'info', category, message: 'Kein Plug-In-Setting zum Recall gefunden – übersprungen.' },\n    job: msg.job\n});\n\n// 2) pending-Counter sauber abräumen\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n    n = n - 1;\n    flow.set(key, n);\n}\n\n// 3) Kategorie abschließen, wenn nichts mehr pending\nif (n === 0 && msg.job && msg.job.id) {\n    node.send({\n        topic: 'report',\n        payload: { type: 'doneCat', category },\n        job: msg.job\n    });\n}\n\nreturn null; // Flow hier beenden, kein Copy",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2630,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "9dc3f8daa6165afa",
        "type": "http in",
        "z": "dc0428f114f14299",
        "g": "ff71a0cd16ac6b9a",
        "name": "",
        "url": "/api/soundminer/status",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "7aca2be01d9adf50"
            ]
        ]
    },
    {
        "id": "a59b36ea067e1e1d",
        "type": "exec",
        "z": "dc0428f114f14299",
        "g": "ff71a0cd16ac6b9a",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check SM",
        "x": 720,
        "y": 60,
        "wires": [
            [
                "d75c1435d5327109"
            ],
            [],
            []
        ]
    },
    {
        "id": "d75c1435d5327109",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "ff71a0cd16ac6b9a",
        "name": "JSON formatieren",
        "func": "const out = (msg.payload||'').toString().trim().toLowerCase();\nmsg.payload = { online: out === 'true' };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 60,
        "wires": [
            [
                "6f78ed16ec0b7d1d"
            ]
        ]
    },
    {
        "id": "6f78ed16ec0b7d1d",
        "type": "http response",
        "z": "dc0428f114f14299",
        "g": "ff71a0cd16ac6b9a",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1140,
        "y": 60,
        "wires": []
    },
    {
        "id": "7aca2be01d9adf50",
        "type": "OS",
        "z": "dc0428f114f14299",
        "g": "ff71a0cd16ac6b9a",
        "name": "",
        "x": 350,
        "y": 60,
        "wires": [
            [
                "4a043797261bc164"
            ]
        ]
    },
    {
        "id": "4a043797261bc164",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "ff71a0cd16ac6b9a",
        "name": "Befehle je nach OS",
        "func": "const platform = (msg?.payload?.platform) || process.platform;\n\nif (platform === 'win32') {\n    // Windows: prüft auf Prozess \"Soundminer v6\"\n    msg.command = `powershell -NoProfile -Command \"Get-Process | Where-Object { $_.ProcessName -eq 'Soundminer v6' } | Measure | ForEach-Object { $_.Count -gt 0 }\"`;\n} else if (platform === 'darwin') {\n    // macOS: prüft auf Prozess \"Soundminer\"\n    msg.command = `osascript -e 'tell application \"System Events\" to (exists process \"Soundminer\")'`;\n} else {\n    msg.command = `echo OS nicht unterstützt`;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 60,
        "wires": [
            [
                "a59b36ea067e1e1d"
            ]
        ]
    },
    {
        "id": "af1e02d1ab6b667f",
        "type": "http in",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "",
        "url": "/api/soundminer/presets",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "805c84f4a6107c66"
            ]
        ]
    },
    {
        "id": "5bbaacf6d81a1fd8",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "Auswahl",
        "func": "// ===== Body robust lesen (String/Buffer/Objekt) =====\nlet body = msg.payload;\nif (Buffer.isBuffer(body)) {\n    try { body = JSON.parse(body.toString('utf8')); } catch { body = {}; }\n} else if (typeof body === 'string') {\n    try { body = JSON.parse(body); } catch { body = {}; }\n} else if (typeof body !== 'object' || body === null) {\n    body = {};\n}\n\n// Erwartet:\n// { action: \"store\" | \"recall\", categories: { cat1: [{key}], cat2: [{key}], cat3: [{key}] } }\nconst action = String(body.action || '').toLowerCase();\nconst cats = body.categories || {};\nconst cat1 = Array.isArray(cats.cat1) ? cats.cat1 : [];\n// (cat2/cat3 aktuell ungenutzt, aber hier gelassen falls später erweitert)\nconst cat2 = Array.isArray(cats.cat2) ? cats.cat2 : [];\nconst cat3 = Array.isArray(cats.cat3) ? cats.cat3 : [];\n\n// ===== Globale Pfade & Modul-Infos =====\nconst PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst activeUser = global.get('activeUser') || '';\nconst modSoundminerVersion = global.get('modSoundminerVersion') || '';\nconst modSoundminerSupportPath = global.get('modSoundminerSupportPath') || '';\n\n// === WICHTIG: job.action VOR dem Klonen setzen ===\nmsg.job = msg.job || {};\nmsg.job.action = action; // \"store\" | \"recall\"\n\n// Basis-Payload, die an die Ziel-Flows geht\nconst base = {\n    action,\n    PathMitarbeiter,\n    activeUser,\n    modSoundminerSupportPath,\n    modSoundminerVersion\n};\n\n// === Helper zum Routen auf einen Ausgang, wenn ein Key gewählt wurde ===\nfunction routeIfSelected(items, matchKey, outIndex) {\n    const found = items.find(it => String(it?.key || '').toLowerCase() === matchKey);\n    if (!found) return null;\n\n    const m = RED.util.cloneMessage(msg); // enthält jetzt auch msg.job.action\n    m.payload = { ...base };\n    return { index: outIndex, msg: m };\n}\n\n// 2 Ausgänge vorbereiten\nconst outs = [null, null];\n\n// cat1: unterstützte Keys\nconst r1 = routeIfSelected(cat1, 'tablayouts', 0);\nif (r1) outs[r1.index] = r1.msg;\n\nconst r2 = routeIfSelected(cat1, 'spare', 1);\nif (r2) outs[r2.index] = r2.msg;\n\n// Wenn nichts ausgewählt ist, bleiben die Ausgänge null.\n// (Das ist ok – der Flow nachgelagert reagiert entsprechend.)\n\nreturn outs;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "2e86fe3ac42c241a"
            ],
            []
        ],
        "outputLabels": [
            "Tab Layouts",
            "spare"
        ]
    },
    {
        "id": "805c84f4a6107c66",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "Job ID",
        "func": "// 2 Outputs: [weiter zum Flow, Start-Report an Aggregator]\nconst id = Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\n\nmsg.job = {\n    id,\n    started: new Date().toISOString()\n};\n\n// HTTP response Handle zwischenspeichern\nflow.set(\"job:\" + id + \":res\", msg.res);\n\n// 1) Normal weiter\nconst next = RED.util.cloneMessage(msg);\n\n// 2) Start-Event (optional, registriert res auch im Aggregator)\nconst start = {\n    topic: \"report\",\n    payload: { type: \"start\" },\n    job: msg.job,\n    res: msg.res\n};\n\nreturn [next, start];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 320,
        "wires": [
            [
                "5bbaacf6d81a1fd8"
            ],
            [
                "13df15e725ddf3e0"
            ]
        ],
        "outputLabels": [
            "Auswahl",
            "Report"
        ]
    },
    {
        "id": "f21d5854511e80b1",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "Aggregator",
        "func": "// Aggregiert ohne Counts, speichert aber jetzt auch Fehltexte\nconst key = \"job:\" + (msg.job?.id || \"none\");\nlet st = flow.get(key) || {\n  started: msg.job?.started || new Date().toISOString(),\n  expect: {},    // cat → true (gestartet)\n  done: {},      // cat → true (fertig)\n  hasError: {},  // cat → true (Fehler aufgetreten)\n  hasSkipped: {},// cat → true (irgendwas übersprungen)\n  errors: {}     // NEU: cat → letzter Fehltext\n};\n\n// 'start' kann res registrieren\nif (msg.topic === \"report\" && msg.payload?.type === \"start\" && msg.res) {\n  flow.set(key + \":res\", msg.res);\n}\n\nif (msg.topic === \"report\" && msg.payload) {\n  const p = msg.payload;\n\n  if (p.type === \"startCat\") {\n    const cat = p.category || \"unknown\";\n    st.expect[cat] = true;\n  }\n\n  if (p.type === \"skipped\") {\n    const cat = p.category || \"unknown\";\n    st.hasSkipped[cat] = true;\n  }\n\n  if (p.type === \"error\") {\n    const cat = p.category || \"unknown\";\n    st.hasError[cat] = true;\n    if (typeof p.message === \"string\" && p.message) {\n      st.errors[cat] = p.message;   // <<<<<< FEHLTEXT SPEICHERN\n    }\n    // falls jemand 'error' sendet ohne startCat, trotzdem tracken:\n    if (!st.expect[cat]) st.expect[cat] = true;\n  }\n\n  if (p.type === \"doneCat\") {\n    const cat = p.category || \"unknown\";\n    st.done[cat] = true;\n    // falls vorher noch kein startCat kam (Preflight ist ok), sicherheitshalber:\n    if (!st.expect[cat]) st.expect[cat] = true;\n  }\n}\n\n// sichern\nflow.set(key, st);\n\n// fertig?\nconst expectedCats = Object.keys(st.expect);\nconst finished = expectedCats.length > 0 && expectedCats.every(cat => st.done[cat]);\n\nconst progressMsg = { ...msg, aggregated: st };\nif (finished) {\n  const finalizeMsg = { ...msg, aggregated: st, _ready: true };\n  return [progressMsg, finalizeMsg];\n}\nreturn [progressMsg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 300,
        "wires": [
            [],
            [
                "e1774f21848a73f9"
            ]
        ],
        "outputLabels": [
            "Progress",
            "Finalize"
        ]
    },
    {
        "id": "e1774f21848a73f9",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "Finalize → HTTP response",
        "func": "// Nur antworten, wenn _ready\nif (!msg._ready) return null;\n\nconst key = \"job:\" + (msg.job?.id || \"none\");\nconst st = msg.aggregated || flow.get(key) || { expect: {}, done: {}, hasError: {}, hasSkipped: {}, errors: {} };\n\nconst cats = Object.keys(st.expect);\n\n// Details inkl. Fehltext pro Kategorie\nconst details = cats.map(cat => {\n  const error = !!st.hasError[cat];\n  const skipped = !!st.hasSkipped[cat];\n  const status = error ? \"error\" : (skipped ? \"partial\" : \"ok\");\n  const message = (error && st.errors?.[cat]) ? st.errors[cat] : undefined; // <<<<<<\n  const note = status === \"partial\" ? \"some items were not present\" : undefined;\n  return { category: cat, status, message, note };\n});\n\nconst hasError = details.some(d => d.status === \"error\");\nconst hasPartial = details.some(d => d.status === \"partial\");\nconst overall = hasError ? \"error\" : \"ok\";\n\n// res holen\nconst res = flow.get(key + \":res\");\nif (!res) {\n  flow.set(key, null);\n  flow.set(key + \":res\", null);\n  return null;\n}\n\nconst action = msg.job?.action || \"unknown\";\n\n// User-facing message: nimm den ersten konkreten Fehltext, falls vorhanden\nlet userMessage;\nif (hasError) {\n  const firstErr = details.find(d => d.status === \"error\" && d.message)?.message;\n  userMessage = firstErr || \"Vorgang abgeschlossen – Fehler aufgetreten\";\n} else if (hasPartial) {\n  userMessage = \"Vorgang abgeschlossen – mit Hinweisen\";\n} else {\n  userMessage = (action === \"store\" ? \"Store erfolgreich\" : \"Recall erfolgreich\");\n}\n\nmsg.res = res;\n// Du kannst hier 207 lassen – oder bei Preflight-Blocker 409 senden.\n// 207 ist okay, wenn das Frontend strikt auf payload.message schaut.\nmsg.statusCode = (hasError || hasPartial) ? 207 : 200;\n\nmsg.payload = {\n  action,             // \"store\" | \"recall\"\n  overall,            // \"ok\" | \"error\"\n  details,            // [{ category, status, message?, note? }]\n  jobId: msg.job?.id,\n  started: st.started,\n  finished: new Date().toISOString(),\n  message: userMessage // <<<<<< konkrete Meldung kommt jetzt hier an\n};\n\n// Cleanup\nflow.set(key, null);\nflow.set(key + \":res\", null);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 320,
        "wires": [
            [
                "7bd0e3d340c2defe"
            ]
        ]
    },
    {
        "id": "7bd0e3d340c2defe",
        "type": "http response",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2600,
        "y": 320,
        "wires": []
    },
    {
        "id": "7ca377477ddf71a2",
        "type": "link in",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "REPORT IN",
        "links": [
            "13df15e725ddf3e0",
            "3cb4e46a592b768d",
            "4f9be02996cc22f6"
        ],
        "x": 2065,
        "y": 340,
        "wires": [
            [
                "f21d5854511e80b1"
            ]
        ]
    },
    {
        "id": "13df15e725ddf3e0",
        "type": "link out",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "7ca377477ddf71a2"
        ],
        "x": 275,
        "y": 380,
        "wires": []
    },
    {
        "id": "e5a6aaef78e0213f",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "Tab Layout Funktion",
        "func": "// Template Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\ntry {\n    const { PathMitarbeiter, activeUser, action, modSoundminerSupportPath, modSoundminerVersion } = msg.payload || {};\n    msg.category = \"tablayouts\";\n\n    // startCat nur 1x nebenbei senden\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    if (action === \"recall\") {\n        msg.tablayoutSrc = `${PathMitarbeiter}/${activeUser}/immo24/soundminer`;\n        msg.tablayoutDest = `${modSoundminerSupportPath}`;\n        return [msg, startCat];\n    } else if (action === \"store\") {\n        msg.tablayoutSrc = `${modSoundminerSupportPath}`;\n        msg.tablayoutDest = `${PathMitarbeiter}/${activeUser}/immo24/soundminer`;\n        return [msg, startCat];\n    }\n\n    // ungültige Aktion\n    return [null, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"tablayouts\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 360,
        "wires": [
            [
                "075e0152b1769bc3"
            ],
            [
                "3cb4e46a592b768d"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "3cb4e46a592b768d",
        "type": "link out",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "7ca377477ddf71a2"
        ],
        "x": 865,
        "y": 440,
        "wires": []
    },
    {
        "id": "85697c1f655fc5ad",
        "type": "catch",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "CATCH tablayout",
        "scope": [
            "075e0152b1769bc3",
            "378644b9e162c3f9",
            "f2b59359c1057179",
            "aa36a54f20e4c10a"
        ],
        "uncaught": false,
        "x": 560,
        "y": 400,
        "wires": [
            [
                "2d11e09698f93dd6"
            ]
        ]
    },
    {
        "id": "2d11e09698f93dd6",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'templates';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "3cb4e46a592b768d"
            ]
        ]
    },
    {
        "id": "075e0152b1769bc3",
        "type": "fs-ops-dir",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "Quellpfad durchsuchen",
        "path": "tablayoutSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "378644b9e162c3f9"
            ]
        ]
    },
    {
        "id": "378644b9e162c3f9",
        "type": "fs-ops-access",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "tablayoutDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 320,
        "wires": [
            [
                "4d90b76601b01db2"
            ],
            [
                "f2b59359c1057179"
            ]
        ]
    },
    {
        "id": "f2b59359c1057179",
        "type": "fs-ops-mkdir",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "tablayoutDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 340,
        "wires": [
            [
                "4d90b76601b01db2"
            ]
        ]
    },
    {
        "id": "4d90b76601b01db2",
        "type": "split",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "42a691e8f3dcac92"
            ]
        ]
    },
    {
        "id": "42a691e8f3dcac92",
        "type": "switch",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "Tab Layouts rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "tabstate",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1480,
        "y": 300,
        "wires": [
            [
                "aa36a54f20e4c10a"
            ]
        ]
    },
    {
        "id": "9c27162cd4fef719",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "d1026232071f8035",
        "name": "Counter -- & DONE",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nlet n = flow.get(key) || 0;\nif (n > 0) n--; else n = 0;\nflow.set(key, n);\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: \"report\",\n    payload: { type: \"doneCat\", category: cat },\n    job: msg.job\n  });\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1990,
        "y": 300,
        "wires": [
            [
                "f21d5854511e80b1"
            ]
        ]
    },
    {
        "id": "b462655b17044340",
        "type": "switch",
        "z": "dc0428f114f14299",
        "g": "ce6570fba079d51d",
        "name": "Version",
        "property": "payload.modSoundminerVersion",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "V6 Pro",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1240,
        "y": 200,
        "wires": [
            [
                "e5a6aaef78e0213f"
            ]
        ]
    },
    {
        "id": "aa36a54f20e4c10a",
        "type": "fs-ops-copy",
        "z": "dc0428f114f14299",
        "g": "abcfbec7d754cfc2",
        "name": "Tab Layouts kopieren",
        "sourcePath": "tablayoutSrc",
        "sourcePathType": "msg",
        "sourceFilename": "files",
        "sourceFilenameType": "msg",
        "destPath": "tablayoutDest",
        "destPathType": "msg",
        "destFilename": "files",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1720,
        "y": 300,
        "wires": [
            [
                "9c27162cd4fef719"
            ]
        ]
    },
    {
        "id": "2bdfc8a3cb2667fb",
        "type": "http request",
        "z": "dc0428f114f14299",
        "g": "ce6570fba079d51d",
        "name": "GET soundminer/status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:59593/api/soundminer/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 220,
        "wires": [
            [
                "19865295a3b0b455"
            ]
        ]
    },
    {
        "id": "19865295a3b0b455",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "ce6570fba079d51d",
        "name": "Soundminer läuft?",
        "func": "// Preflight: Soundminer-Status & Aktion prüfen\n// Inputs:\n// - msg.payload.online   (vom HTTP-Request)\n// - msg._smPrev          (vorheriger Payload aus \"Auswahl\")\n// - msg.job.id / msg.job.action\n\nconst prev = (msg._smPrev && typeof msg._smPrev === 'object') ? msg._smPrev : {};\nconst statusObj = (msg.payload && typeof msg.payload === 'object') ? msg.payload : {};\nconst online = !!statusObj.online;\nconst action = String(msg.job?.action || '').toLowerCase();\n\n// Hilfsfunktion: 3 Meldungen an Aggregator (startCat → error → doneCat)\nfunction buildAbortReport(reasonText) {\n    const job = msg.job || {};\n    const cat = 'preflight';\n    const mk = (type, extra = {}) => ({\n        topic: 'report',\n        payload: { type, category: cat, ...extra },\n        job\n    });\n    return [mk('startCat'), mk('error', { message: reasonText }), mk('doneCat')];\n}\n\n// 1) Soundminer läuft → über Aggregator abbrechen\nif (online) {\n    const reportMsgs = buildAbortReport('Soundminer läuft – bitte zuerst Soundminer schließen.');\n    // Aufräumen\n    delete msg._smPrev;\n    return [null, reportMsgs];\n}\n\n// 2) Aktion prüfen\nif (action !== 'store' && action !== 'recall') {\n    const reportMsgs = buildAbortReport('Ungültige Aktion. Erwartet: \"store\" oder \"recall\".');\n    delete msg._smPrev;\n    return [null, reportMsgs];\n}\n\n// 3) OK → vorherigen Payload mit Status mergen und weiter\nmsg.payload = { ...prev, online: false };\ndelete msg._smPrev;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "b462655b17044340"
            ],
            [
                "4f9be02996cc22f6"
            ]
        ],
        "outputLabels": [
            "offline",
            "online"
        ]
    },
    {
        "id": "2e86fe3ac42c241a",
        "type": "function",
        "z": "dc0428f114f14299",
        "g": "ce6570fba079d51d",
        "name": "msg.payload zwispeichern",
        "func": "// Alles, was die Auswahl gebaut hat, weglegen,\n// damit der HTTP-Request es nicht überschreibt.\nmsg._smPrev = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 220,
        "wires": [
            [
                "2bdfc8a3cb2667fb"
            ]
        ]
    },
    {
        "id": "4f9be02996cc22f6",
        "type": "link out",
        "z": "dc0428f114f14299",
        "g": "ce6570fba079d51d",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "7ca377477ddf71a2"
        ],
        "x": 1195,
        "y": 240,
        "wires": []
    },
    {
        "id": "715643787fbe702d",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-contrib-fs-ops": "1.6.0",
            "node-red-contrib-os": "0.2.1",
            "node-red-contrib-fs-extra": "1.0.1"
        }
    }
]