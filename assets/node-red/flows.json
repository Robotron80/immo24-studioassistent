[
    {
        "id": "b443cd6f4046fd9f",
        "type": "tab",
        "label": "[Modul] Produktionsbuch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e09b23f59c044bf8",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "name": "Formular",
        "style": {
            "label": true
        },
        "nodes": [
            "b04e57b948e77106",
            "899e35cf49d5ba54",
            "8ca467f1f76f9a4d",
            "86131ee14f613e3e",
            "68d4f6662ecbfeb3",
            "cecafe4be4e250a0",
            "6d11f8df05045052",
            "16cb66e38510f820",
            "f5da02b2bd8d63a6",
            "f82475d3c09d70a2"
        ],
        "x": 34,
        "y": 519,
        "w": 1212,
        "h": 142
    },
    {
        "id": "3f6058c22847f23d",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "name": "Produktionsbuch Konfiguration",
        "style": {
            "label": true
        },
        "nodes": [
            "36ed84ccc9d35759",
            "75c5fbafa4446ee5",
            "cd99fbc23bfa41b0",
            "3d38c4563478a24c",
            "b37885c9be6e0c33",
            "7bebdb3370022b2f",
            "25b39abb2c577e54",
            "20d6df6b06396c8d",
            "b49b21837662227a",
            "00aa34757e5184b5",
            "20a9d9b4af147904",
            "e7ccf4e57b055790",
            "2e2a317d13f0f6ff",
            "476e40734497434f",
            "24d85613a2d37961",
            "a4f9ae49b73f0cd9",
            "689c9849faf696d0",
            "a00da8a35639dbd8",
            "3be16e807066c9f4",
            "0cdcc1e9ef5f3e29",
            "b8cfaa564f921f12",
            "bd31b537d98d1d41"
        ],
        "x": 34,
        "y": 819,
        "w": 1952,
        "h": 282
    },
    {
        "id": "5096f3feef6a6d43",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "name": "Projektanlage",
        "style": {
            "label": true
        },
        "nodes": [
            "175a674c11285c85",
            "6c009de142b00a69",
            "465673bffca4e0d2",
            "33e7012a8455dcea",
            "a5cbafaa75b73c7c",
            "a077f771503b109f",
            "03462b00bd70668a",
            "1301b6fbc4bf55ad",
            "08f8137fd2a41a4d",
            "29a3309d34314c7e",
            "e76960526db64fc2",
            "3d6f9168757f7650",
            "6081efcfefcbc92f",
            "312cfa25ef98de9e",
            "7ee3c33896935646",
            "f5930766aa85876a",
            "3890f6f8ca6ac208",
            "4890dfe41d974f67",
            "73545854ec411151",
            "5850040864838c78",
            "80b78c3e4e6b59d9",
            "81057573ebad6e60",
            "af7c4fbadcc8f62d",
            "42889590e1925a96",
            "005adac3f0dbf505",
            "3a2458c69f992c7a",
            "fc39c9a148bef52e",
            "4b5fca601da3958f",
            "1941045c90a03f2e",
            "e494e48fd35f1809",
            "78f6564684f6027e",
            "2abf4b17d6827b67",
            "3e7fc290994492cd",
            "fec6c59f3697b0bb",
            "13f3227b56812c1a",
            "fa9d2fac02be4c9f",
            "c1e5c60f79c68184",
            "905fc9e0315efe87",
            "1eea91f2906456bc",
            "bf4d8a80d210b362",
            "37e19dd539506efd",
            "14eb4bbb946eedea",
            "b0aef2d54e9d0ec3",
            "3d95844779504430"
        ],
        "x": 34,
        "y": 39,
        "w": 2732,
        "h": 442
    },
    {
        "id": "6e172dd935fc089e",
        "type": "group",
        "z": "b443cd6f4046fd9f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a5b3212ee0a897af",
            "1d2f2c031ccf07cb",
            "530d5ce378abe4a4",
            "45b8aaec67b9454d",
            "8f60e803a9417da9",
            "0a7761f43773cf50",
            "25db702b7507e6dd"
        ],
        "x": 34,
        "y": 691.5,
        "w": 1452,
        "h": 97
    },
    {
        "id": "36ed84ccc9d35759",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "url": "/api/pb/snapshot",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 880,
        "wires": [
            [
                "75c5fbafa4446ee5"
            ]
        ]
    },
    {
        "id": "75c5fbafa4446ee5",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 880,
        "wires": [
            [
                "cd99fbc23bfa41b0"
            ]
        ]
    },
    {
        "id": "cd99fbc23bfa41b0",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 560,
        "y": 880,
        "wires": [
            [
                "3d38c4563478a24c"
            ],
            [
                "7bebdb3370022b2f"
            ]
        ]
    },
    {
        "id": "3d38c4563478a24c",
        "type": "file in",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "path.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "allProps": false,
        "x": 760,
        "y": 860,
        "wires": [
            [
                "b37885c9be6e0c33"
            ]
        ]
    },
    {
        "id": "b37885c9be6e0c33",
        "type": "json",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 860,
        "wires": [
            [
                "25b39abb2c577e54"
            ]
        ]
    },
    {
        "id": "7bebdb3370022b2f",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Fallback: []",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 750,
        "y": 900,
        "wires": [
            [
                "25b39abb2c577e54"
            ]
        ]
    },
    {
        "id": "25b39abb2c577e54",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Version anhängen (global)",
        "func": "let ver = global.get('pb_version');\nif (!ver) { ver = String(Date.now()); global.set('pb_version', ver); }\nmsg.payload = { customers: Array.isArray(msg.payload) ? msg.payload : [], version: ver };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 900,
        "wires": [
            [
                "20d6df6b06396c8d"
            ]
        ]
    },
    {
        "id": "20d6df6b06396c8d",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1340,
        "y": 900,
        "wires": []
    },
    {
        "id": "b49b21837662227a",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "url": "/api/pb/snapshot",
        "method": "put",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "00aa34757e5184b5"
            ]
        ]
    },
    {
        "id": "00aa34757e5184b5",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Body parsen + prüfen",
        "func": "function safeParse(x){\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\nconst body = safeParse(msg.payload);\nif (!body || !Array.isArray(body.customers) || typeof body.version !== 'string') {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\nmsg.body = { customers: body.customers, version: body.version };\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 400,
        "y": 1020,
        "wires": [
            [
                "e7ccf4e57b055790"
            ],
            [
                "20a9d9b4af147904"
            ]
        ]
    },
    {
        "id": "20a9d9b4af147904",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 630,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e7ccf4e57b055790",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "2e2a317d13f0f6ff"
            ]
        ]
    },
    {
        "id": "2e2a317d13f0f6ff",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Version vergleichen (global)",
        "func": "// Version vergleichen (global) — mit Sortierung der Kundenliste\n\nconst currentVersion = global.get('pb_version') || '0';\nconst clientVersion = String(msg.body?.version || '');\nif (clientVersion !== currentVersion) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion };\n  return [null, msg];\n}\n\nconst next = Array.isArray(msg.body?.customers) ? msg.body.customers : [];\n\n// Namens-Feld ermitteln (String oder Objekt)\nfunction pickName(it) {\n  if (typeof it === 'string') return it;\n  if (it && typeof it === 'object') {\n    return it.name || it.title || it.kunde || it.customer || '';\n  }\n  return '';\n}\n\n// Deutsch sortieren, Groß/Klein ignorieren, numerisch korrekt (v2 < v10)\nconst collator = new Intl.Collator('de', { sensitivity: 'base', numeric: true });\n\n// In-Place sortieren\nnext.sort((a, b) => {\n  const A = String(pickName(a)).normalize('NFC').trim();\n  const B = String(pickName(b)).normalize('NFC').trim();\n  return collator.compare(A, B);\n});\n\n// JSON schreiben + neue Version setzen\nmsg.payload = JSON.stringify(next, null, 2);\nmsg.nextVersion = String(Date.now());\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1000,
        "wires": [
            [
                "a00da8a35639dbd8",
                "24d85613a2d37961"
            ],
            [
                "476e40734497434f"
            ]
        ]
    },
    {
        "id": "476e40734497434f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 1090,
        "y": 1060,
        "wires": []
    },
    {
        "id": "24d85613a2d37961",
        "type": "file",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1170,
        "y": 1020,
        "wires": [
            [
                "a4f9ae49b73f0cd9"
            ]
        ]
    },
    {
        "id": "a4f9ae49b73f0cd9",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "200 + neue Version setzen",
        "func": "if (msg.nextVersion) { global.set('pb_version', msg.nextVersion); }\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('pb_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1460,
        "y": 1020,
        "wires": [
            [
                "689c9849faf696d0"
            ]
        ]
    },
    {
        "id": "689c9849faf696d0",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 1650,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b04e57b948e77106",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "",
        "url": "/api/projektanlage/templates",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 560,
        "wires": [
            [
                "899e35cf49d5ba54"
            ]
        ]
    },
    {
        "id": "899e35cf49d5ba54",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Template Pfad setzen",
        "func": "let PathMitarbeiter = global.get('PathMitarbeiter');\nlet activeUser = global.get('activeUser');\nmsg.dir = `${PathMitarbeiter}/${activeUser}/immo24/templates/`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 560,
        "wires": [
            [
                "8ca467f1f76f9a4d"
            ]
        ]
    },
    {
        "id": "8ca467f1f76f9a4d",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Templates lesen",
        "path": "dir",
        "pathType": "msg",
        "filter": "*.ptxt",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 680,
        "y": 560,
        "wires": [
            [
                "86131ee14f613e3e"
            ]
        ]
    },
    {
        "id": "86131ee14f613e3e",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Array filtern",
        "func": "msg.options = msg.payload.map(e => ({ label: e, value: e }));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 560,
        "wires": [
            [
                "68d4f6662ecbfeb3"
            ]
        ]
    },
    {
        "id": "68d4f6662ecbfeb3",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1040,
        "y": 560,
        "wires": []
    },
    {
        "id": "175a674c11285c85",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "url": "/api/projektanlage/projekte",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "6c009de142b00a69"
            ]
        ]
    },
    {
        "id": "a5b3212ee0a897af",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "",
        "url": "/api/projektanlage/launchpt",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 740,
        "wires": [
            [
                "0a7761f43773cf50"
            ]
        ]
    },
    {
        "id": "1d2f2c031ccf07cb",
        "type": "OS",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "",
        "x": 630,
        "y": 740,
        "wires": [
            [
                "8f60e803a9417da9"
            ]
        ]
    },
    {
        "id": "530d5ce378abe4a4",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "Befehle je nach OS",
        "func": "let fullPath = msg.filename;\nif (msg.payload.platform === \"win32\") {\n    fullPath = fullPath.replace(/\\//g, \"\\\\\");\n    msg.command = 'start \"\" \"' + fullPath + '\"';\n} else if (msg.payload.platform === \"darwin\") {\n    msg.command = 'open \"' + fullPath + '\"';\n} else {\n    msg.command = \"echo OS nicht unterstützt\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 740,
        "wires": [
            [
                "45b8aaec67b9454d"
            ]
        ]
    },
    {
        "id": "45b8aaec67b9454d",
        "type": "exec",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Pro Tools öffnen",
        "x": 1220,
        "y": 740,
        "wires": [
            [
                "25db702b7507e6dd"
            ],
            [],
            []
        ]
    },
    {
        "id": "8f60e803a9417da9",
        "type": "delay",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 740,
        "wires": [
            [
                "530d5ce378abe4a4"
            ]
        ]
    },
    {
        "id": "6c009de142b00a69",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Pflichtfelder + Vorbereitung",
        "func": "// Body sicher holen: bevorzugt msg.payload, Fallback req.body\nconst b = (msg.payload && typeof msg.payload === \"object\")\n    ? msg.payload\n    : (msg.req && msg.req.body) || {};\n\nconst fehlende = [];\n[\"kunde\", \"datum\", \"moid\", \"projektname\", \"stufe\", \"template\"].forEach(k => { if (!b[k]) fehlende.push(k); });\nif (fehlende.length) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"missing fields\", fields: fehlende };\n    return [null, msg];\n}\n\n// Globals\nconst PathProduktionen = global.get(\"PathProduktionen\") || \"\";\nconst PathMitarbeiter = global.get(\"PathMitarbeiter\") || \"\";\nconst activeUser = global.get(\"activeUser\") || \"\";\nconst projektordnerSchema = global.get(\"projektordnerSchema\") || \"\";\nconst kundenStammdaten = global.get(\"kundenStammdaten\") || [];\nmsg.sessionSchema = global.get(\"sessionSchema\") || \"{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}\";\n\n// Ordnername aus Schema\nconst values = {\n    datum: b.datum, projektname: b.projektname, moid: b.moid,\n    benutzer: (global.get(\"activeUserKuerzel\") || \"\"), kunde: b.kunde\n};\nconst projektOrdner = projektordnerSchema.replace(/{{(\\w+)}}/g, (_, k) => values[k] || \"\");\nconst zielPfad = `${PathProduktionen}/${b.kunde}/${projektOrdner}`;\n\n// Unterordner & Label\nconst kundeObj = (kundenStammdaten || []).find(k => k.kunde === b.kunde) || {};\nconst unterordner = Array.isArray(kundeObj.ordner) ? kundeObj.ordner : [];\nconst stufeObj = unterordner.find(o => o.name === b.stufe);\nconst stufeLabel = stufeObj ? stufeObj.label : b.stufe;\n\n// Template-Pfade\nmsg.templateSource = `${PathMitarbeiter}/${activeUser}/immo24/templates/${b.template}`;\nmsg.templateDest = `${zielPfad}/${b.stufe}`;\n\n// persist\nmsg.data = { ...b, stufeLabel, zielPfad, unterordner };\nmsg.filename = `${zielPfad}/immo24-proj.json`;\nmsg.payload = zielPfad; // für fs-ops-access\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "465673bffca4e0d2"
            ],
            [
                "a077f771503b109f"
            ]
        ],
        "outputLabels": [
            "access",
            "error"
        ]
    },
    {
        "id": "465673bffca4e0d2",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Duplikate prüfen",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 720,
        "y": 240,
        "wires": [
            [
                "33e7012a8455dcea"
            ],
            [
                "a5cbafaa75b73c7c"
            ]
        ]
    },
    {
        "id": "33e7012a8455dcea",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Dupl. error",
        "func": "msg.statusCode = 409;\nmsg.payload = { error: \"project exists\", zielPfad: msg.payload };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 220,
        "wires": [
            [
                "1301b6fbc4bf55ad"
            ]
        ]
    },
    {
        "id": "a5cbafaa75b73c7c",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Projektordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "data.zielPfad",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 940,
        "y": 260,
        "wires": [
            [
                "03462b00bd70668a"
            ]
        ]
    },
    {
        "id": "a077f771503b109f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 700,
        "y": 280,
        "wires": []
    },
    {
        "id": "03462b00bd70668a",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "JSON formatieren",
        "func": "const d = msg.data;\nmsg.filename = `${d.zielPfad}/immo24-proj.json`;\nmsg.payload = JSON.stringify({\n    erstellt_am: d.datum,\n    kunde: d.kunde,\n    projektname: d.projektname,\n    mo_id: d.moid,\n    user: global.get('activeUser')\n}, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 260,
        "wires": [
            [
                "08f8137fd2a41a4d"
            ]
        ]
    },
    {
        "id": "1301b6fbc4bf55ad",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 220,
        "wires": []
    },
    {
        "id": "08f8137fd2a41a4d",
        "type": "file",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "immo24-proj.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1380,
        "y": 260,
        "wires": [
            [
                "29a3309d34314c7e"
            ]
        ]
    },
    {
        "id": "29a3309d34314c7e",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Unterordner anlegen",
        "func": "const d = msg.data;\nmsg.payload = (d.unterordner || []).map(o => `${d.zielPfad}/${o.name}`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 260,
        "wires": [
            [
                "e76960526db64fc2"
            ]
        ]
    },
    {
        "id": "e76960526db64fc2",
        "type": "split",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 950,
        "y": 320,
        "wires": [
            [
                "3d6f9168757f7650"
            ]
        ]
    },
    {
        "id": "3d6f9168757f7650",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Unterordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "6081efcfefcbc92f"
            ]
        ]
    },
    {
        "id": "6081efcfefcbc92f",
        "type": "join",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1290,
        "y": 320,
        "wires": [
            [
                "312cfa25ef98de9e"
            ]
        ]
    },
    {
        "id": "312cfa25ef98de9e",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Session-Files auflisten",
        "path": "templateDest",
        "pathType": "msg",
        "filter": "*.ptx",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 1460,
        "y": 320,
        "wires": [
            [
                "7ee3c33896935646"
            ]
        ]
    },
    {
        "id": "7ee3c33896935646",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Nummerierung",
        "func": "function normalize(s) { return (s || '').normalize('NFC') }\nconst files = (msg.payload || []).map(normalize);\nconst d = msg.data;\nconst values = {\n    datum: normalize(d.datum),\n    projektname: normalize(d.projektname),\n    moid: normalize(d.moid),\n    benutzer: normalize(global.get('activeUserKuerzel') || ''),\n    kunde: normalize(d.kunde),\n    produktionsstufe: normalize(d.stufeLabel)\n};\nlet base = normalize(msg.sessionSchema || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}');\n\n// Regex für alles außer {{version}}\nlet rePattern = base\n    .replace(/\\./g, '\\\\.') // Punkte escapen\n    .replace(/{{version}}/g, \"v(\\\\d+)\")\n    .replace(/{{(\\w+)}}/g, (_, k) => {\n        if (k === 'version') return '';\n        const val = values[k];\n        return val ? val.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '.*';\n    });\n\nconst re = new RegExp('^' + rePattern + '\\\\.ptx$');\nlet maxV = 0;\nfiles.forEach(f => { const m = re.exec(f); if (m && m[1]) { const v = parseInt(m[1], 10); if (v > maxV) maxV = v; } });\nconst nextV = maxV + 1;\n\nvalues.version = `v${nextV}`;\nlet filename = base.replace(/{{(\\w+)}}/g, (_, k) => values[k] || '');\nfilename = filename.replace(/\\.[^.]+$/, '') + '.ptx';\n\nmsg.filename = filename;                // nur Name\nmsg.destFull = `${msg.templateDest}/${filename}`; // voller Zielpfad\nmsg.sourcePath = msg.templateSource;    // Quelle\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 320,
        "wires": [
            [
                "f5930766aa85876a"
            ]
        ]
    },
    {
        "id": "f5930766aa85876a",
        "type": "fs-ops-copy",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "sourcePath",
        "sourceFilenameType": "msg",
        "destPath": "templateDest",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 1820,
        "y": 320,
        "wires": [
            [
                "3890f6f8ca6ac208"
            ]
        ]
    },
    {
        "id": "3890f6f8ca6ac208",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Finalisieren",
        "func": "msg.payload = {\n    ok: true,\n    zielPfad: msg.data.zielPfad,\n    templateDest: msg.templateDest,\n    filename: msg.filename\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 320,
        "wires": [
            [
                "4890dfe41d974f67"
            ]
        ]
    },
    {
        "id": "4890dfe41d974f67",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2120,
        "y": 320,
        "wires": []
    },
    {
        "id": "73545854ec411151",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "url": "/api/projektanlage/projekte",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "5850040864838c78"
            ]
        ]
    },
    {
        "id": "5850040864838c78",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "root",
        "func": "// Nur echte HTTP-Requests verarbeiten\nif (!msg.req || !msg.res) {\n    // z.B. Messages vom Inject-Node -> ignorieren\n    return null;\n}\n\nconst kunde = (msg.req.query?.kunde || '').trim();\nif (!kunde) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"kunde required\" };\n    return [null, msg]; // → HTTP Response (Fehler)\n}\n\n// Pfad bauen\nconst base = global.get('PathProduktionen') || '';\nmsg.root = `${base}/${kunde}`;\nmsg.payload = msg.root;\n\n// Vorsorglich CORS/Cache-Header setzen (optional, hilft gegen Zwischen-Caches)\nmsg.headers = {\n    'Cache-Control': 'no-store',\n    'Content-Type': 'application/json; charset=utf-8'\n};\n\nreturn [msg, null]; // → weiter\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "1941045c90a03f2e"
            ],
            [
                "4b5fca601da3958f"
            ]
        ],
        "outputLabels": [
            "ok",
            "error"
        ]
    },
    {
        "id": "80b78c3e4e6b59d9",
        "type": "split",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 990,
        "y": 120,
        "wires": [
            [
                "81057573ebad6e60"
            ]
        ]
    },
    {
        "id": "81057573ebad6e60",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Pfad anreichern",
        "func": "msg.projektRoot = msg.root;\nmsg.payload = { name: msg.payload, path: `${msg.root}/${msg.payload}` };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 120,
        "wires": [
            [
                "78f6564684f6027e"
            ]
        ]
    },
    {
        "id": "af7c4fbadcc8f62d",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1750,
        "y": 100,
        "wires": [
            [
                "42889590e1925a96"
            ],
            [
                "3e7fc290994492cd"
            ]
        ]
    },
    {
        "id": "42889590e1925a96",
        "type": "file in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "immo24-proj.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1970,
        "y": 80,
        "wires": [
            [
                "005adac3f0dbf505"
            ]
        ]
    },
    {
        "id": "005adac3f0dbf505",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "parseRow",
        "func": "try {\n    const data = JSON.parse(msg.payload);\n    msg.payload = {\n        date: data.erstellt_am,\n        projektname: data.projektname,\n        moid: data.mo_id,\n        user: data.user\n    };\n    return msg;\n} catch (e) {\n    // Dummy durchreichen, msg-Objekt beibehalten (req/res/parts bleiben erhalten)\n    msg.payload = { skip: true };\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 80,
        "wires": [
            [
                "3a2458c69f992c7a"
            ]
        ]
    },
    {
        "id": "3a2458c69f992c7a",
        "type": "join",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2370,
        "y": 100,
        "wires": [
            [
                "fc39c9a148bef52e"
            ]
        ]
    },
    {
        "id": "fc39c9a148bef52e",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "filterValid",
        "func": "let arr = Array.isArray(msg.payload) ? msg.payload : [];\narr = arr.filter(x => x && !x.skip && x.date && x.projektname && x.moid && x.user);\nmsg.payload = arr;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 100,
        "wires": [
            [
                "4b5fca601da3958f"
            ]
        ]
    },
    {
        "id": "4b5fca601da3958f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2680,
        "y": 100,
        "wires": []
    },
    {
        "id": "cecafe4be4e250a0",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Array filtern",
        "func": "let arr = [];\ntry { arr = JSON.parse(msg.payload) } catch { arr = [] }\n\nglobal.set(\"kundenStammdaten\", arr);\nconst out = arr.map(k => ({\n    label: k.kunde,\n    value: k.kunde,\n    stufen: (k.ordner || [])\n        .filter(o => o.ist_Produktionsstufe)\n        .map(o => ({ label: o.label, value: o.name }))\n}));\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 620,
        "wires": [
            [
                "f82475d3c09d70a2"
            ]
        ]
    },
    {
        "id": "6d11f8df05045052",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "",
        "url": "/api/projektanlage/kunden",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "16cb66e38510f820"
            ]
        ]
    },
    {
        "id": "16cb66e38510f820",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "f5da02b2bd8d63a6"
            ]
        ]
    },
    {
        "id": "f5da02b2bd8d63a6",
        "type": "file in",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "kunden_stammdaten.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 750,
        "y": 620,
        "wires": [
            [
                "cecafe4be4e250a0"
            ]
        ]
    },
    {
        "id": "f82475d3c09d70a2",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "e09b23f59c044bf8",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1160,
        "y": 620,
        "wires": []
    },
    {
        "id": "1941045c90a03f2e",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Projekte lesen",
        "path": "payload",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 580,
        "y": 140,
        "wires": [
            [
                "2abf4b17d6827b67"
            ]
        ]
    },
    {
        "id": "e494e48fd35f1809",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "nach Ordnern filtern",
        "func": "if (msg.stats && msg.stats.isDirectory()) {\n    msg.filename = msg.payload.path + \"/immo24-proj.json\";\n    return [msg, null];              // Ordner → weiter\n}\n\n// Kein Ordner → Dummy, aber req/res/parts erhalten!\nconst dummy = { ...msg, payload: { skip: true } };\nreturn [null, dummy];              // direkt zum join\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 120,
        "wires": [
            [
                "af7c4fbadcc8f62d"
            ],
            [
                "3a2458c69f992c7a"
            ]
        ],
        "outputLabels": [
            "Ordner",
            "Skip"
        ]
    },
    {
        "id": "78f6564684f6027e",
        "type": "fs-ops-stats",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.path",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1340,
        "y": 120,
        "wires": [
            [
                "e494e48fd35f1809"
            ]
        ]
    },
    {
        "id": "2abf4b17d6827b67",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Leerer Ordner Check",
        "func": "// msg.payload ist das Array aus fs-ops-dir\nconst arr = Array.isArray(msg.payload) ? msg.payload : [];\nif (arr.length === 0) {\n    // gleiche msg behalten → req/res bleibt erhalten\n    msg.statusCode = 200;\n    msg.payload = [];\n    return [null, msg];     // Out2 → http response\n}\nreturn [msg, null];       // Out1 → split\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 140,
        "wires": [
            [
                "80b78c3e4e6b59d9"
            ],
            [
                "4b5fca601da3958f"
            ]
        ],
        "outputLabels": [
            "nein",
            "leer"
        ]
    },
    {
        "id": "3e7fc290994492cd",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "keine immo24-proj.json",
        "func": "// Datei existiert NICHT -> Dummy an Join, aber msg beibehalten!\nconst dummy = { ...msg, payload: { skip: true } };\nreturn dummy;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 120,
        "wires": [
            [
                "3a2458c69f992c7a"
            ]
        ]
    },
    {
        "id": "0a7761f43773cf50",
        "type": "change",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "filename setzen",
        "rules": [
            {
                "t": "move",
                "p": "payload.fullPath",
                "pt": "msg",
                "to": "filename",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 740,
        "wires": [
            [
                "1d2f2c031ccf07cb"
            ]
        ]
    },
    {
        "id": "25db702b7507e6dd",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "6e172dd935fc089e",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1400,
        "y": 740,
        "wires": []
    },
    {
        "id": "fec6c59f3697b0bb",
        "type": "http in",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "",
        "url": "/api/projektanlage/resolve-existing",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "13f3227b56812c1a"
            ]
        ]
    },
    {
        "id": "13f3227b56812c1a",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Validate + Prepare",
        "func": "// Body holen\nconst b = (msg.payload && typeof msg.payload === 'object') ? msg.payload : (msg.req && msg.req.body) || {};\nconst need = ['kunde','datum','projektname','moid','stufe','template'];\nconst fehlende = need.filter(k => !b[k]);\nif (fehlende.length) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'missing', fields: fehlende };\n  return [null, msg];\n}\n\n// Globals\nconst PathProduktionen = global.get('PathProduktionen') || '';\nconst PathMitarbeiter  = global.get('PathMitarbeiter')  || '';\nconst activeUser       = global.get('activeUser')       || '';\nconst projektordnerSchema = global.get('projektordnerSchema') || '';\nconst sessionSchema    = global.get('sessionSchema')    || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}';\nconst activeUserKuerzel= global.get('activeUserKuerzel')|| '';\n\n// Nutzwerte & Root\nmsg.data = { ...b };\nmsg.paths = {\n  root: `${PathProduktionen}/${b.kunde}`,\n  templateSource: `${PathMitarbeiter}/${activeUser}/immo24/templates/${b.template}`\n};\n\n// Für später\nmsg.sessionSchema = sessionSchema;\nmsg.schema = projektordnerSchema;\n\n// Response-Header (optional)\nmsg.headers = { 'Cache-Control': 'no-store', 'Content-Type': 'application/json; charset=utf-8' };\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "c1e5c60f79c68184"
            ],
            [
                "fa9d2fac02be4c9f"
            ]
        ],
        "outputLabels": [
            "ok",
            "error"
        ]
    },
    {
        "id": "fa9d2fac02be4c9f",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1280,
        "y": 440,
        "wires": []
    },
    {
        "id": "c1e5c60f79c68184",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Ordner unter Kunde lesen",
        "path": "paths.root",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 750,
        "y": 420,
        "wires": [
            [
                "905fc9e0315efe87"
            ]
        ]
    },
    {
        "id": "905fc9e0315efe87",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Projektordner per Schema finden",
        "func": "function n(s){ return String(s||'').normalize('NFC'); }\nconst entries = Array.isArray(msg.payload) ? msg.payload : [];\nconst { projektname, moid, kunde, datum, stufe } = msg.data;\nconst schema = n(msg.schema||'');\n\n// Regex aus Schema bauen\nconst values = { datum:n(datum), projektname:n(projektname), moid:n(moid), kunde:n(kunde) };\nlet pat = schema\n  .replace(/{{benutzer}}/g, '.+')\n  .replace(/{{(\\w+)}}/g, (_,k) => values[k] ? values[k].replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&') : '.*');\npat = '^' + pat.replace(/ /g,'\\\\s+') + '$';\nconst re = new RegExp(pat);\n\n// versteckte raus, normalisieren, matchen\nconst list = entries.filter(x => x && !String(x).startsWith('.')).map(n);\nconst gefunden = list.find(name => re.test(name));\nif (!gefunden){\n  msg.statusCode = 404;\n  msg.payload = { error: 'not_found' };\n  return [null, msg];\n}\n\nmsg.paths.zielPfad = `${msg.paths.root}/${gefunden}`;\nmsg.paths.templateDest = `${msg.paths.zielPfad}/${stufe}`;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "1eea91f2906456bc"
            ],
            [
                "fa9d2fac02be4c9f"
            ]
        ],
        "outputLabels": [
            "match",
            "404"
        ]
    },
    {
        "id": "1eea91f2906456bc",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Unterordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "paths.templateDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "payload",
        "fullpathType": "msg",
        "x": 1320,
        "y": 400,
        "wires": [
            [
                "bf4d8a80d210b362"
            ]
        ]
    },
    {
        "id": "bf4d8a80d210b362",
        "type": "fs-ops-dir",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "PTX im Stufenordner",
        "path": "paths.templateDest",
        "pathType": "msg",
        "filter": "*.ptx",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 1540,
        "y": 400,
        "wires": [
            [
                "37e19dd539506efd"
            ]
        ]
    },
    {
        "id": "37e19dd539506efd",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Nummerierung + Dateiname",
        "func": "function n(s) { return String(s || '').normalize('NFC'); }\n\nconst files = (msg.payload || []).map(n);\nconst d = msg.data || {};\n\n// heutiges Datum YYYY-MM-DD\nconst now = new Date();\nconst datumHeute = now.toISOString().slice(0, 10);\n\n// Platzhalter-Werte\nconst values = {\n  datum: datumHeute,\n  projektname: n(d.projektname),\n  moid: n(d.moid),\n  benutzer: n(global.get('activeUserKuerzel') || ''),\n  kunde: n(d.kunde),\n  produktionsstufe: n(d.stufeLabel)\n};\n\n// Template (falls none gesetzt): inkl. datum & version\nlet base = n(msg.sessionSchema || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{datum}} {{version}}');\n\n// Regex bauen: Version capturen; Datum & Benutzer ignorieren (beliebig)\nlet rePattern = base\n  .replace(/\\./g, '\\\\.')\n  .replace(/{{version}}/g, 'v(\\\\d+)')\n  .replace(/{{(\\w+)}}/g, (_, k) => {\n    if (k === 'version') return '';\n    if (k === 'datum' || k === 'benutzer') return '.*'; // <— beide egal bei Suche\n    const v = values[k];\n    return v ? v.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '.*';\n  });\n\nconst re = new RegExp('^' + rePattern + '\\\\.ptx$');\n\n// höchste vorhandene Version über ALLE Daten/Benutzer finden\nlet maxV = 0;\nfor (const f of files) {\n  const m = re.exec(f);\n  if (m && m[1]) {\n    const v = parseInt(m[1], 10);\n    if (!Number.isNaN(v) && v > maxV) maxV = v;\n  }\n}\n\n// nächste Version und finalen Dateinamen setzen\nconst nextV = maxV + 1;\nvalues.version = `v${nextV}`;\n\nlet filename = base.replace(/{{(\\w+)}}/g, (_, k) => values[k] || '');\nfilename = filename.replace(/\\.[^.]+$/, '') + '.ptx';\n\nmsg.filename = filename;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 400,
        "wires": [
            [
                "14eb4bbb946eedea"
            ]
        ]
    },
    {
        "id": "14eb4bbb946eedea",
        "type": "fs-ops-copy",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "Template → neue PTX",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "paths.templateSource",
        "sourceFilenameType": "msg",
        "destPath": "paths.templateDest",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 2020,
        "y": 400,
        "wires": [
            [
                "b0aef2d54e9d0ec3"
            ]
        ]
    },
    {
        "id": "b0aef2d54e9d0ec3",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "OK Response",
        "func": "msg.payload = {\n  ok: true,\n  zielPfad: msg.paths.zielPfad,\n  templateDest: msg.paths.templateDest,\n  filename: msg.filename\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 400,
        "wires": [
            [
                "3d95844779504430"
            ]
        ]
    },
    {
        "id": "3d95844779504430",
        "type": "http response",
        "z": "b443cd6f4046fd9f",
        "g": "5096f3feef6a6d43",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2380,
        "y": 400,
        "wires": []
    },
    {
        "id": "a00da8a35639dbd8",
        "type": "function",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Kunden Ordnerpfade aus Snapshot",
        "func": "// Erwartet: msg.body.customers (Array von Strings ODER Objekten mit name/title/kunde)\n// Liefert: msg.payload = [ \"/produktionen/<kunde1>\", \"/produktionen/<kunde2>\", ... ]\n\nconst base = (global.get('PathProduktionen') || '').replace(/[\\\\/]+$/, '');\nconst raw = Array.isArray(msg.body && msg.body.customers) ? msg.body.customers : [];\n\nfunction pickName(item) {\n    if (typeof item === 'string') return item;\n    if (item && typeof item === 'object') {\n        return item.name || item.title || item.kunde || item.customer || '';\n    }\n    return '';\n}\n\nfunction sanitize(name) {\n    let s = String(name || '').trim();\n    // Verbotene/ungünstige Zeichen neutralisieren\n    s = s.replace(/[\\\\/:*?\"<>|]/g, '_');\n    // Doppelte Punkte/Slashes vereinfachen\n    s = s.replace(/\\s+/g, ' ').replace(/^\\.+/, '').replace(/\\.+$/, '');\n    return s;\n}\n\nconst paths = [];\nfor (const it of raw) {\n    const name = sanitize(pickName(it));\n    if (!name) continue;\n    paths.push(base + '/' + name);\n}\n\n// Falls keine Kunden → trotzdem leeres Array setzen\nmsg.payload = paths;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 960,
        "wires": [
            [
                "3be16e807066c9f4"
            ]
        ]
    },
    {
        "id": "3be16e807066c9f4",
        "type": "split",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1370,
        "y": 960,
        "wires": [
            [
                "0cdcc1e9ef5f3e29"
            ]
        ]
    },
    {
        "id": "0cdcc1e9ef5f3e29",
        "type": "fs-ops-access",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Ordner existiert?",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1530,
        "y": 960,
        "wires": [
            [
                "b8cfaa564f921f12"
            ],
            [
                "bd31b537d98d1d41"
            ]
        ]
    },
    {
        "id": "b8cfaa564f921f12",
        "type": "join",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1910,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "bd31b537d98d1d41",
        "type": "fs-ops-mkdir",
        "z": "b443cd6f4046fd9f",
        "g": "3f6058c22847f23d",
        "name": "Kundenordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1740,
        "y": 980,
        "wires": [
            [
                "b8cfaa564f921f12"
            ]
        ]
    },
    {
        "id": "de41d4fce0664b45",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-contrib-fs-ops": "1.6.0",
            "node-red-contrib-os": "0.2.1"
        }
    }
]