[
    {
        "id": "dc0d981398a42d88",
        "type": "tab",
        "label": "Immo24 Global",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1c585f0d25b86fd",
        "type": "tab",
        "label": "[Modul] Produktionsbuch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "24039523dcf573b0",
        "type": "tab",
        "label": "[Modul] Pro Tools",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2ae494e9447c2087",
        "type": "group",
        "z": "dc0d981398a42d88",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e05512e54561bc65",
            "2eb8ddaff3cdbe23"
        ],
        "x": 68,
        "y": 33,
        "w": 1574,
        "h": 720
    },
    {
        "id": "c0de7eb24d59090d",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "name": "Formular",
        "style": {
            "label": true
        },
        "nodes": [
            "8cee036585de868d",
            "34ee69129c1b22ad",
            "661ca0a214d23709",
            "dfc751f1cfa33eb0",
            "ee7ff191a9a7f443",
            "0e9745b173232fff",
            "8575f3a928ec16d0",
            "81ef1eb5a3a09963",
            "e935076a3828598c",
            "2d158907a57c26be",
            "4818429074295ab3",
            "a3e6e753e7da154a",
            "c78b5a04db212d15",
            "0abec049230e8050",
            "7f5814610e2a962c",
            "77ce6b84f5164169",
            "01126a8ba1003c45",
            "2c4c6dd681a78d6f",
            "cbd4b2374e8ece8c",
            "ffb2513c207b93a3",
            "127abf21c624e0b9",
            "ebe504b9e94f9764",
            "718c3a97b38bac7e",
            "877d8704d63b6ee6",
            "c6dc78cceccb9c8a",
            "27d38792047a9532",
            "d8da94aa8852d67d",
            "9cc61715182b07a8",
            "4279662d8d88bdf0",
            "2c4f70f4a6289187",
            "61b1608e270cc12d",
            "abd1cf7e4f067631",
            "605e9a8d2d3c6c8c",
            "dd57165581257aeb",
            "a5a3951e8f2823f8",
            "fbb6ec95041698fe",
            "933f0fe5e7e09279",
            "e8736d157d609b90",
            "9f3e8a3cee4b82c9",
            "0c6c16a88bc1c68d",
            "f22b8ed470951aea",
            "7cc39adde9111007",
            "57201dbb7508a62a",
            "a67516d0726c79a5",
            "c0863219dbe21040",
            "64decafa7632304f",
            "cebcd4845d9d6748",
            "7a7d5e17a1be6a03",
            "c5f797797c362139",
            "e9250cebfa9ce5d5",
            "3f7d5d69b6d6b6aa",
            "7a3b6a3f2d3a4f4a",
            "d8b76a1c8a1b5a68",
            "f5a0f2d807b2d9b3",
            "9b0b4ee13f1c7a66",
            "aa4ab0a8b0f7a4c4",
            "7a6d1f0a2c1a6a24",
            "f2a7ef76d8ce9c11",
            "a0b08bb7a4c1e5b2",
            "c9d5a8b3e2a9a311",
            "633ee666d0372b4a",
            "4ccb8d901b44f6a9"
        ],
        "x": 94,
        "y": 299,
        "w": 2012,
        "h": 842
    },
    {
        "id": "b38df26cbb8bb4b3",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "name": "Produktionsbuch Konfiguration",
        "style": {
            "label": true
        },
        "nodes": [
            "41a1604a42cf8a96",
            "d2ddab99473b3656",
            "4a19a26eb247bcfb",
            "5d8cb4ae2aa3f2ec",
            "373f7b1408a8d8ef",
            "0972a4a5dd6d6322",
            "2377aa45b2403535",
            "95e85c4c1456807d",
            "2305fc706cda51ac",
            "c02215de6b80ad47",
            "58ddc703a5fc46b3",
            "d0f086bb05d1dbca",
            "c44b831c7f71f3f0",
            "229093bfc29724c5",
            "f445c6f1b8754602",
            "57d258a6ea6ffd92",
            "9c53f64fe3de877c",
            "efee96497b779fbf",
            "f819f6286d8877ac",
            "faef63861048a934",
            "4e153b8c3c397e84",
            "d408f2bf260c2d70",
            "8a0a359434b8320d",
            "6d70868f6fb23c66",
            "12e3163221d910ad",
            "24a8b953ca577f10",
            "db9878092f0ecaf5",
            "fd1db7356666748a",
            "6fe2baae39839f1a",
            "fb507dc5d4767c29",
            "72ecfc50ae08ef2f",
            "841470fce5aa44c3",
            "d024dbe76a3f0926",
            "48b16f710a226513",
            "c4605a91d07eacc9",
            "96085ec8b042313e",
            "9fe26839a1e98ab7",
            "c3c1ad3d3e10693a",
            "44446a7c726fc41a",
            "3390d3aa2f43e28f",
            "670347c94138255e",
            "a9a1e815467da76c",
            "e2263c106be8ee44",
            "52cbb131108a02f7",
            "fd497a93ac24b99e",
            "64b77345d2c02e51",
            "93bdad8186170fba",
            "c6bc4f90d144350d",
            "38f613d2151f78ac",
            "a22736cc2f7c03c0",
            "d64ff09155af078f",
            "0c7d50182f40a06c",
            "d4546258e4fd2c43",
            "948c245c80c18ed9",
            "69133e5578d8d519",
            "e4d5097ebd7590e3",
            "216f55f9767ff53a",
            "ee9edf6773dc9e80",
            "2fd8cd24ef3ca281",
            "87c9602477bca030",
            "7181e0b3b5441717",
            "4406e8602c76e676",
            "8bd88f7173449a9a",
            "572f7613c5171676",
            "0690323155aa8ef2",
            "b739f83a1f86db3c",
            "82033a023a5391bf",
            "96edd07e868a5ac6",
            "ec0b4bed560ac8d2",
            "739e9b38e927c880",
            "4e39262379dd4dd2",
            "95f1c5e24f5f224e",
            "5df24669e97283b6",
            "bcad8f79ef187fef",
            "5aece03cec227a21",
            "705afdec990a3871",
            "5c8690ba50b87591",
            "8055c903fea756b0",
            "e89d4e8f592e634e"
        ],
        "x": 94,
        "y": 1179,
        "w": 2092,
        "h": 802
    },
    {
        "id": "02b0fe64050de273",
        "type": "group",
        "z": "dc0d981398a42d88",
        "name": "Admin PW Konfig-Panel",
        "style": {
            "label": true
        },
        "nodes": [
            "f33bbf72b9b63711",
            "99a7ae697d4f679c",
            "5159326f0de47168",
            "86241f78f6249423",
            "b31d7e3c8e683585",
            "88c706e3490e5d0c",
            "adminpw_in",
            "adminpw_validate",
            "adminpw_write",
            "adminpw_ok",
            "adminpw_err",
            "adminpw_out",
            "62d75ac90e54201e"
        ],
        "x": 74,
        "y": 779,
        "w": 1352,
        "h": 322
    },
    {
        "id": "b72a4f67de28cc65",
        "type": "group",
        "z": "dc0d981398a42d88",
        "name": "Initialisierung",
        "style": {
            "label": true
        },
        "nodes": [
            "f4b0c144d2c6afc9",
            "67a76ef6609ed0cf",
            "625e6b2914f18b76",
            "ebe08a20f29e269e",
            "fa26e2f162763260",
            "0a6ef210fc91feea",
            "6aa73b130afa0192",
            "bb49eb64a95fd55b",
            "5b65ad269724dba9",
            "9e9531cb7b3cf674"
        ],
        "x": 54,
        "y": 2039,
        "w": 1392,
        "h": 242
    },
    {
        "id": "21da7a611532cde9",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Track Data",
        "style": {
            "label": true
        },
        "nodes": [
            "ad680f0fcc01ddb6",
            "2bbec99d791c83db",
            "f99608698a8bf030",
            "467ae7fcbc6b7735",
            "d298d4ce858c6423",
            "4de5265817a08368",
            "b58c7b938f4c91b8",
            "1df69ea1c23c0c77",
            "585a9df6e2d4fc8f",
            "5ce80ee7862fa202",
            "6abd7f2dbd599246",
            "0390d6ddd4e2c499",
            "91137af6b7515c1b",
            "83efdb60310b9f66",
            "32c6fc7eee758dc2",
            "41005d8cd172bc9d",
            "8cb029efa37424c0",
            "b45491f8febc2229",
            "716f54db6d32889b"
        ],
        "x": 474,
        "y": 1519,
        "w": 1752,
        "h": 202
    },
    {
        "id": "bf4eee564e09bce7",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Memory Location",
        "style": {
            "label": true
        },
        "nodes": [
            "ccccb265ef4fb1dc",
            "defb410130f27b91",
            "917f910377da205a",
            "c8ca1d82140028e8",
            "dd0e50f3c1df94a2",
            "8e5fd46df3643f82",
            "bfc668c714f6589b",
            "af2ab063726281c3",
            "9813dbafe6b048da",
            "4b6d8a94e30892b5",
            "9bb5182f2a01f7f2",
            "7c5744bd352c2266",
            "mem_counter_inc_bulk",
            "mem_quick_src_exists",
            "mem_counter_inc_quick",
            "mem_report_skipped",
            "3882283dafc8f7ae",
            "e2f3a4b5c6d7e8f1",
            "f1e2d3c4b5a69788"
        ],
        "x": 474,
        "y": 1279,
        "w": 1792,
        "h": 222
    },
    {
        "id": "70677eb1b82c5a42",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Clip Effects Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "926c052763c39e29",
            "501cb80a18e2101f",
            "eee3ed5815c3c52d",
            "5726ab925fa2402a",
            "4ffb2321785ac98b",
            "6f4c05fec7be2cb3",
            "7f28c8932dfe9550",
            "ecac37490d9bab96",
            "c9e0e810f99a762b",
            "1f67eb9de416c2b3",
            "5659f0cda1297389",
            "9b7306709391a052",
            "db8c2123cd78a2a1",
            "8ed53db524f61578",
            "1961473680376c87",
            "1a5269fddad889e9",
            "1a3576d54deb10e1",
            "47f58a92faa4b273",
            "4f8384d0182832a6"
        ],
        "x": 474,
        "y": 1039,
        "w": 1752,
        "h": 222
    },
    {
        "id": "7ca6f5ba8382e25f",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Keyboard Shortcuts",
        "style": {
            "label": true
        },
        "nodes": [
            "97634934f5c4429f",
            "9e68a0c8e7d4679a",
            "63f6495b795634b9",
            "f149ab4d6c3361d7",
            "ec8625296b55c237",
            "673b872c6bbacb4a",
            "d3eacd5953e17d84",
            "bda8dd2c31472a75",
            "5c7b329f612ecf44",
            "983f0f1fddf2f572",
            "e8576083d81a103e",
            "916a53a295dcad47",
            "54f5060cfecb013f",
            "0a7ff522ecc866b5",
            "0f74cb45dd82a5ba",
            "5b841c6ebce3b6fa",
            "26a33c971f7b20c7",
            "b938dced525b1034",
            "0cfb6f4a3d4d0171"
        ],
        "x": 474,
        "y": 1739,
        "w": 1752,
        "h": 222
    },
    {
        "id": "32425cc956c27352",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Templates",
        "style": {
            "label": true
        },
        "nodes": [
            "c3540eab39bc2683",
            "8d053651e71a88d0",
            "f1ddf879ad3e29dc",
            "dde28766e8809a51",
            "e60e5ab898a0a6de",
            "0177cdfae37f423d",
            "0455b0dd8e131085",
            "c27c1122548ae7b8"
        ],
        "x": 614,
        "y": 259,
        "w": 1172,
        "h": 162
    },
    {
        "id": "45092586c8772558",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Track Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "a266be18af804bb0",
            "2aaacffa74b4ebdc",
            "1b464dea68e4fbcb",
            "122a96507f2fb522",
            "b5c5c6741c0f3ad0",
            "f319bb1b3f5a5649",
            "7bf21c3b7172136f",
            "ddf7a61881eb3321"
        ],
        "x": 614,
        "y": 439,
        "w": 1192,
        "h": 162
    },
    {
        "id": "aba0adf3e81a1c0b",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Fade Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "2f9a0a1f4a3c0d01",
            "0c9f2f7f2db2d1f9",
            "d9b7b4ec5f1f3e7e",
            "a35b9f8b5f3c9a11",
            "f8f7f0fb2f6a5b33",
            "2f0a7a3d7b0c44a2",
            "3c1e6a6d7b1b2c44",
            "e0e4b5c2b9a1d7f5",
            "5a8d0f1b3e2c4d66",
            "0e22a946caa8156b",
            "22c35c48819fd2c5",
            "bd97d6f6ce673d8c",
            "7956ea8999198d23",
            "cb629a6342c84f4d",
            "6de7257c65f1e165",
            "0c2c43bf90d12f7b",
            "8b5cc652c67109bc",
            "f7a0dd6dcd042919",
            "49e52f42aa4489e3",
            "5d719dadc9ded89c"
        ],
        "x": 474,
        "y": 839,
        "w": 1892,
        "h": 182
    },
    {
        "id": "7152f8cea3400281",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Plug-In Settings",
        "style": {
            "label": true
        },
        "nodes": [
            "801fc15ef3777ecb",
            "f9ae2e0d8b851b95",
            "27d01ea6c29f13b3",
            "717547741be93b38",
            "88826b980a9a9e60",
            "d59e642b1764df76",
            "1c85a7b73c4d0534",
            "321d3cfaf3ad264f",
            "c122ef2968a5229e",
            "34ab116ea9fc7b9a",
            "97dbf2e19dec5ed0",
            "15ed22f12517848f",
            "46d02e8955535559",
            "5438f780f5fc4fff",
            "3a65d89c850f97fd"
        ],
        "x": 474,
        "y": 619,
        "w": 2172,
        "h": 202
    },
    {
        "id": "e05512e54561bc65",
        "type": "group",
        "z": "dc0d981398a42d88",
        "g": "2ae494e9447c2087",
        "name": "Konfiguration - Pfade",
        "style": {
            "label": true
        },
        "nodes": [
            "paths_get_in",
            "paths_get_setfile",
            "paths_get_access",
            "paths_get_filein",
            "paths_get_parse",
            "paths_get_empty",
            "paths_get_attach",
            "paths_get_out",
            "paths_put_in",
            "paths_put_check",
            "paths_put_400",
            "paths_put_setfile",
            "paths_put_compare",
            "paths_put_409",
            "paths_put_write",
            "paths_put_globals",
            "paths_put_200",
            "fdf0491bc433bff1",
            "390fc01b433f604d",
            "31559c4fdeac3181"
        ],
        "x": 94,
        "y": 59,
        "w": 1522,
        "h": 342
    },
    {
        "id": "2eb8ddaff3cdbe23",
        "type": "group",
        "z": "dc0d981398a42d88",
        "g": "2ae494e9447c2087",
        "name": "Konfiguration - Datei/Ordnerschema",
        "style": {
            "label": true
        },
        "nodes": [
            "f3f4b4a22f8d1111"
        ],
        "x": 268,
        "y": 393,
        "w": 1244,
        "h": 334
    },
    {
        "id": "f3f4b4a22f8d1111",
        "type": "group",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "API: Schema (GET/PUT)",
        "style": {
            "label": true
        },
        "nodes": [
            "c0a1ea6d1b9a1112",
            "0c2bb7a2a83a1113",
            "f5d8c9a8a2a1114",
            "9f7b5d6ac2d1115",
            "c3e4d5f6a7b1116",
            "2a9c0d1e2f311117",
            "8e7d6c5b4a311119",
            "a1b2c3d4e5f61120",
            "3f2e1d0c9b811121",
            "7bbbd4653db740f1",
            "77a939fd00b2c94a",
            "5fa35bb78c259faa",
            "2729b38d7e8e8fb5"
        ],
        "x": 294,
        "y": 419,
        "w": 1192,
        "h": 282
    },
    {
        "id": "826de81a1d3da833",
        "type": "ui-base",
        "name": "immo24 Studioassistent",
        "path": "/dashboard",
        "appIcon": "/icon.png",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "dashpage",
        "navigationStyle": "none",
        "titleBarStyle": "hidden",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "f4b0c144d2c6afc9",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Initialisieren",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 2080,
        "wires": [
            [
                "paths_get_setfile",
                "bff0fd592f6ebf74"
            ]
        ]
    },
    {
        "id": "67a76ef6609ed0cf",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "PathStammdaten abfragen",
        "func": "msg.payload = global.get('PathStammdaten');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 2160,
        "wires": [
            [
                "625e6b2914f18b76"
            ]
        ]
    },
    {
        "id": "625e6b2914f18b76",
        "type": "fs-ops-dir",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Ordner abfragen",
        "path": "payload",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 720,
        "y": 2160,
        "wires": [
            [
                "bb49eb64a95fd55b"
            ]
        ]
    },
    {
        "id": "ebe08a20f29e269e",
        "type": "catch",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Kein Ordner gefunden",
        "scope": [
            "625e6b2914f18b76"
        ],
        "uncaught": false,
        "x": 740,
        "y": 2200,
        "wires": [
            [
                "fa26e2f162763260"
            ]
        ]
    },
    {
        "id": "fa26e2f162763260",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "[UI] Ersteinrichtung-Dialog einblenden",
        "func": "msg.payload = {\n    groups: {\n        show: ['Ersteinrichtung']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2200,
        "wires": [
            [
                "0a6ef210fc91feea"
            ]
        ]
    },
    {
        "id": "0a6ef210fc91feea",
        "type": "ui-control",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "",
        "ui": "826de81a1d3da833",
        "events": "all",
        "x": 1340,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "6aa73b130afa0192",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "[UI] Konfig-Page weiterleiten",
        "func": "msg.payload = {\n    page: 'Konfiguration',  // Seite zu der gewechselt werden soll\n    pages: {\n        enable: ['Konfiguration'],       // Diese Seite wird aktiviert (sichtbar)\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 2160,
        "wires": [
            [
                "0a6ef210fc91feea",
                "5b65ad269724dba9"
            ]
        ]
    },
    {
        "id": "bb49eb64a95fd55b",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "START",
        "mode": "link",
        "links": [],
        "x": 865,
        "y": 2160,
        "wires": []
    },
    {
        "id": "5b65ad269724dba9",
        "type": "delay",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Delay Loop",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1350,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "9e9531cb7b3cf674",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 2240,
        "wires": [
            [
                "fa26e2f162763260"
            ]
        ]
    },
    {
        "id": "f33bbf72b9b63711",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "",
        "url": "/api/check-password",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 840,
        "wires": [
            [
                "86241f78f6249423",
                "88c706e3490e5d0c"
            ]
        ]
    },
    {
        "id": "99a7ae697d4f679c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Passwort-Check",
        "func": "const given = (msg.givenPassword ?? '').toString();\n\n// Datei-Inhalt steckt jetzt in msg.payload (utf8-String)\nlet stored = '';\nconst raw = (msg.payload ?? '').toString().trim();\n\nif (!raw) {\n    // Kein gespeichertes PW vorhanden -> Zugriff verweigern\n    msg.statusCode = 401;\n    msg.payload = { ok: false };\n    return msg;\n}\n\n// Erst versuchen, JSON zu lesen { \"password\": \"...\" }\ntry {\n    const obj = JSON.parse(raw);\n    if (obj && typeof obj.password === 'string') {\n        stored = obj.password;\n    } else {\n        // Kein Feld \"password\" -> treat as plain\n        stored = raw;\n    }\n} catch {\n    // Nicht-JSON -> treat as plain string\n    stored = raw;\n}\n\nif (given && stored && given === stored) {\n    msg.statusCode = 200;\n    msg.payload = { ok: true };\n} else {\n    msg.statusCode = 401;\n    msg.payload = { ok: false };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 820,
        "wires": [
            [
                "5159326f0de47168"
            ]
        ]
    },
    {
        "id": "5159326f0de47168",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1350,
        "y": 820,
        "wires": []
    },
    {
        "id": "86241f78f6249423",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 900,
        "wires": []
    },
    {
        "id": "paths_get_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "GET /api/paths",
        "url": "/api/paths",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 100,
        "wires": [
            [
                "paths_get_setfile"
            ]
        ]
    },
    {
        "id": "paths_get_setfile",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||   // Fallback, falls du es global setzt\n    '';\n\nif (!base) {\n    // optionales Logging hilft beim Debuggen\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n    // Wenn du willst, kannst du hier noch einen Default setzen:\n    // msg.filename = '/tmp/path.json'; return msg;\n}\n\nmsg.filename = base + '/path.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "paths_get_access",
                "fdf0491bc433bff1"
            ]
        ]
    },
    {
        "id": "paths_get_access",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 620,
        "y": 100,
        "wires": [
            [
                "paths_get_filein"
            ],
            [
                "paths_get_empty"
            ]
        ]
    },
    {
        "id": "paths_get_filein",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "lesen (utf8)",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "x": 820,
        "y": 100,
        "wires": [
            [
                "paths_get_parse"
            ]
        ]
    },
    {
        "id": "paths_get_parse",
        "type": "json",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 990,
        "y": 100,
        "wires": [
            [
                "paths_get_attach"
            ]
        ]
    },
    {
        "id": "paths_get_empty",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Fallback: {}",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "paths_get_attach"
            ]
        ]
    },
    {
        "id": "paths_get_attach",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Version anhängen + Globals",
        "func": "let ver = global.get('paths_version');\nif (!ver) { ver = String(Date.now()); global.set('paths_version', ver); }\nconst data = typeof msg.payload === 'object' && msg.payload ? msg.payload : {};\nif (data.PathMitarbeiter !== undefined) global.set('PathMitarbeiter', data.PathMitarbeiter);\nif (data.PathProduktionen !== undefined) global.set('PathProduktionen', data.PathProduktionen);\nif (data.PathStammdaten !== undefined) global.set('PathStammdaten', data.PathStammdaten);\nif (data.PathPTUser !== undefined) global.set('PathPTUser', data.PathPTUser);\nmsg.payload = { data, version: ver };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 130,
        "wires": [
            [
                "paths_get_out"
            ]
        ]
    },
    {
        "id": "paths_get_out",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "200",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 130,
        "wires": []
    },
    {
        "id": "paths_put_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "PUT /api/paths",
        "url": "/api/paths",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 260,
        "wires": [
            [
                "paths_put_check"
            ]
        ]
    },
    {
        "id": "paths_put_check",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Body parsen + prüfen",
        "func": "// Robust parse helper\nfunction safeParse(x) {\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\n\nconst body = safeParse(msg.payload);\n\n// Grundprüfung\nif (!body || typeof body.version !== 'string' || typeof body.data !== 'object' || body.data === null || Array.isArray(body.data)) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\n\n// Felder whitelisten/normalisieren\nconst d = body.data;\nconst normalized = {\n  PathMitarbeiter: typeof d.PathMitarbeiter === 'string' ? d.PathMitarbeiter : '',\n  PathProduktionen: typeof d.PathProduktionen === 'string' ? d.PathProduktionen : '',\n  PathStammdaten: typeof d.PathStammdaten === 'string' ? d.PathStammdaten : '',\n  PathPTUser: typeof d.PathPTUser === 'string' ? d.PathPTUser : ''\n};\n\n// Ergebnis für die weiteren Nodes bereitstellen\nmsg.body = { data: normalized, version: body.version };\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 260,
        "wires": [
            [
                "paths_put_setfile",
                "390fc01b433f604d"
            ],
            [
                "paths_put_400",
                "31559c4fdeac3181"
            ]
        ]
    },
    {
        "id": "paths_put_400",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 670,
        "y": 300,
        "wires": []
    },
    {
        "id": "paths_put_setfile",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||   // Fallback, falls du es global setzt\n    '';\n\nif (!base) {\n    // optionales Logging hilft beim Debuggen\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n    // Wenn du willst, kannst du hier noch einen Default setzen:\n    // msg.filename = '/tmp/path.json'; return msg;\n}\n\nmsg.filename = base + '/path.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "paths_put_compare"
            ]
        ]
    },
    {
        "id": "paths_put_compare",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Version vergleichen",
        "func": "const cur = global.get('paths_version') || '0';\nconst cli = String(msg.body?.version || '');\nif (cli !== cur) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion: cur };\n  return [null, msg];\n}\nconst next = msg.body.data || {};\nmsg.payload = JSON.stringify(next, null, 2);\nmsg.nextVersion = String(Date.now());\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 910,
        "y": 260,
        "wires": [
            [
                "paths_put_write"
            ],
            [
                "paths_put_409"
            ]
        ]
    },
    {
        "id": "paths_put_409",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 1120,
        "y": 300,
        "wires": []
    },
    {
        "id": "paths_put_write",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "path.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1120,
        "y": 260,
        "wires": [
            [
                "paths_put_globals"
            ]
        ]
    },
    {
        "id": "paths_put_globals",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Globals setzen + Antwort",
        "func": "try { var data = JSON.parse(msg.payload); } catch(e) { data = {}; }\nif (data.PathMitarbeiter !== undefined) global.set('PathMitarbeiter', data.PathMitarbeiter);\nif (data.PathProduktionen !== undefined) global.set('PathProduktionen', data.PathProduktionen);\nif (data.PathStammdaten !== undefined) global.set('PathStammdaten', data.PathStammdaten);\nif (data.PathPTUser !== undefined) global.set('PathPTUser', data.PathPTUser);\nif (msg.nextVersion) global.set('paths_version', msg.nextVersion);\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('paths_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 260,
        "wires": [
            [
                "paths_put_200"
            ]
        ]
    },
    {
        "id": "paths_put_200",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 1540,
        "y": 260,
        "wires": []
    },
    {
        "id": "fdf0491bc433bff1",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "390fc01b433f604d",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 320,
        "wires": []
    },
    {
        "id": "31559c4fdeac3181",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 360,
        "wires": []
    },
    {
        "id": "b31d7e3c8e683585",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "adminpw.json lesen",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 820,
        "wires": [
            [
                "99a7ae697d4f679c"
            ]
        ]
    },
    {
        "id": "88c706e3490e5d0c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Body sichern + Pfad setzen",
        "func": "const body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst given = (body.password ?? '').toString();\n\nif (!given) {\n    msg.statusCode = 400;\n    msg.payload = { ok: false, error: 'missing_password' };\n    return [null, msg];\n}\n\n// Passwort für später parken\nmsg.givenPassword = given;\n\n// Datei-Pfad setzen (hier über den File-Node einfacher per ENV!)\n// -> im nachfolgenden \"file in\" Node dann Filename = ${IMMO24_USERDATA}/adminpw.json (Typ: env)\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 840,
        "wires": [
            [
                "b31d7e3c8e683585"
            ],
            [
                "5159326f0de47168"
            ]
        ]
    },
    {
        "id": "adminpw_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "POST /api/adminpw",
        "url": "/api/adminpw",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "adminpw_validate"
            ]
        ]
    },
    {
        "id": "adminpw_validate",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "validate fields",
        "func": "const body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst newPassword = (body.newPassword ?? '').toString();\nconst repeatPassword = (body.repeatPassword ?? '').toString();\n\nif (!newPassword || !repeatPassword) {\n  msg.statusCode = 400;\n  msg.payload = { ok:false, error:'missing_fields' };\n  return [null, msg];\n}\nif (newPassword !== repeatPassword) {\n  msg.statusCode = 422;\n  msg.payload = { ok:false, error:'password_mismatch' };\n  return [null, msg];\n}\n// ok → für File-Node String vorbereiten\nmsg.payload = JSON.stringify({ password: newPassword }, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 590,
        "y": 1000,
        "wires": [
            [
                "adminpw_write",
                "62d75ac90e54201e"
            ],
            [
                "adminpw_err",
                "62d75ac90e54201e"
            ]
        ]
    },
    {
        "id": "adminpw_write",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "write ${IMMO24_USERDATA}/adminpw.json",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 890,
        "y": 1000,
        "wires": [
            [
                "adminpw_ok"
            ]
        ]
    },
    {
        "id": "adminpw_ok",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "200 OK",
        "func": "msg.statusCode = 200;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 1000,
        "wires": [
            [
                "adminpw_out"
            ]
        ]
    },
    {
        "id": "adminpw_err",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "error response",
        "statusCode": "",
        "headers": {},
        "x": 820,
        "y": 1060,
        "wires": []
    },
    {
        "id": "adminpw_out",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1280,
        "y": 1000,
        "wires": []
    },
    {
        "id": "62d75ac90e54201e",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 920,
        "wires": []
    },
    {
        "id": "c0a1ea6d1b9a1112",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "",
        "url": "/api/schema",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "7bbbd4653db740f1"
            ]
        ]
    },
    {
        "id": "0c2bb7a2a83a1113",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 830,
        "y": 520,
        "wires": [
            [
                "f5d8c9a8a2a1114"
            ]
        ]
    },
    {
        "id": "f5d8c9a8a2a1114",
        "type": "json",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "parse (tolerant)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 460,
        "wires": [
            [
                "9f7b5d6ac2d1115"
            ]
        ]
    },
    {
        "id": "9f7b5d6ac2d1115",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "Wrap {data, version}",
        "func": "const obj = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst data = {\n  projektordnerSchema: (obj.projektordnerSchema ?? '').toString(),\n  sessionSchema: (obj.sessionSchema ?? '').toString()\n};\nmsg.payload = { data, version: String(Date.now()) };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "c3e4d5f6a7b1116",
                "77a939fd00b2c94a"
            ]
        ]
    },
    {
        "id": "c3e4d5f6a7b1116",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "200",
        "statusCode": "",
        "headers": {},
        "x": 1260,
        "y": 460,
        "wires": []
    },
    {
        "id": "2a9c0d1e2f311117",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "",
        "url": "/api/schema",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 580,
        "wires": [
            [
                "8e7d6c5b4a311119",
                "2729b38d7e8e8fb5"
            ]
        ]
    },
    {
        "id": "8e7d6c5b4a311119",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "Validate + toWrite",
        "func": "// Body robust ermitteln ({schema:{…}}, {data:{…}} oder flach)\nconst body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst container =\n  (body.schema && typeof body.schema === 'object') ? body.schema :\n    (body.data && typeof body.data === 'object') ? body.data :\n      body;\n\nconst projekt = container?.projektordnerSchema;\nconst session = container?.sessionSchema;\nconst version = body?.version;\n\n// Validierung\nif (typeof version !== 'string' || typeof projekt !== 'string' || typeof session !== 'string') {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\n\n// Für File-Node (schreibt nur die Schemes, ohne Version)\nmsg.payload = JSON.stringify({\n  projektordnerSchema: projekt,\n  sessionSchema: session\n}, null, 2);\n\nmsg.clientVersion = version;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 640,
        "wires": [
            [
                "5fa35bb78c259faa",
                "2729b38d7e8e8fb5"
            ],
            [
                "3f2e1d0c9b811121",
                "2729b38d7e8e8fb5"
            ]
        ],
        "outputLabels": [
            "okay",
            "error"
        ]
    },
    {
        "id": "a1b2c3d4e5f61120",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1110,
        "y": 560,
        "wires": [
            [
                "3f2e1d0c9b811121"
            ]
        ]
    },
    {
        "id": "3f2e1d0c9b811121",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "Reply",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 620,
        "wires": [],
        "info": "Bei Erfolg sendet der vorangehende http response (200) schon –\ndieser Knoten dient als Fallback für Fehlerausgänge."
    },
    {
        "id": "7bbbd4653db740f1",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/schemes.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 500,
        "wires": [
            [
                "0c2bb7a2a83a1113"
            ]
        ]
    },
    {
        "id": "77a939fd00b2c94a",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 500,
        "wires": []
    },
    {
        "id": "5fa35bb78c259faa",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json Verzeichnis",
        "func": "const base = global.get('PathStammdaten');\nif (!base) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'no_stammdaten_path' };\n    return [null, msg];\n}\nmsg.filename = base + '/schemes.json';\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 580,
        "wires": [
            [
                "a1b2c3d4e5f61120"
            ]
        ]
    },
    {
        "id": "2729b38d7e8e8fb5",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 660,
        "wires": []
    },
    {
        "id": "0429d8b08e8463f2",
        "type": "change",
        "z": "dc0d981398a42d88",
        "name": "global.activeUser = payload.user",
        "rules": [
            {
                "t": "set",
                "p": "activeUser",
                "pt": "global",
                "to": "payload.user",
                "tot": "msg"
            }
        ],
        "x": 520,
        "y": 1400,
        "wires": [
            [
                "fcd7dba42c404850",
                "8390ee9561338474"
            ]
        ]
    },
    {
        "id": "2b57da8d419bc3d5",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 1320,
        "y": 1400,
        "wires": []
    },
    {
        "id": "f3f83af13edd1713",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "POST /api/logout",
        "url": "/api/logout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1500,
        "wires": [
            [
                "89f32ddc71725f1e"
            ]
        ]
    },
    {
        "id": "89f32ddc71725f1e",
        "type": "change",
        "z": "dc0d981398a42d88",
        "name": "global.activeUser = null",
        "rules": [
            {
                "t": "set",
                "p": "activeUser",
                "pt": "global",
                "to": "null",
                "tot": "json"
            }
        ],
        "x": 430,
        "y": 1500,
        "wires": [
            [
                "be524ab414ee66c7"
            ]
        ]
    },
    {
        "id": "cd81f2a98454698b",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 1500,
        "wires": []
    },
    {
        "id": "3606cd78175f49ab",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 1640,
        "wires": [
            [
                "read_ma_dir"
            ]
        ]
    },
    {
        "id": "read_ma_dir",
        "type": "fs-ops-dir",
        "z": "dc0d981398a42d88",
        "name": "MA-Ordner lesen",
        "path": "PathMitarbeiter",
        "pathType": "global",
        "filter": "",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 810,
        "y": 1740,
        "wires": [
            [
                "filter_hidden",
                "a00b24b7cb276495"
            ]
        ]
    },
    {
        "id": "filter_hidden",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Unsichtbare filtern",
        "func": "if(!Array.isArray(msg.payload)) msg.payload=[];\nmsg.payload = msg.payload.filter(n => typeof n === 'string' && !n.startsWith('.'));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 1740,
        "wires": [
            [
                "to_full_paths"
            ]
        ]
    },
    {
        "id": "to_full_paths",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "zu Pfaden konvertieren",
        "func": "const base = global.get('PathMitarbeiter') || '';\nmsg.payload = (msg.payload || []).map(n => base + '/' + n);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1230,
        "y": 1740,
        "wires": [
            [
                "stats_paths"
            ]
        ]
    },
    {
        "id": "stats_paths",
        "type": "fs-ops-stats",
        "z": "dc0d981398a42d88",
        "name": "Statistiken (Array)",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1450,
        "y": 1740,
        "wires": [
            [
                "only_directory_names"
            ]
        ]
    },
    {
        "id": "only_directory_names",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Nur Ordnernamen (Array)",
        "func": "const pfade = msg.payload || [];\nconst stats = msg.stats || [];\nconst out = [];\nfor (let i = 0; i < pfade.length; i++) {\n  const s = stats[i];\n  let isDir = false;\n  if (s) {\n    if (typeof s.isDirectory === 'function') {\n      isDir = s.isDirectory();\n    } else if (typeof s.mode === 'number') {\n      isDir = (s.mode & 0o170000) === 0o040000;\n    }\n  }\n  if (isDir) {\n    const teile = pfade[i].split(/[\\\\/]/);\n    const name = teile[teile.length - 1];\n    if (name && !name.startsWith('.')) out.push(name);\n  }\n}\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1670,
        "y": 1740,
        "wires": [
            [
                "split_per_user"
            ]
        ]
    },
    {
        "id": "split_per_user",
        "type": "split",
        "z": "dc0d981398a42d88",
        "name": "pro Ordner",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 1800,
        "wires": [
            [
                "build_user_json_path"
            ]
        ]
    },
    {
        "id": "build_user_json_path",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Pfad zu immo24/immo24-user.json",
        "func": "const PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst userName = msg.payload; // einzelner Ordnername\nmsg.userName = userName;\nmsg.filename = `${PathMitarbeiter}/${userName}/immo24/immo24-user.json`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1800,
        "wires": [
            [
                "check_exists"
            ]
        ]
    },
    {
        "id": "check_exists",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "name": "Datei vorhanden?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1090,
        "y": 1800,
        "wires": [
            [
                "file_in_json"
            ],
            [
                "mark_empty"
            ]
        ]
    },
    {
        "id": "file_in_json",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "name": "JSON lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1290,
        "y": 1800,
        "wires": [
            [
                "extract_kuerzel"
            ]
        ]
    },
    {
        "id": "mark_empty",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "leer markieren",
        "func": "msg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1300,
        "y": 1840,
        "wires": [
            [
                "join_back"
            ]
        ]
    },
    {
        "id": "join_back",
        "type": "join",
        "z": "dc0d981398a42d88",
        "name": "Array sammeln",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "useparts": true,
        "x": 1500,
        "y": 1840,
        "wires": [
            [
                "filter_nulls_sort"
            ]
        ]
    },
    {
        "id": "filter_nulls_sort",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Nulls entfernen + sortieren",
        "func": "// Erwartet msg.payload = Array aus Objekten oder nulls\n// Format: { name: \"<ordnername>\", kuerzel: \"<string>\" }\n\n// Nulls entfernen\nlet arr = Array.isArray(msg.payload)\n    ? msg.payload.filter(v => v && typeof v === 'object')\n    : [];\n\n// Sortieren nach 'name'\narr.sort((a, b) => String(a.name).localeCompare(String(b.name), 'de'));\n\n// sauberes msg zurückgeben\nmsg.payload = arr;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1840,
        "wires": [
            [
                "0e752b1a10a0f407",
                "n_return"
            ]
        ]
    },
    {
        "id": "0e752b1a10a0f407",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1860,
        "y": 1900,
        "wires": []
    },
    {
        "id": "extract_kuerzel",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Kürzel extrahieren (nie droppen)",
        "func": "// Erwartet msg.payload = String-Inhalt der Datei (vom file in / utf8)\n// msg.userName = Name des User-Ordners\n// Gibt { name: <username>, kuerzel: <string> } oder null zurück\n\nlet text = (msg.payload || \"\").trim();\n\nif (!text) {\n  msg.payload = null;   // leer → kein Eintrag\n} else {\n  msg.payload = { name: msg.userName, kuerzel: text };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1800,
        "wires": [
            [
                "join_back"
            ]
        ]
    },
    {
        "id": "f5e0f6d97d4bf184",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "GET /api/user",
        "url": "/api/user",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 610,
        "y": 1940,
        "wires": [
            [
                "d46d40672dee4b34",
                "2f18cca8c457571f"
            ]
        ]
    },
    {
        "id": "d46d40672dee4b34",
        "type": "link call",
        "z": "dc0d981398a42d88",
        "name": "Scan-Flow aufrufen",
        "links": [
            "f3e2c2d834082ab2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 810,
        "y": 1940,
        "wires": [
            [
                "c19b623fcc500c5b"
            ]
        ]
    },
    {
        "id": "c19b623fcc500c5b",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "200 JSON",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1030,
        "y": 1940,
        "wires": []
    },
    {
        "id": "n_return",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "name": "Return an Caller",
        "mode": "return",
        "links": [],
        "x": 1905,
        "y": 1840,
        "wires": []
    },
    {
        "id": "f3e2c2d834082ab2",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "name": "Scan-Flow Eingang",
        "links": [],
        "x": 655,
        "y": 1740,
        "wires": [
            [
                "read_ma_dir"
            ]
        ]
    },
    {
        "id": "8806e98ff9e91037",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "POST /api/login",
        "url": "/api/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "0429d8b08e8463f2"
            ]
        ]
    },
    {
        "id": "user_http_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "POST /api/user",
        "url": "/api/user",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1200,
        "wires": [
            [
                "user_call_worker",
                "c3eb8604590cad9d"
            ]
        ]
    },
    {
        "id": "user_call_worker",
        "type": "link call",
        "z": "dc0d981398a42d88",
        "name": "run user worker",
        "links": [
            "user_link_in"
        ],
        "timeout": "120",
        "x": 520,
        "y": 1200,
        "wires": [
            [
                "user_http_200",
                "a6777d4781e75d3d"
            ]
        ]
    },
    {
        "id": "user_http_200",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "HTTP 200",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 700,
        "y": 1200,
        "wires": []
    },
    {
        "id": "user_link_in",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "name": "Worker In",
        "links": [],
        "x": 305,
        "y": 1260,
        "wires": [
            [
                "user_validate_bulk"
            ]
        ]
    },
    {
        "id": "user_validate_bulk",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "validate payload",
        "func": "const p = msg.payload || {};\nconst list = Array.isArray(p.mitarbeiter) ? p.mitarbeiter : [];\nif (!Array.isArray(list) || list.length === 0) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'mitarbeiter array required' };\n    return msg;\n}\nconst base = global.get('PathMitarbeiter') || '';\nmsg.base = base;\nmsg.payload = list.map(x => ({ name: String(x?.name ?? ''), kuerzel: String(x?.kuerzel ?? '') }));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 505,
        "y": 1260,
        "wires": [
            [
                "user_split",
                "e339fdade55c3a6f"
            ]
        ]
    },
    {
        "id": "user_split",
        "type": "split",
        "z": "dc0d981398a42d88",
        "name": "per user",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 685,
        "y": 1260,
        "wires": [
            [
                "user_build_paths",
                "e339fdade55c3a6f"
            ]
        ]
    },
    {
        "id": "user_build_paths",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "build paths",
        "func": "const base = msg.base || '';\nconst name = msg.payload.name;\nconst kuerzel = msg.payload.kuerzel;\nif (!name) { msg.payload = { name, action: 'skipped:name-missing' }; return msg; }\nmsg.user = { name, kuerzel };\nmsg.paths = {\n  userDir: `${base}/${name}`,\n  metaDir: `${base}/${name}/immo24`,\n  metaFile: `${base}/${name}/immo24/immo24-user.json`\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 845,
        "y": 1260,
        "wires": [
            [
                "user_access_userdir"
            ]
        ]
    },
    {
        "id": "user_access_userdir",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "name": "userDir exists?",
        "path": "",
        "pathType": "str",
        "filename": "paths.userDir",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1045,
        "y": 1260,
        "wires": [
            [
                "user_access_metadir"
            ],
            [
                "user_mkdir_userdir"
            ]
        ]
    },
    {
        "id": "user_mkdir_userdir",
        "type": "fs-ops-mkdir",
        "z": "dc0d981398a42d88",
        "name": "mkdir userDir",
        "path": "",
        "pathType": "str",
        "dirname": "paths.userDir",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "dir",
        "fullpathType": "msg",
        "x": 1240,
        "y": 1280,
        "wires": [
            [
                "user_access_metadir"
            ]
        ]
    },
    {
        "id": "user_access_metadir",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "name": "metaDir exists?",
        "path": "",
        "pathType": "str",
        "filename": "paths.metaDir",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1445,
        "y": 1260,
        "wires": [
            [
                "user_set_file_payload"
            ],
            [
                "user_mkdir_metadir",
                "3e7a88e641e2554e"
            ]
        ]
    },
    {
        "id": "user_mkdir_metadir",
        "type": "fs-ops-mkdir",
        "z": "dc0d981398a42d88",
        "name": "mkdir metaDir",
        "path": "",
        "pathType": "str",
        "dirname": "paths.metaDir",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "dir",
        "fullpathType": "msg",
        "x": 1800,
        "y": 1300,
        "wires": [
            [
                "user_set_file_payload"
            ]
        ]
    },
    {
        "id": "user_set_file_payload",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "payload/filename setzen",
        "func": "msg.filename = msg.paths.metaFile;\nmsg.payload = msg.user.kuerzel; // exakt wie geliefert\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1810,
        "y": 1160,
        "wires": [
            [
                "user_write_file"
            ]
        ]
    },
    {
        "id": "user_write_file",
        "type": "file",
        "z": "dc0d981398a42d88",
        "name": "write immo24-user.json",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2035,
        "y": 1260,
        "wires": [
            [
                "user_result_written"
            ]
        ]
    },
    {
        "id": "user_result_written",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "result entry",
        "func": "msg.payload = { name: msg.user.name, action: 'written' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2225,
        "y": 1260,
        "wires": [
            [
                "user_join"
            ]
        ]
    },
    {
        "id": "user_join",
        "type": "join",
        "z": "dc0d981398a42d88",
        "name": "collect results",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "x": 2395,
        "y": 1260,
        "wires": [
            [
                "user_summary"
            ]
        ]
    },
    {
        "id": "user_summary",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "200 summary",
        "func": "const arr = Array.isArray(msg.payload) ? msg.payload : [];\nmsg.statusCode = 200;\nmsg.payload = { ok: true, results: arr, count: arr.length };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2575,
        "y": 1260,
        "wires": [
            [
                "user_link_out"
            ]
        ]
    },
    {
        "id": "user_link_out",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "name": "Worker Return",
        "mode": "return",
        "links": [],
        "x": 2755,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c3eb8604590cad9d",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a6777d4781e75d3d",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1160,
        "wires": []
    },
    {
        "id": "e339fdade55c3a6f",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1320,
        "wires": []
    },
    {
        "id": "3e7a88e641e2554e",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 1420,
        "wires": []
    },
    {
        "id": "fcd7dba42c404850",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 1440,
        "wires": []
    },
    {
        "id": "8390ee9561338474",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Kürzel-Pfad festlegen",
        "func": "let activeUser = msg.payload.user;\nlet PathMitarbeiter = global.get('PathMitarbeiter') || '';\nmsg.PathKuerzel = `${PathMitarbeiter}/${activeUser}/immo24/immo24-user.json`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1460,
        "wires": [
            [
                "43a6b27bbab6ec19"
            ]
        ]
    },
    {
        "id": "43a6b27bbab6ec19",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "name": "immo24-user.json lesen",
        "filename": "PathKuerzel",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1030,
        "y": 1460,
        "wires": [
            [
                "9c3289d28ae4abde"
            ]
        ]
    },
    {
        "id": "9c3289d28ae4abde",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "setze global.activeUserKuerzel",
        "func": "global.set('activeUserKuerzel', msg.payload.trim());\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1460,
        "wires": [
            [
                "2b57da8d419bc3d5"
            ]
        ]
    },
    {
        "id": "14382e33189de329",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "",
        "url": "/api/activeUser",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1560,
        "wires": [
            [
                "bff0fd592f6ebf74"
            ]
        ]
    },
    {
        "id": "bff0fd592f6ebf74",
        "type": "change",
        "z": "dc0d981398a42d88",
        "name": "msg.payload = global.activeUser",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "activeUser",
                "tot": "global"
            }
        ],
        "x": 400,
        "y": 1560,
        "wires": [
            [
                "332d2f58ecabbd22",
                "fafe0f32566f8689"
            ]
        ]
    },
    {
        "id": "332d2f58ecabbd22",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 620,
        "y": 1560,
        "wires": []
    },
    {
        "id": "be524ab414ee66c7",
        "type": "change",
        "z": "dc0d981398a42d88",
        "name": "global.activeUser = null",
        "rules": [
            {
                "t": "set",
                "p": "activeUserKuerzel",
                "pt": "global",
                "to": "null",
                "tot": "json"
            }
        ],
        "x": 670,
        "y": 1500,
        "wires": [
            [
                "cd81f2a98454698b"
            ]
        ]
    },
    {
        "id": "2f18cca8c457571f",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1660,
        "wires": []
    },
    {
        "id": "a00b24b7cb276495",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 1620,
        "wires": []
    },
    {
        "id": "fafe0f32566f8689",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "ACTUSER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 1600,
        "wires": []
    },
    {
        "id": "41a1604a42cf8a96",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Kunde hinzufügen",
        "func": "// Erwartet: msg.payload = { kunde: \"Name\" }\n// Liest bestehende Kunden aus dem Flow-Kontext, ergänzt bei Erfolg und liefert JSON-String zurück.\n\n// 1) Eingabe validieren\nconst body = msg.payload && typeof msg.payload === 'object' ? msg.payload : {};\nconst nameRaw = (body.kunde || '').trim();\n\nif (!nameRaw) {\n    msg.statusCode = 400;                    // Bad Request\n    msg.payload = { error: 'kunde fehlt' };\n    msg.topic = 'error';\n    return [null, msg];                      // → Fehler-Output\n}\n\n// 2) Bestehende Liste holen\nlet kunden = flow.get('kundenStammdaten') || [];\n\n// 3) Duplikat-Check (case-insensitive)\nconst exists = kunden.some(k => (k.kunde || '').trim().toLowerCase() === nameRaw.toLowerCase());\nif (exists) {\n    msg.statusCode = 409;                    // Conflict\n    msg.payload = { error: 'Kunde existiert bereits' };\n    msg.topic = 'error';\n    return [null, msg];                      // → Fehler-Output\n}\n\n// 4) Neuen Kunden einfügen\nconst neuerKunde = { kunde: nameRaw, ordner: [] };\nkunden.push(neuerKunde);\n\n// 5) Liste im Flow aktualisieren (optional, falls du das woanders machst, kannst du’s weglassen)\n// flow.set('kundenStammdaten', kunden);\n\n// 6) Für File-Write vorbereiten & Metadaten setzen\nmsg.payload = JSON.stringify(kunden, null, 2);\nmsg.topic = 'ok';\nmsg.neukunde = neuerKunde;\nmsg.statusCode = 201;                      // Created (falls direkt an HTTP Response)\n\nreturn [msg, null];                        // → Erfolg-Output",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1400,
        "wires": [
            [
                "4a19a26eb247bcfb",
                "5d8cb4ae2aa3f2ec"
            ],
            [
                "9c53f64fe3de877c"
            ]
        ],
        "outputLabels": [
            "Kunde anlegen",
            "Fehler: Kunde vorhanden"
        ]
    },
    {
        "id": "d2ddab99473b3656",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1150,
        "y": 1400,
        "wires": [
            [
                "57d258a6ea6ffd92",
                "705afdec990a3871"
            ]
        ]
    },
    {
        "id": "4a19a26eb247bcfb",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/kunden_stammdaten.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1400,
        "wires": [
            [
                "d2ddab99473b3656"
            ]
        ]
    },
    {
        "id": "5d8cb4ae2aa3f2ec",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "PathProduktionen abfragen",
        "func": "msg.payload = global.get('PathProduktionen');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1260,
        "wires": [
            [
                "373f7b1408a8d8ef"
            ]
        ]
    },
    {
        "id": "373f7b1408a8d8ef",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner abfragen",
        "path": "payload",
        "pathType": "msg",
        "filter": "",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 1560,
        "y": 1260,
        "wires": [
            [
                "2377aa45b2403535"
            ]
        ]
    },
    {
        "id": "0972a4a5dd6d6322",
        "type": "debug",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 1280,
        "wires": []
    },
    {
        "id": "2377aa45b2403535",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner filtern",
        "func": "// msg.files = Liste aller Ordnernamen (Strings), msg.neukunde.kunde = gewünschter Name\nconst wanted = (msg.neukunde.kunde || '').toLowerCase();\nconst found = (msg.files || []).some(dir => dir.toLowerCase() === wanted);\n\nif (found) {\n    msg.payload = \"Achtung: Ordner existiert bereits (ggf. mit anderer Groß-/Kleinschreibung)!\";\n    return [null, msg]; // Output 2: Info\n} else {\n    msg.payload = global.get('PathProduktionen') + '/' + msg.neukunde.kunde;\n    return [msg, null]; // Output 1: Ordner anlegen\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1260,
        "wires": [
            [
                "95e85c4c1456807d",
                "0972a4a5dd6d6322"
            ],
            [
                "0972a4a5dd6d6322"
            ]
        ],
        "outputLabels": [
            "Kundenordner anlegen",
            "Kundenordner bereits vorhanden"
        ]
    },
    {
        "id": "95e85c4c1456807d",
        "type": "fs-ops-mkdir",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Kundenordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1940,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "2305fc706cda51ac",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1360,
        "wires": [
            [
                "c02215de6b80ad47"
            ]
        ]
    },
    {
        "id": "c02215de6b80ad47",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1360,
        "wires": [
            [
                "58ddc703a5fc46b3"
            ]
        ]
    },
    {
        "id": "58ddc703a5fc46b3",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 720,
        "y": 1360,
        "wires": [
            [
                "d0f086bb05d1dbca"
            ]
        ]
    },
    {
        "id": "d0f086bb05d1dbca",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 890,
        "y": 1360,
        "wires": [
            [
                "c44b831c7f71f3f0"
            ]
        ]
    },
    {
        "id": "c44b831c7f71f3f0",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 1360,
        "wires": []
    },
    {
        "id": "229093bfc29724c5",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1400,
        "wires": [
            [
                "41a1604a42cf8a96"
            ]
        ]
    },
    {
        "id": "f445c6f1b8754602",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1590,
        "y": 1320,
        "wires": []
    },
    {
        "id": "57d258a6ea6ffd92",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Status",
        "func": "msg.statusCode = 201;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1320,
        "wires": [
            [
                "f445c6f1b8754602"
            ]
        ]
    },
    {
        "id": "9c53f64fe3de877c",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 1420,
        "wires": []
    },
    {
        "id": "efee96497b779fbf",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1440,
        "wires": [
            [
                "f819f6286d8877ac"
            ]
        ]
    },
    {
        "id": "f819f6286d8877ac",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1440,
        "wires": [
            [
                "faef63861048a934"
            ]
        ]
    },
    {
        "id": "faef63861048a934",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 1440,
        "wires": [
            [
                "24a8b953ca577f10"
            ]
        ]
    },
    {
        "id": "4e153b8c3c397e84",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Kunde loeschen",
        "func": "const param = (msg.req.params.kunde || '').trim();\nif (!param) { msg.statusCode = 400; msg.payload = { error: 'kunde fehlt' }; return [null, msg]; }\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst before = arr.length;\narr = arr.filter(k => (k.kunde || '').toLowerCase() !== param.toLowerCase());\nif (arr.length === before) { msg.statusCode = 404; msg.payload = { error: 'nicht gefunden' }; return [null, msg]; }\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1440,
        "wires": [
            [
                "d408f2bf260c2d70"
            ],
            [
                "6d70868f6fb23c66"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "d408f2bf260c2d70",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1450,
        "y": 1440,
        "wires": [
            [
                "8a0a359434b8320d"
            ]
        ]
    },
    {
        "id": "8a0a359434b8320d",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1610,
        "y": 1420,
        "wires": []
    },
    {
        "id": "6d70868f6fb23c66",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1310,
        "y": 1460,
        "wires": []
    },
    {
        "id": "12e3163221d910ad",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 1500,
        "wires": [
            [
                "db9878092f0ecaf5"
            ]
        ]
    },
    {
        "id": "24a8b953ca577f10",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 930,
        "y": 1440,
        "wires": [
            [
                "4e153b8c3c397e84"
            ]
        ]
    },
    {
        "id": "db9878092f0ecaf5",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1500,
        "wires": [
            [
                "fd1db7356666748a"
            ]
        ]
    },
    {
        "id": "fd1db7356666748a",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 780,
        "y": 1500,
        "wires": [
            [
                "6fe2baae39839f1a"
            ]
        ]
    },
    {
        "id": "6fe2baae39839f1a",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 1500,
        "wires": [
            [
                "fb507dc5d4767c29"
            ]
        ]
    },
    {
        "id": "fb507dc5d4767c29",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordnerliste",
        "func": "const name = (msg.req.params.kunde || '').toLowerCase();\nconst arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === name);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return msg; }\nmsg.payload = Array.isArray(k.ordner) ? k.ordner : [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1500,
        "wires": [
            [
                "72ecfc50ae08ef2f"
            ]
        ]
    },
    {
        "id": "72ecfc50ae08ef2f",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 1500,
        "wires": []
    },
    {
        "id": "841470fce5aa44c3",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 1540,
        "wires": [
            [
                "d024dbe76a3f0926"
            ]
        ]
    },
    {
        "id": "d024dbe76a3f0926",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1540,
        "wires": [
            [
                "48b16f710a226513"
            ]
        ]
    },
    {
        "id": "48b16f710a226513",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 780,
        "y": 1540,
        "wires": [
            [
                "c4605a91d07eacc9"
            ]
        ]
    },
    {
        "id": "c4605a91d07eacc9",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 950,
        "y": 1540,
        "wires": [
            [
                "96085ec8b042313e"
            ]
        ]
    },
    {
        "id": "96085ec8b042313e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner hinzufügen, Duplikate prüfen",
        "func": "// expects: msg.req.params.kunde, msg.payload (array aus datei), msg.req.body {name,label,ist_Produktionsstufe}\n\nconst kundeParam = (msg.req.params.kunde || '').trim().toLowerCase();\nconst body = msg.req.body || {};\nconst name = (body.name || '').trim();\nconst label = (body.label || '').trim();\nconst flag = !!body.ist_Produktionsstufe;\n\nif (!kundeParam) {\n    msg.statusCode = 400; msg.payload = { error: 'kunde fehlt' }; return [null, msg];\n}\nif (!name) {\n    msg.statusCode = 400; msg.payload = { error: 'name fehlt' }; return [null, msg];\n}\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === kundeParam);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return [null, msg]; }\n\nk.ordner = Array.isArray(k.ordner) ? k.ordner : [];\nconst exists = k.ordner.some(o => (o.name || '').trim().toLowerCase() === name.toLowerCase());\nif (exists) { msg.statusCode = 409; msg.payload = { error: 'Ordnername existiert bereits' }; return [null, msg]; }\n\nk.ordner.push({ name, label, ist_Produktionsstufe: flag });\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1540,
        "wires": [
            [
                "ee9edf6773dc9e80"
            ],
            [
                "44446a7c726fc41a"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "9fe26839a1e98ab7",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "201 ok",
        "func": "msg.statusCode = 201;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1520,
        "wires": [
            [
                "c3c1ad3d3e10693a"
            ]
        ]
    },
    {
        "id": "c3c1ad3d3e10693a",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1890,
        "y": 1520,
        "wires": []
    },
    {
        "id": "44446a7c726fc41a",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 1560,
        "wires": []
    },
    {
        "id": "3390d3aa2f43e28f",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders/:name",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 1620,
        "wires": [
            [
                "670347c94138255e"
            ]
        ]
    },
    {
        "id": "670347c94138255e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1620,
        "wires": [
            [
                "a9a1e815467da76c"
            ]
        ]
    },
    {
        "id": "a9a1e815467da76c",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 800,
        "y": 1620,
        "wires": [
            [
                "e2263c106be8ee44"
            ]
        ]
    },
    {
        "id": "e2263c106be8ee44",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 970,
        "y": 1620,
        "wires": [
            [
                "52cbb131108a02f7"
            ]
        ]
    },
    {
        "id": "52cbb131108a02f7",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner aktualisieren, Konflikte prüfen",
        "func": "const kundeParam = (msg.req.params.kunde || '').trim().toLowerCase();\nconst oldName = (msg.req.params.name || '').trim().toLowerCase();\nconst body = msg.req.body || {};\nconst newName = (body.name || '').trim();\nconst label = (body.label || '').trim();\nconst flag = !!body.ist_Produktionsstufe;\n\nif (!kundeParam || !oldName) {\n    msg.statusCode = 400; msg.payload = { error: 'kunde oder alter name fehlt' }; return [null, msg];\n}\nif (!newName) {\n    msg.statusCode = 400; msg.payload = { error: 'neuer name fehlt' }; return [null, msg];\n}\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === kundeParam);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return [null, msg]; }\n\nk.ordner = Array.isArray(k.ordner) ? k.ordner : [];\nconst idxOld = k.ordner.findIndex(o => (o.name || '').trim().toLowerCase() === oldName);\nif (idxOld < 0) { msg.statusCode = 404; msg.payload = { error: 'ordner (alt) nicht gefunden' }; return [null, msg]; }\n\n// Wenn Name geändert wird: Duplikate prüfen\nconst isRename = newName.toLowerCase() !== oldName;\nif (isRename) {\n    const conflict = k.ordner.some((o, i) =>\n        i !== idxOld && (o.name || '').trim().toLowerCase() === newName.toLowerCase()\n    );\n    if (conflict) { msg.statusCode = 409; msg.payload = { error: 'Ordnername existiert bereits' }; return [null, msg]; }\n}\n\n// Update\nk.ordner[idxOld] = { name: newName, label, ist_Produktionsstufe: flag };\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1620,
        "wires": [
            [
                "e4d5097ebd7590e3"
            ],
            [
                "64b77345d2c02e51"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "fd497a93ac24b99e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "204 ok",
        "func": "msg.statusCode = 204;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1600,
        "wires": [
            [
                "93bdad8186170fba"
            ]
        ]
    },
    {
        "id": "64b77345d2c02e51",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 1640,
        "wires": []
    },
    {
        "id": "93bdad8186170fba",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1910,
        "y": 1600,
        "wires": []
    },
    {
        "id": "c6bc4f90d144350d",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders/:name",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 1660,
        "wires": [
            [
                "38f613d2151f78ac"
            ]
        ]
    },
    {
        "id": "38f613d2151f78ac",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1660,
        "wires": [
            [
                "a22736cc2f7c03c0"
            ]
        ]
    },
    {
        "id": "a22736cc2f7c03c0",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 820,
        "y": 1660,
        "wires": [
            [
                "d64ff09155af078f"
            ]
        ]
    },
    {
        "id": "d64ff09155af078f",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 990,
        "y": 1660,
        "wires": [
            [
                "0c7d50182f40a06c"
            ]
        ]
    },
    {
        "id": "0c7d50182f40a06c",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner entfernen",
        "func": "const kundeParam = (msg.req.params.kunde || '').trim().toLowerCase();\nconst nameParam = (msg.req.params.name || '').trim().toLowerCase();\nif (!kundeParam || !nameParam) { msg.statusCode = 400; msg.payload = { error: 'kunde oder name fehlt' }; return [null, msg]; }\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === kundeParam);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return [null, msg]; }\n\nk.ordner = Array.isArray(k.ordner) ? k.ordner : [];\nconst before = k.ordner.length;\nk.ordner = k.ordner.filter(o => (o.name || '').trim().toLowerCase() !== nameParam);\n\nif (k.ordner.length === before) {\n    msg.statusCode = 404; msg.payload = { error: 'ordner nicht gefunden' }; return [null, msg];\n}\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 1700,
        "wires": [
            [
                "216f55f9767ff53a"
            ],
            [
                "948c245c80c18ed9"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "d4546258e4fd2c43",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "204 ok",
        "func": "msg.statusCode = 204;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1700,
        "wires": [
            [
                "69133e5578d8d519"
            ]
        ]
    },
    {
        "id": "948c245c80c18ed9",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1330,
        "y": 1740,
        "wires": []
    },
    {
        "id": "69133e5578d8d519",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1890,
        "y": 1700,
        "wires": []
    },
    {
        "id": "e4d5097ebd7590e3",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1530,
        "y": 1600,
        "wires": [
            [
                "fd497a93ac24b99e"
            ]
        ]
    },
    {
        "id": "216f55f9767ff53a",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1490,
        "y": 1700,
        "wires": [
            [
                "d4546258e4fd2c43"
            ]
        ]
    },
    {
        "id": "ee9edf6773dc9e80",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1530,
        "y": 1520,
        "wires": [
            [
                "9fe26839a1e98ab7"
            ]
        ]
    },
    {
        "id": "2fd8cd24ef3ca281",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "GET /api/pb/snapshot",
        "url": "/api/pb/snapshot",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1780,
        "wires": [
            [
                "87c9602477bca030"
            ]
        ]
    },
    {
        "id": "87c9602477bca030",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 1780,
        "wires": [
            [
                "7181e0b3b5441717"
            ]
        ]
    },
    {
        "id": "7181e0b3b5441717",
        "type": "fs-ops-access",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 630,
        "y": 1780,
        "wires": [
            [
                "4406e8602c76e676"
            ],
            [
                "572f7613c5171676"
            ]
        ]
    },
    {
        "id": "4406e8602c76e676",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "lesen (utf8)",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "x": 830,
        "y": 1780,
        "wires": [
            [
                "8bd88f7173449a9a"
            ]
        ]
    },
    {
        "id": "8bd88f7173449a9a",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1000,
        "y": 1780,
        "wires": [
            [
                "0690323155aa8ef2"
            ]
        ]
    },
    {
        "id": "572f7613c5171676",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Fallback: []",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 1820,
        "wires": [
            [
                "0690323155aa8ef2"
            ]
        ]
    },
    {
        "id": "0690323155aa8ef2",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Version anhängen (global)",
        "func": "let ver = global.get('pb_version');\nif (!ver) { ver = String(Date.now()); global.set('pb_version', ver); }\nmsg.payload = { customers: Array.isArray(msg.payload) ? msg.payload : [], version: ver };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1220,
        "y": 1800,
        "wires": [
            [
                "b739f83a1f86db3c"
            ]
        ]
    },
    {
        "id": "b739f83a1f86db3c",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "200",
        "statusCode": "",
        "headers": {},
        "x": 1420,
        "y": 1800,
        "wires": []
    },
    {
        "id": "82033a023a5391bf",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "PUT /api/pb/snapshot",
        "url": "/api/pb/snapshot",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1900,
        "wires": [
            [
                "96edd07e868a5ac6"
            ]
        ]
    },
    {
        "id": "96edd07e868a5ac6",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Body parsen + prüfen",
        "func": "function safeParse(x){\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\nconst body = safeParse(msg.payload);\nif (!body || !Array.isArray(body.customers) || typeof body.version !== 'string') {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\nmsg.body = { customers: body.customers, version: body.version };\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 450,
        "y": 1900,
        "wires": [
            [
                "739e9b38e927c880"
            ],
            [
                "ec0b4bed560ac8d2"
            ]
        ]
    },
    {
        "id": "ec0b4bed560ac8d2",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 690,
        "y": 1940,
        "wires": []
    },
    {
        "id": "739e9b38e927c880",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 1900,
        "wires": [
            [
                "4e39262379dd4dd2"
            ]
        ]
    },
    {
        "id": "4e39262379dd4dd2",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Version vergleichen (global)",
        "func": "const currentVersion = global.get('pb_version') || '0';\nconst clientVersion  = String(msg.body?.version || '');\nif (clientVersion !== currentVersion) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion };\n  return [null, msg];\n}\nconst next = Array.isArray(msg.body.customers) ? msg.body.customers : [];\nmsg.payload = JSON.stringify(next, null, 2);\nmsg.nextVersion = String(Date.now());\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 930,
        "y": 1900,
        "wires": [
            [
                "5df24669e97283b6"
            ],
            [
                "95f1c5e24f5f224e"
            ]
        ]
    },
    {
        "id": "95f1c5e24f5f224e",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 1150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "5df24669e97283b6",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "schreiben (overwrite)",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1180,
        "y": 1900,
        "wires": [
            [
                "bcad8f79ef187fef"
            ]
        ]
    },
    {
        "id": "bcad8f79ef187fef",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "200 + neue Version setzen",
        "func": "if (msg.nextVersion) { global.set('pb_version', msg.nextVersion); }\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('pb_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1430,
        "y": 1900,
        "wires": [
            [
                "5aece03cec227a21"
            ]
        ]
    },
    {
        "id": "5aece03cec227a21",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 1630,
        "y": 1900,
        "wires": []
    },
    {
        "id": "8cee036585de868d",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "url": "/api/projektanlage/templates",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 380,
        "wires": [
            [
                "34ee69129c1b22ad"
            ]
        ]
    },
    {
        "id": "34ee69129c1b22ad",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Template Pfad setzen",
        "func": "let PathMitarbeiter = global.get('PathMitarbeiter');\nlet activeUser = global.get('activeUser');\nmsg.dir = `${PathMitarbeiter}/${activeUser}/immo24/templates/`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "661ca0a214d23709"
            ]
        ]
    },
    {
        "id": "661ca0a214d23709",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Templates lesen",
        "path": "dir",
        "pathType": "msg",
        "filter": "*.ptxt",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 760,
        "y": 380,
        "wires": [
            [
                "dfc751f1cfa33eb0",
                "4ccb8d901b44f6a9"
            ]
        ]
    },
    {
        "id": "dfc751f1cfa33eb0",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Array filtern",
        "func": "msg.options = msg.payload.map(e => ({ label: e, value: e }));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 380,
        "wires": [
            [
                "ee7ff191a9a7f443"
            ]
        ]
    },
    {
        "id": "ee7ff191a9a7f443",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1070,
        "y": 380,
        "wires": []
    },
    {
        "id": "0e9745b173232fff",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "url": "/api/projektanlage/projekte",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 640,
        "wires": [
            [
                "a3e6e753e7da154a"
            ]
        ]
    },
    {
        "id": "8575f3a928ec16d0",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "url": "/api/projektanlage/launchpt",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 820,
        "wires": [
            [
                "c5f797797c362139"
            ]
        ]
    },
    {
        "id": "e935076a3828598c",
        "type": "OS",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "x": 670,
        "y": 820,
        "wires": [
            [
                "4818429074295ab3"
            ]
        ]
    },
    {
        "id": "2d158907a57c26be",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Befehle je nach OS",
        "func": "let fullPath = msg.filename;\nif (msg.payload.platform === \"win32\") {\n    fullPath = fullPath.replace(/\\//g, \"\\\\\");\n    msg.command = 'start \"\" \"' + fullPath + '\"';\n} else if (msg.payload.platform === \"darwin\") {\n    msg.command = 'open \"' + fullPath + '\"';\n} else {\n    msg.command = \"echo OS nicht unterstützt\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 820,
        "wires": [
            [
                "81ef1eb5a3a09963"
            ]
        ]
    },
    {
        "id": "81ef1eb5a3a09963",
        "type": "exec",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Pro Tools öffnen",
        "x": 1250,
        "y": 820,
        "wires": [
            [
                "e9250cebfa9ce5d5"
            ],
            [],
            []
        ]
    },
    {
        "id": "4818429074295ab3",
        "type": "delay",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 820,
        "wires": [
            [
                "2d158907a57c26be"
            ]
        ]
    },
    {
        "id": "a3e6e753e7da154a",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Pflichtfelder + Vorbereitung",
        "func": "// Body sicher holen: bevorzugt msg.payload, Fallback req.body\nconst b = (msg.payload && typeof msg.payload === \"object\")\n    ? msg.payload\n    : (msg.req && msg.req.body) || {};\n\nconst fehlende = [];\n[\"kunde\", \"datum\", \"moid\", \"projektname\", \"stufe\", \"template\"].forEach(k => { if (!b[k]) fehlende.push(k); });\nif (fehlende.length) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"missing fields\", fields: fehlende };\n    return [null, msg];\n}\n\n// Globals\nconst PathProduktionen = global.get(\"PathProduktionen\") || \"\";\nconst PathMitarbeiter = global.get(\"PathMitarbeiter\") || \"\";\nconst activeUser = global.get(\"activeUser\") || \"\";\nconst projektordnerSchema = global.get(\"projektordnerSchema\") || \"\";\nconst kundenStammdaten = global.get(\"kundenStammdaten\") || [];\nmsg.sessionSchema = global.get(\"sessionSchema\") || \"{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}\";\n\n// Ordnername aus Schema\nconst values = {\n    datum: b.datum, projektname: b.projektname, moid: b.moid,\n    benutzer: (global.get(\"activeUserKuerzel\") || \"\"), kunde: b.kunde\n};\nconst projektOrdner = projektordnerSchema.replace(/{{(\\w+)}}/g, (_, k) => values[k] || \"\");\nconst zielPfad = `${PathProduktionen}/${b.kunde}/${projektOrdner}`;\n\n// Unterordner & Label\nconst kundeObj = (kundenStammdaten || []).find(k => k.kunde === b.kunde) || {};\nconst unterordner = Array.isArray(kundeObj.ordner) ? kundeObj.ordner : [];\nconst stufeObj = unterordner.find(o => o.name === b.stufe);\nconst stufeLabel = stufeObj ? stufeObj.label : b.stufe;\n\n// Template-Pfade\nmsg.templateSource = `${PathMitarbeiter}/${activeUser}/immo24/templates/${b.template}`;\nmsg.templateDest = `${zielPfad}/${b.stufe}`;\n\n// persist\nmsg.data = { ...b, stufeLabel, zielPfad, unterordner };\nmsg.filename = `${zielPfad}/immo24-proj.json`;\nmsg.payload = zielPfad; // für fs-ops-access\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 640,
        "wires": [
            [
                "c78b5a04db212d15"
            ],
            [
                "77ce6b84f5164169"
            ]
        ],
        "outputLabels": [
            "access",
            "error"
        ]
    },
    {
        "id": "c78b5a04db212d15",
        "type": "fs-ops-access",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Duplikate prüfen",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 770,
        "y": 620,
        "wires": [
            [
                "0abec049230e8050"
            ],
            [
                "7f5814610e2a962c"
            ]
        ]
    },
    {
        "id": "0abec049230e8050",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Dupl. error",
        "func": "msg.statusCode = 409;\nmsg.payload = { error: \"project exists\", zielPfad: msg.payload };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 600,
        "wires": [
            [
                "2c4c6dd681a78d6f"
            ]
        ]
    },
    {
        "id": "7f5814610e2a962c",
        "type": "fs-ops-mkdir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Projektordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "data.zielPfad",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 980,
        "y": 640,
        "wires": [
            [
                "01126a8ba1003c45"
            ]
        ]
    },
    {
        "id": "77ce6b84f5164169",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 660,
        "wires": []
    },
    {
        "id": "01126a8ba1003c45",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "JSON formatieren",
        "func": "const d = msg.data;\nmsg.filename = `${d.zielPfad}/immo24-proj.json`;\nmsg.payload = JSON.stringify({\n    erstellt_am: d.datum,\n    kunde: d.kunde,\n    projektname: d.projektname,\n    mo_id: d.moid,\n    user: global.get('activeUser')\n}, null, 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 640,
        "wires": [
            [
                "cbd4b2374e8ece8c"
            ]
        ]
    },
    {
        "id": "2c4c6dd681a78d6f",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 600,
        "wires": []
    },
    {
        "id": "cbd4b2374e8ece8c",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "immo24-proj.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 300,
        "y": 700,
        "wires": [
            [
                "ffb2513c207b93a3"
            ]
        ]
    },
    {
        "id": "ffb2513c207b93a3",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Unterordner anlegen",
        "func": "const d = msg.data;\nmsg.payload = (d.unterordner || []).map(o => `${d.zielPfad}/${o.name}`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 700,
        "wires": [
            [
                "127abf21c624e0b9"
            ]
        ]
    },
    {
        "id": "127abf21c624e0b9",
        "type": "split",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 710,
        "y": 700,
        "wires": [
            [
                "ebe504b9e94f9764"
            ]
        ]
    },
    {
        "id": "ebe504b9e94f9764",
        "type": "fs-ops-mkdir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Unterordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 880,
        "y": 700,
        "wires": [
            [
                "718c3a97b38bac7e"
            ]
        ]
    },
    {
        "id": "718c3a97b38bac7e",
        "type": "join",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "877d8704d63b6ee6"
            ]
        ]
    },
    {
        "id": "877d8704d63b6ee6",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Session-Files auflisten",
        "path": "templateDest",
        "pathType": "msg",
        "filter": "*.ptx",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 1220,
        "y": 700,
        "wires": [
            [
                "c6dc78cceccb9c8a"
            ]
        ]
    },
    {
        "id": "c6dc78cceccb9c8a",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Nummerierung",
        "func": "function normalize(s) { return (s || '').normalize('NFC') }\nconst files = (msg.payload || []).map(normalize);\nconst d = msg.data;\nconst values = {\n    datum: normalize(d.datum),\n    projektname: normalize(d.projektname),\n    moid: normalize(d.moid),\n    benutzer: normalize(global.get('activeUserKuerzel') || ''),\n    kunde: normalize(d.kunde),\n    produktionsstufe: normalize(d.stufeLabel)\n};\nlet base = normalize(msg.sessionSchema || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}');\n\n// Regex für alles außer {{version}}\nlet rePattern = base\n    .replace(/\\./g, '\\\\.') // Punkte escapen\n    .replace(/{{version}}/g, \"v(\\\\d+)\")\n    .replace(/{{(\\w+)}}/g, (_, k) => {\n        if (k === 'version') return '';\n        const val = values[k];\n        return val ? val.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '.*';\n    });\n\nconst re = new RegExp('^' + rePattern + '\\\\.ptx$');\nlet maxV = 0;\nfiles.forEach(f => { const m = re.exec(f); if (m && m[1]) { const v = parseInt(m[1], 10); if (v > maxV) maxV = v; } });\nconst nextV = maxV + 1;\n\nvalues.version = `v${nextV}`;\nlet filename = base.replace(/{{(\\w+)}}/g, (_, k) => values[k] || '');\nfilename = filename.replace(/\\.[^.]+$/, '') + '.ptx';\n\nmsg.filename = filename;                // nur Name\nmsg.destFull = `${msg.templateDest}/${filename}`; // voller Zielpfad\nmsg.sourcePath = msg.templateSource;    // Quelle\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 740,
        "wires": [
            [
                "27d38792047a9532"
            ]
        ]
    },
    {
        "id": "27d38792047a9532",
        "type": "fs-ops-copy",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "sourcePath",
        "sourceFilenameType": "msg",
        "destPath": "templateDest",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 420,
        "y": 740,
        "wires": [
            [
                "d8da94aa8852d67d"
            ]
        ]
    },
    {
        "id": "d8da94aa8852d67d",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "okOut",
        "func": "msg.payload = {\n    ok: true,\n    zielPfad: msg.data.zielPfad,\n    templateDest: msg.templateDest,\n    filename: msg.filename\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            [
                "9cc61715182b07a8"
            ]
        ]
    },
    {
        "id": "9cc61715182b07a8",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 740,
        "wires": []
    },
    {
        "id": "4279662d8d88bdf0",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "url": "/api/projektanlage/projekte",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 460,
        "wires": [
            [
                "2c4f70f4a6289187"
            ]
        ]
    },
    {
        "id": "2c4f70f4a6289187",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "root",
        "func": "// Nur echte HTTP-Requests verarbeiten\nif (!msg.req || !msg.res) {\n    // z.B. Messages vom Inject-Node -> ignorieren\n    return null;\n}\n\nconst kunde = (msg.req.query?.kunde || '').trim();\nif (!kunde) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"kunde required\" };\n    return [null, msg]; // → HTTP Response (Fehler)\n}\n\n// Pfad bauen\nconst base = global.get('PathProduktionen') || '';\nmsg.root = `${base}/${kunde}`;\nmsg.payload = msg.root;\n\n// Vorsorglich CORS/Cache-Header setzen (optional, hilft gegen Zwischen-Caches)\nmsg.headers = {\n    'Cache-Control': 'no-store',\n    'Content-Type': 'application/json; charset=utf-8'\n};\n\nreturn [msg, null]; // → weiter\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 540,
        "wires": [
            [
                "a67516d0726c79a5"
            ],
            [
                "e8736d157d609b90"
            ]
        ],
        "outputLabels": [
            "ok",
            "error"
        ]
    },
    {
        "id": "61b1608e270cc12d",
        "type": "split",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 770,
        "y": 480,
        "wires": [
            [
                "abd1cf7e4f067631"
            ]
        ]
    },
    {
        "id": "abd1cf7e4f067631",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "enrichPath",
        "func": "msg.projektRoot = msg.root;\nmsg.payload = { name: msg.payload, path: `${msg.root}/${msg.payload}` };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 480,
        "wires": [
            [
                "64decafa7632304f"
            ]
        ]
    },
    {
        "id": "605e9a8d2d3c6c8c",
        "type": "fs-ops-access",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "dd57165581257aeb"
            ],
            [
                "7a7d5e17a1be6a03"
            ]
        ]
    },
    {
        "id": "dd57165581257aeb",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1480,
        "y": 460,
        "wires": [
            [
                "a5a3951e8f2823f8"
            ]
        ]
    },
    {
        "id": "a5a3951e8f2823f8",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "parseRow",
        "func": "try {\n    const data = JSON.parse(msg.payload);\n    msg.payload = {\n        date: data.erstellt_am,\n        projektname: data.projektname,\n        moid: data.mo_id,\n        user: data.user\n    };\n    return msg;\n} catch (e) {\n    // Dummy durchreichen, msg-Objekt beibehalten (req/res/parts bleiben erhalten)\n    msg.payload = { skip: true };\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 460,
        "wires": [
            [
                "fbb6ec95041698fe"
            ]
        ]
    },
    {
        "id": "fbb6ec95041698fe",
        "type": "join",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1890,
        "y": 340,
        "wires": [
            [
                "933f0fe5e7e09279"
            ]
        ]
    },
    {
        "id": "933f0fe5e7e09279",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "filterValid",
        "func": "let arr = Array.isArray(msg.payload) ? msg.payload : [];\narr = arr.filter(x => x && !x.skip && x.date && x.projektname && x.moid && x.user);\nmsg.payload = arr;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 460,
        "wires": [
            [
                "e8736d157d609b90"
            ]
        ]
    },
    {
        "id": "e8736d157d609b90",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2030,
        "y": 460,
        "wires": []
    },
    {
        "id": "9f3e8a3cee4b82c9",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "func": "let arr = [];\ntry { arr = JSON.parse(msg.payload) } catch { arr = [] }\n\nglobal.set(\"kundenStammdaten\", arr);\nconst out = arr.map(k => ({\n    label: k.kunde,\n    value: k.kunde,\n    stufen: (k.ordner || [])\n        .filter(o => o.ist_Produktionsstufe)\n        .map(o => ({ label: o.label, value: o.name }))\n}));\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 420,
        "wires": [
            [
                "57201dbb7508a62a"
            ]
        ]
    },
    {
        "id": "0c6c16a88bc1c68d",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "url": "/api/projektanlage/kunden",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 420,
        "wires": [
            [
                "f22b8ed470951aea"
            ]
        ]
    },
    {
        "id": "f22b8ed470951aea",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "7cc39adde9111007"
            ]
        ]
    },
    {
        "id": "7cc39adde9111007",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 760,
        "y": 420,
        "wires": [
            [
                "9f3e8a3cee4b82c9"
            ]
        ]
    },
    {
        "id": "57201dbb7508a62a",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1210,
        "y": 420,
        "wires": []
    },
    {
        "id": "a67516d0726c79a5",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "path": "payload",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 560,
        "y": 480,
        "wires": [
            [
                "cebcd4845d9d6748"
            ]
        ]
    },
    {
        "id": "c0863219dbe21040",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "nach Ordnern filtern",
        "func": "if (msg.stats && msg.stats.isDirectory()) {\n    msg.filename = msg.payload.path + \"/immo24-proj.json\";\n    return [msg, null];              // Ordner → weiter\n}\n\n// Kein Ordner → Dummy, aber req/res/parts erhalten!\nconst dummy = { ...msg, payload: { skip: true } };\nreturn [null, dummy];              // direkt zum join\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 480,
        "wires": [
            [
                "605e9a8d2d3c6c8c"
            ],
            [
                "fbb6ec95041698fe"
            ]
        ],
        "outputLabels": [
            "Ordner",
            "Skip"
        ]
    },
    {
        "id": "64decafa7632304f",
        "type": "fs-ops-stats",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.path",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1060,
        "y": 480,
        "wires": [
            [
                "c0863219dbe21040"
            ]
        ]
    },
    {
        "id": "cebcd4845d9d6748",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Leerer Ordner Check",
        "func": "// msg.payload ist das Array aus fs-ops-dir\nconst arr = Array.isArray(msg.payload) ? msg.payload : [];\nif (arr.length === 0) {\n    // gleiche msg behalten → req/res bleibt erhalten\n    msg.statusCode = 200;\n    msg.payload = [];\n    return [null, msg];     // Out2 → http response\n}\nreturn [msg, null];       // Out1 → split\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 520,
        "wires": [
            [
                "61b1608e270cc12d"
            ],
            [
                "e8736d157d609b90"
            ]
        ],
        "outputLabels": [
            "nein",
            "leer"
        ]
    },
    {
        "id": "7a7d5e17a1be6a03",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "keine immo24-proj.json",
        "func": "// Datei existiert NICHT -> Dummy an Join, aber msg beibehalten!\nconst dummy = { ...msg, payload: { skip: true } };\nreturn dummy;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 540,
        "wires": [
            [
                "fbb6ec95041698fe"
            ]
        ]
    },
    {
        "id": "c5f797797c362139",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.fullPath",
                "pt": "msg",
                "to": "filename",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 880,
        "wires": [
            [
                "e935076a3828598c"
            ]
        ]
    },
    {
        "id": "e9250cebfa9ce5d5",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 800,
        "wires": []
    },
    {
        "id": "3f7d5d69b6d6b6aa",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "url": "/api/projektanlage/resolve-existing",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 1040,
        "wires": [
            [
                "7a3b6a3f2d3a4f4a"
            ]
        ]
    },
    {
        "id": "7a3b6a3f2d3a4f4a",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Validate + Prepare",
        "func": "// Body holen\nconst b = (msg.payload && typeof msg.payload === 'object') ? msg.payload : (msg.req && msg.req.body) || {};\nconst need = ['kunde','datum','projektname','moid','stufe','template'];\nconst fehlende = need.filter(k => !b[k]);\nif (fehlende.length) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'missing', fields: fehlende };\n  return [null, msg];\n}\n\n// Globals\nconst PathProduktionen = global.get('PathProduktionen') || '';\nconst PathMitarbeiter  = global.get('PathMitarbeiter')  || '';\nconst activeUser       = global.get('activeUser')       || '';\nconst projektordnerSchema = global.get('projektordnerSchema') || '';\nconst sessionSchema    = global.get('sessionSchema')    || '{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}';\nconst activeUserKuerzel= global.get('activeUserKuerzel')|| '';\n\n// Nutzwerte & Root\nmsg.data = { ...b };\nmsg.paths = {\n  root: `${PathProduktionen}/${b.kunde}`,\n  templateSource: `${PathMitarbeiter}/${activeUser}/immo24/templates/${b.template}`\n};\n\n// Für später\nmsg.sessionSchema = sessionSchema;\nmsg.schema = projektordnerSchema;\n\n// Response-Header (optional)\nmsg.headers = { 'Cache-Control': 'no-store', 'Content-Type': 'application/json; charset=utf-8' };\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1040,
        "wires": [
            [
                "f5a0f2d807b2d9b3"
            ],
            [
                "d8b76a1c8a1b5a68"
            ]
        ],
        "outputLabels": [
            "ok",
            "error"
        ]
    },
    {
        "id": "d8b76a1c8a1b5a68",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 740,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f5a0f2d807b2d9b3",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Ordner unter Kunde lesen",
        "path": "paths.root",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 780,
        "y": 1040,
        "wires": [
            [
                "9b0b4ee13f1c7a66"
            ]
        ]
    },
    {
        "id": "9b0b4ee13f1c7a66",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Projektordner per Schema finden",
        "func": "function n(s){ return String(s||'').normalize('NFC'); }\nconst entries = Array.isArray(msg.payload) ? msg.payload : [];\nconst { projektname, moid, kunde, datum, stufe } = msg.data;\nconst schema = n(msg.schema||'');\n\n// Regex aus Schema bauen\nconst values = { datum:n(datum), projektname:n(projektname), moid:n(moid), kunde:n(kunde) };\nlet pat = schema\n  .replace(/{{benutzer}}/g, '.+')\n  .replace(/{{(\\w+)}}/g, (_,k) => values[k] ? values[k].replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&') : '.*');\npat = '^' + pat.replace(/ /g,'\\\\s+') + '$';\nconst re = new RegExp(pat);\n\n// versteckte raus, normalisieren, matchen\nconst list = entries.filter(x => x && !String(x).startsWith('.')).map(n);\nconst gefunden = list.find(name => re.test(name));\nif (!gefunden){\n  msg.statusCode = 404;\n  msg.payload = { error: 'not_found' };\n  return [null, msg];\n}\n\nmsg.paths.zielPfad = `${msg.paths.root}/${gefunden}`;\nmsg.paths.templateDest = `${msg.paths.zielPfad}/${stufe}`;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 1040,
        "wires": [
            [
                "aa4ab0a8b0f7a4c4"
            ],
            [
                "d8b76a1c8a1b5a68"
            ]
        ],
        "outputLabels": [
            "match",
            "404"
        ]
    },
    {
        "id": "aa4ab0a8b0f7a4c4",
        "type": "fs-ops-mkdir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Stufenordner anlegen (idempotent)",
        "path": "",
        "pathType": "str",
        "dirname": "paths.templateDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "payload",
        "fullpathType": "msg",
        "x": 1330,
        "y": 1040,
        "wires": [
            [
                "7a6d1f0a2c1a6a24"
            ]
        ]
    },
    {
        "id": "7a6d1f0a2c1a6a24",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "PTX im Stufenordner",
        "path": "paths.templateDest",
        "pathType": "msg",
        "filter": "*.ptx",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "f2a7ef76d8ce9c11"
            ]
        ]
    },
    {
        "id": "f2a7ef76d8ce9c11",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Nummerierung + Dateiname",
        "func": "function n(s){ return String(s||'').normalize('NFC'); }\nconst files = (msg.payload||[]).map(n);\nconst d = msg.data;\nconst values = {\n  datum: n(d.datum),\n  projektname: n(d.projektname),\n  moid: n(d.moid),\n  benutzer: n(global.get('activeUserKuerzel')||''),\n  kunde: n(d.kunde),\n  produktionsstufe: n(d.stufe)\n};\nlet base = n(msg.sessionSchema||'{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}');\n\nlet rePattern = base\n  .replace(/\\./g,'\\\\.')\n  .replace(/{{version}}/g,'v(\\\\d+)')\n  .replace(/{{(\\w+)}}/g,(_,k)=>{ if(k==='version') return ''; const v=values[k]; return v ? v.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&') : '.*'; });\nconst re = new RegExp('^'+rePattern+'\\\\.ptx$');\nlet maxV = 0;\nfor(const f of files){ const m = re.exec(f); if(m && m[1]){ const v = parseInt(m[1],10); if(v>maxV) maxV=v; } }\nconst nextV = maxV + 1;\nvalues.version = `v${nextV}`;\nlet filename = base.replace(/{{(\\w+)}}/g,(_,k)=> values[k] || '');\nfilename = filename.replace(/\\.[^.]+$/, '') + '.ptx';\n\nmsg.filename = filename;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1100,
        "wires": [
            [
                "a0b08bb7a4c1e5b2"
            ]
        ]
    },
    {
        "id": "a0b08bb7a4c1e5b2",
        "type": "fs-ops-copy",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Template → neue PTX",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "paths.templateSource",
        "sourceFilenameType": "msg",
        "destPath": "paths.templateDest",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 780,
        "y": 1100,
        "wires": [
            [
                "c9d5a8b3e2a9a311"
            ]
        ]
    },
    {
        "id": "c9d5a8b3e2a9a311",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "OK Response",
        "func": "msg.payload = {\n  ok: true,\n  zielPfad: msg.paths.zielPfad,\n  templateDest: msg.paths.templateDest,\n  filename: msg.filename\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1100,
        "wires": [
            [
                "633ee666d0372b4a"
            ]
        ]
    },
    {
        "id": "633ee666d0372b4a",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1100,
        "y": 1100,
        "wires": []
    },
    {
        "id": "705afdec990a3871",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1530,
        "y": 1380,
        "wires": [
            [
                "5c8690ba50b87591"
            ]
        ]
    },
    {
        "id": "5c8690ba50b87591",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "JSON parsen",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1800,
        "y": 1380,
        "wires": [
            [
                "e89d4e8f592e634e",
                "8055c903fea756b0"
            ]
        ]
    },
    {
        "id": "8055c903fea756b0",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Array speichern",
        "func": "// msg.payload ist das komplette Kunden/Ordner-Array\nflow.set('kundenStammdaten', msg.payload); // speichere das Array im Flow-Kontext\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "e89d4e8f592e634e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Daten aufbereiten",
        "func": "\nlet selectedKunde = flow.get('selectedKunde');\nmsg.payload = msg.payload.map(k => ({\n    kunde: k.kunde,\n    ordner_anzahl: k.ordner ? k.ordner.length : 0\n}));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "4ccb8d901b44f6a9",
        "type": "debug",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 340,
        "wires": []
    },
    {
        "id": "pt_status_in",
        "type": "http in",
        "z": "24039523dcf573b0",
        "name": "",
        "url": "/api/protools/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "a2dad58a4cc5f504"
            ]
        ]
    },
    {
        "id": "pt_status_exec",
        "type": "exec",
        "z": "24039523dcf573b0",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check Pro Tools",
        "x": 720,
        "y": 60,
        "wires": [
            [
                "pt_status_parse"
            ],
            [],
            []
        ]
    },
    {
        "id": "pt_status_parse",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "to JSON",
        "func": "const out = (msg.payload||'').toString().trim().toLowerCase();\nmsg.payload = { online: out === 'true' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 60,
        "wires": [
            [
                "pt_status_out"
            ]
        ]
    },
    {
        "id": "pt_status_out",
        "type": "http response",
        "z": "24039523dcf573b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 60,
        "wires": []
    },
    {
        "id": "pt_presets_in",
        "type": "http in",
        "z": "24039523dcf573b0",
        "name": "",
        "url": "/api/protools/presets",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "b3dcee3be9daa59d",
                "37f63096637fe26d"
            ]
        ]
    },
    {
        "id": "a2dad58a4cc5f504",
        "type": "OS",
        "z": "24039523dcf573b0",
        "name": "",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "e70a29f8781adf94"
            ]
        ]
    },
    {
        "id": "e70a29f8781adf94",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Befehle je nach OS",
        "func": "const platform = (msg?.payload?.platform) || process.platform;\n\nif (platform === 'win32') {\n    // Windows: prüft auf Prozess \"ProTools\"\n    msg.command = `powershell -NoProfile -Command \"Get-Process | Where-Object { $_.ProcessName -eq 'ProTools' } | Measure | ForEach-Object { $_.Count -gt 0 }\"`;\n} else if (platform === 'darwin') {\n    // macOS: prüft auf Prozess \"Pro Tools\"\n    msg.command = `osascript -e 'tell application \"System Events\" to (exists process \"Pro Tools\")'`;\n} else {\n    msg.command = `echo OS nicht unterstützt`;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            [
                "pt_status_exec"
            ]
        ]
    },
    {
        "id": "cf5b4e3d9f7b919f",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Auswahl",
        "func": "// ===== Robust body lesen (String oder Objekt) =====\nlet body = msg.payload;\nif (Buffer.isBuffer(body)) {\n    try { body = JSON.parse(body.toString('utf8')); } catch { body = {}; }\n} else if (typeof body === 'string') {\n    try { body = JSON.parse(body); } catch { body = {}; }\n} else if (typeof body !== 'object' || body === null) {\n    body = {};\n}\n\n// Erwartetes Format:\n// { action: \"store\" | \"recall\", categories: { cat1: [{key}], cat2: [{key,quick?}], cat3: [{key}] } }\nconst action = (body.action || '').toLowerCase();\nconst cats = body.categories || {};\nconst cat1 = Array.isArray(cats.cat1) ? cats.cat1 : [];\nconst cat2 = Array.isArray(cats.cat2) ? cats.cat2 : [];\nconst cat3 = Array.isArray(cats.cat3) ? cats.cat3 : [];\n\n// ===== Globale Pfade & User holen =====\nconst PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst PathPTUser = global.get('PathPTUser') || '';\nconst activeUser = global.get('activeUser') || '';\n\n// ===== 9 Ausgänge vorbereiten =====\nconst outs = Array(9).fill(null);\n\n// kleine Helper zum Bauen der Payloads\nconst base = { action, PathMitarbeiter, PathPTUser, activeUser };\n\n// Mapping-Helfer: setzt outs[index] wenn Key in der Liste vorhanden ist\nfunction handleCat(items, matchKey, outIndex, extra = {}) {\n    const found = items.find(it => (it?.key || '').toLowerCase() === matchKey);\n    if (!found) return;\n    // quick bei cat2 optional durchreichen\n    outs[outIndex] = {\n        ...msg,\n        payload: { ...base, quick: !!found.quick, ...extra }\n    };\n}\n\n// ===== cat1 =====\nhandleCat(cat1, 'templates', 0);\nhandleCat(cat1, 'trackpresets', 1);\nhandleCat(cat1, 'pluginsettings', 2);\n\n// ===== cat2 =====\n// Achtung: deine UI liefert \"clipFxPresets\" → wir normalisieren auf lowercase:\nhandleCat(cat2, 'fadepresets', 3);\nhandleCat(cat2, 'clipfxpresets', 4);\nhandleCat(cat2, 'memorylocation', 5);\nhandleCat(cat2, 'trackdatatorecall', 6);\n\n// ===== cat3 =====\nhandleCat(cat3, 'keyboardshortcuts', 7);\nhandleCat(cat3, 'pluginmaps', 8);\n\n// Falls gar nichts ausgewählt war, kannst du optional 400 melden –\n// ich lasse das absichtlich als \"kein Output = kein Job\".\n// ganz am Ende der Funktion:\nmsg.job = msg.job || {};\nmsg.job.action = action;   // \"store\" | \"recall\"\n\nreturn outs;",
        "outputs": 9,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1140,
        "wires": [
            [
                "c3540eab39bc2683"
            ],
            [
                "a266be18af804bb0"
            ],
            [
                "15ed22f12517848f"
            ],
            [
                "2f9a0a1f4a3c0d01"
            ],
            [
                "926c052763c39e29"
            ],
            [
                "defb410130f27b91"
            ],
            [
                "ad680f0fcc01ddb6"
            ],
            [
                "97634934f5c4429f"
            ],
            []
        ],
        "outputLabels": [
            "Templates",
            "Track Presets",
            "Plug-In Settings",
            "Fade Presets",
            "Clip Effects Presets",
            "Memory Location Presets",
            "Track Data to Recall Presets",
            "Keyboard Shortcuts",
            "Plug-In Maps"
        ]
    },
    {
        "id": "c3540eab39bc2683",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Template Funktion",
        "func": "// Template Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action } = msg.payload || {};\n    msg.category = \"templates\";\n\n    // startCat nur 1x nebenbei senden\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    if (action === \"recall\") {\n        msg.templateSrc = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\n        msg.templateDest = `${PathPTUser}/Session Templates/${activeUser}`;\n        return [msg, startCat];\n    } else if (action === \"store\") {\n        msg.templateSrc = `${PathPTUser}/Session Templates/${activeUser}`;\n        msg.templateDest = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\n        return [msg, startCat];\n    }\n\n    // ungültige Aktion\n    return [null, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"templates\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "dde28766e8809a51"
            ],
            [
                "e60e5ab898a0a6de"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "8d053651e71a88d0",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Copy Templates",
        "source": "templateSrc",
        "sourceType": "msg",
        "target": "templateDest",
        "targetType": "msg",
        "x": 1680,
        "y": 300,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "801fc15ef3777ecb",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Plugin Pfad durchsuchen",
        "path": "payload.PluginPath",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 930,
        "y": 700,
        "wires": [
            [
                "f9ae2e0d8b851b95"
            ]
        ]
    },
    {
        "id": "f9ae2e0d8b851b95",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Split Plugin-Ordner",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1150,
        "y": 700,
        "wires": [
            [
                "27d01ea6c29f13b3"
            ]
        ]
    },
    {
        "id": "27d01ea6c29f13b3",
        "type": "change",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Pfad zum user-Ordner bauen",
        "rules": [
            {
                "t": "set",
                "p": "payload.pluginName",
                "pt": "msg",
                "to": "files",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.userDir",
                "pt": "msg",
                "to": "payload.PluginPath & \"/\" & files & \"/\" & payload.activeUser",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 700,
        "wires": [
            [
                "3a65d89c850f97fd"
            ]
        ]
    },
    {
        "id": "717547741be93b38",
        "type": "fs-ops-stats",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.userDir",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1580,
        "y": 660,
        "wires": [
            [
                "88826b980a9a9e60"
            ]
        ]
    },
    {
        "id": "88826b980a9a9e60",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Ist ein Verzeichnis?",
        "func": "// Prüfen ob Stat-Wert ein Verzeichnis ist\nif (msg.stats && typeof msg.stats.mode === \"number\") {\n    if ((msg.stats.mode & 57344) === 16384) {\n        // Ist ein Verzeichnis\n        return msg;\n    }\n}\n// Kein Verzeichnis: Nachricht verwerfen\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 700,
        "wires": [
            [
                "34ab116ea9fc7b9a"
            ]
        ]
    },
    {
        "id": "d59e642b1764df76",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Plug-In Settings Funktion",
        "func": "let PathMitarbeiter = msg.payload.PathMitarbeiter;\nlet activeUser = msg.payload.activeUser;\nlet pluginName = msg.payload.pluginName;\nlet userDir = msg.payload.userDir;\n\n// Ohne passenden payload keine Aktion\nif (msg.payload.action === \"recall\") {\n    msg.pluginsettingSrc = `${PathMitarbeiter}/${activeUser}/immo24/pluginsettings/${pluginName}`;\n    msg.pluginsettingDest = `${userDir}`;\n    return msg;\n} else if (msg.payload.action === \"store\") {\n    msg.pluginsettingSrc = `${userDir}`;\n    msg.pluginsettingDest = `${PathMitarbeiter}/${activeUser}/immo24/pluginsettings/${pluginName}`;\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 700,
        "wires": [
            [
                "46d02e8955535559"
            ]
        ]
    },
    {
        "id": "1c85a7b73c4d0534",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Copy Plug-In Settings",
        "source": "pluginsettingSrc",
        "sourceType": "msg",
        "target": "pluginsettingDest",
        "targetType": "msg",
        "x": 2520,
        "y": 700,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "926c052763c39e29",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Clip Effects Preset Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Clip Effects Presets`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets/Quick Presets`;\n\n    msg.category = \"clipfxpresets\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.clipeffectSrc = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets`;\n        msg.clipeffectDest = `${rootDir}/${activeUser}`;\n        msg.clipeffectQuickDest = rootDir;\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.tfx`,\n                    destname: `Quick Preset ${i}.tfx`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.clipeffectSrc = `${rootDir}/${activeUser}`;\n        msg.clipeffectDest = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets`;\n        msg.clipeffectQuickDest = archiveDir;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.tfx`,\n                    destname: `Quick Preset ${i}.tfx`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"clipfxpresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "eee3ed5815c3c52d",
                "1a5269fddad889e9"
            ],
            [
                "1a3576d54deb10e1"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "501cb80a18e2101f",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1140,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "eee3ed5815c3c52d",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Pfad durchsuchen",
        "path": "clipeffectSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1100,
        "wires": [
            [
                "7f28c8932dfe9550"
            ]
        ]
    },
    {
        "id": "5726ab925fa2402a",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.clipeffectSrc, msg.clipeffectDest\nif (!msg.files || !msg.clipeffectSrc || !msg.clipeffectDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.clipeffectSrc}/${msg.files}`;\nconst itemDest = `${msg.clipeffectDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt clipeffectSrc/Dest -> hier pro Item überschreiben:\nmsg.clipeffectSrc = itemSrc;\nmsg.clipeffectDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1080,
        "wires": [
            [
                "1f67eb9de416c2b3"
            ]
        ]
    },
    {
        "id": "ccccb265ef4fb1dc",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1320,
        "wires": [
            [
                "af2ab063726281c3"
            ]
        ]
    },
    {
        "id": "defb410130f27b91",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Memory Location Preset Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Memory Location Window`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets/Quick Presets`;\n\n    msg.category = \"memoryLocation\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.memorylocationSrc = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets`;\n        msg.memorylocationDest = `${rootDir}/${activeUser}`;\n        msg.memorylocationQuickDest = rootDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.memorylocationSrc = `${rootDir}/${activeUser}`;\n        msg.memorylocationDest = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets`;\n        msg.memorylocationQuickDest = archiveDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"memoryLocation\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1380,
        "wires": [
            [
                "8e5fd46df3643f82",
                "9813dbafe6b048da"
            ],
            [
                "3882283dafc8f7ae"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "917f910377da205a",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Copy Memory Location Presets",
        "source": "memorylocationSrc",
        "sourceType": "msg",
        "target": "memorylocationDest",
        "targetType": "msg",
        "x": 2110,
        "y": 1320,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "c8ca1d82140028e8",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1380,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "dd0e50f3c1df94a2",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1400,
        "wires": [
            [
                "mem_quick_src_exists"
            ]
        ]
    },
    {
        "id": "8e5fd46df3643f82",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Pfad durchsuchen",
        "path": "memorylocationSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1340,
        "wires": [
            [
                "7c5744bd352c2266"
            ]
        ]
    },
    {
        "id": "bfc668c714f6589b",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1320,
        "wires": [
            [
                "ccccb265ef4fb1dc"
            ]
        ]
    },
    {
        "id": "af2ab063726281c3",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.memorylocationSrc, msg.memorylocationDest\nif (!msg.files || !msg.memorylocationSrc || !msg.memorylocationDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.memorylocationSrc}/${msg.files}`;\nconst itemDest = `${msg.memorylocationDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt memorylocationSrc/Dest -> hier pro Item überschreiben:\nmsg.memorylocationSrc = itemSrc;\nmsg.memorylocationDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1320,
        "wires": [
            [
                "mem_counter_inc_bulk"
            ]
        ]
    },
    {
        "id": "ad680f0fcc01ddb6",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "TrackData Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Track Data to Recall`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/trackdatarecallpresets/Quick Presets`;\n\n    msg.category = \"trackdatarecall\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.trackdataSrc = `${PathMitarbeiter}/${activeUser}/immo24/trackdatapresets`;\n        msg.trackdataDest = `${rootDir}/${activeUser}`;\n        msg.trackdataQuickDest = rootDir;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.trackdataSrc = `${rootDir}/${activeUser}`;\n        msg.trackdataDest = `${PathMitarbeiter}/${activeUser}/immo24/trackdatapresets`;\n        msg.trackdataQuickDest = archiveDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"trackdatarecall\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1600,
        "wires": [
            [
                "d298d4ce858c6423",
                "83efdb60310b9f66"
            ],
            [
                "716f54db6d32889b"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "2bbec99d791c83db",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Copy TrackData Presets",
        "source": "trackdataSrc",
        "sourceType": "msg",
        "target": "trackdataDest",
        "targetType": "msg",
        "x": 2090,
        "y": 1560,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "f99608698a8bf030",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1620,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "467ae7fcbc6b7735",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1640,
        "wires": [
            [
                "41005d8cd172bc9d"
            ]
        ]
    },
    {
        "id": "d298d4ce858c6423",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Pfad durchsuchen",
        "path": "trackdataSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1560,
        "wires": [
            [
                "6abd7f2dbd599246"
            ]
        ]
    },
    {
        "id": "4de5265817a08368",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1560,
        "wires": [
            [
                "b58c7b938f4c91b8"
            ]
        ]
    },
    {
        "id": "b58c7b938f4c91b8",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1560,
        "wires": [
            [
                "1df69ea1c23c0c77"
            ]
        ]
    },
    {
        "id": "1df69ea1c23c0c77",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.trackdataSrc, msg.trackdataDest\nif (!msg.files || !msg.trackdataSrc || !msg.trackdataDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.trackdataSrc}/${msg.files}`;\nconst itemDest = `${msg.trackdataDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt trackdataSrc/Dest -> hier pro Item überschreiben:\nmsg.trackdataSrc = itemSrc;\nmsg.trackdataDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1560,
        "wires": [
            [
                "91137af6b7515c1b"
            ]
        ]
    },
    {
        "id": "97634934f5c4429f",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Keyboard Shortcut Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Keyboard Shortcuts`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortcuts/Quick Presets`;\n\n    msg.category = \"keyboardshortcuts\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.kbshortcutSrc = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortscuts`;\n        msg.kbshortcutDest = `${rootDir}/${activeUser}`;\n        msg.kbshortcutQuickDest = rootDir;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.kbshortcutSrc = `${rootDir}/${activeUser}`;\n        msg.kbshortcutDest = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortcuts`;\n        msg.kbshortcutQuickDest = archiveDir;\n\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"keyboardshortcuts\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1840,
        "wires": [
            [
                "9e68a0c8e7d4679a",
                "54f5060cfecb013f"
            ],
            [
                "673b872c6bbacb4a"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "9e68a0c8e7d4679a",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Pfad durchsuchen",
        "path": "kbshortcutSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1780,
        "wires": [
            [
                "d3eacd5953e17d84"
            ]
        ]
    },
    {
        "id": "63f6495b795634b9",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.kbshortcutSrc, msg.kbshortcutDest\nif (!msg.files || !msg.kbshortcutSrc || !msg.kbshortcutDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.kbshortcutSrc}/${msg.files}`;\nconst itemDest = `${msg.kbshortcutDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt kbshortcutSrc/Dest -> hier pro Item überschreiben:\nmsg.kbshortcutSrc = itemSrc;\nmsg.kbshortcutDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1780,
        "wires": [
            [
                "e8576083d81a103e"
            ]
        ]
    },
    {
        "id": "2f9a0a1f4a3c0d01",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Fade Presets Funktion",
        "func": "// Fade Presets Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action, quick } = msg.payload || {};\n    if (!PathMitarbeiter || !PathPTUser || !activeUser || !action) return [null, null];\n\n    msg.category = \"fadePresets\";\n\n    // --- startCat NUR 1x pro Job+Kategorie senden (Flow-Flag) ---\n    let startCat = null;\n    const startKey = `startcat:${msg.job?.id || 'none'}:${msg.category}`;\n    if (!flow.get(startKey) && msg.job && msg.job.id) {\n        flow.set(startKey, true);\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    const rootDir = `${PathPTUser}/Fade Presets`;\n    const archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/fadepresets`;\n    const folders = [\"Batch Fade\", \"Cross Fade\", \"Fade In\", \"Fade Out\"];\n\n    // Quelle/Ziel für Bulk\n    if (action === \"recall\") {\n        msg.fadeSrc = archiveDir;\n        msg.fadeDest = rootDir;\n    } else if (action === \"store\") {\n        msg.fadeSrc = rootDir;\n        msg.fadeDest = archiveDir;\n    } else {\n        return [null, startCat];\n    }\n\n    // Quick Presets vorbereiten (separat kopieren)\n    const doQuick = (quick === true || quick === \"true\");\n    msg.quickPresets = [];\n    if (doQuick) {\n        for (const folder of folders) {\n            for (let i = 1; i <= 5; i++) {\n                if (action === \"recall\") {\n                    msg.quickPresets.push({\n                        src: `${archiveDir}/${folder}/Quick Preset ${i}.fdpreset`,\n                        destname: `Quick Preset ${i}.fdpreset`,\n                        destpath: `${rootDir}/${folder}`\n                    });\n                } else {\n                    msg.quickPresets.push({\n                        src: `${rootDir}/${folder}/Quick Preset ${i}.fdpreset`,\n                        destname: `Quick Preset ${i}.fdpreset`,\n                        destpath: `${archiveDir}/${folder}`\n                    });\n                }\n            }\n        }\n    }\n\n    // Ordnerliste für Bulk übergeben\n    msg.folders = folders;\n\n    return [msg, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"fadePresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 880,
        "wires": [
            [
                "e0e4b5c2b9a1d7f5",
                "0c9f2f7f2db2d1f9"
            ],
            [
                "0e22a946caa8156b"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "0c9f2f7f2db2d1f9",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Split Ordner (4x)",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "folders",
        "x": 820,
        "y": 880,
        "wires": [
            [
                "d9b7b4ec5f1f3e7e"
            ]
        ]
    },
    {
        "id": "d9b7b4ec5f1f3e7e",
        "type": "change",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "scanSrc / destFolder bauen",
        "rules": [
            {
                "t": "set",
                "p": "scanFolder",
                "pt": "msg",
                "to": "folders",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "scanSrc",
                "pt": "msg",
                "to": "fadeSrc & \"/\" & folders",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "destFolder",
                "pt": "msg",
                "to": "fadeDest & \"/\" & folders",
                "tot": "jsonata"
            }
        ],
        "x": 1040,
        "y": 880,
        "wires": [
            [
                "a35b9f8b5f3c9a11"
            ]
        ]
    },
    {
        "id": "a35b9f8b5f3c9a11",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "List .fdpreset im Ordner",
        "path": "scanSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 1290,
        "y": 880,
        "wires": [
            [
                "f8f7f0fb2f6a5b33"
            ]
        ]
    },
    {
        "id": "f8f7f0fb2f6a5b33",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Split Dateien",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1490,
        "y": 880,
        "wires": [
            [
                "2f0a7a3d7b0c44a2"
            ]
        ]
    },
    {
        "id": "2f0a7a3d7b0c44a2",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Presets filtern",
        "func": "// erwartet: msg.files (Dateiname), msg.scanSrc, msg.destFolder\nconst name = msg.files;\nif (!name || !msg.scanSrc || !msg.destFolder) return null;\n\n// nur .fdpreset\nconst isFdpreset = /\\.fdpreset$/i.test(name);\n// Quick Presets ausschließen\nconst isQuick = /^Quick Preset\\s+[1-5]\\.fdpreset$/i.test(name);\n\nif (!isFdpreset || isQuick) return null;\n\nmsg.fileSrc   = `${msg.scanSrc}/${name}`;\nmsg.fileName  = name;\n// Zielordner existiert ggf. noch nicht – fs-ops-copy legt Datei im destFolder/destFilename ab\nmsg.destFolder = msg.destFolder;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 880,
        "wires": [
            [
                "22c35c48819fd2c5"
            ]
        ]
    },
    {
        "id": "3c1e6a6d7b1b2c44",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Copy .fdpreset (Bulk)",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "fileSrc",
        "sourceFilenameType": "msg",
        "destPath": "destFolder",
        "destPathType": "msg",
        "destFilename": "fileName",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 2140,
        "y": 880,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "e0e4b5c2b9a1d7f5",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Split Quick Presets",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "bd97d6f6ce673d8c"
            ]
        ]
    },
    {
        "id": "5a8d0f1b3e2c4d66",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Presets kopieren (5×4)",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1540,
        "y": 920,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "f1ddf879ad3e29dc",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "templateDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1260,
        "y": 320,
        "wires": [
            [
                "0177cdfae37f423d"
            ]
        ]
    },
    {
        "id": "dde28766e8809a51",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "templateDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "0177cdfae37f423d"
            ],
            [
                "f1ddf879ad3e29dc"
            ]
        ]
    },
    {
        "id": "9813dbafe6b048da",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "memorylocationQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "dd0e50f3c1df94a2"
            ],
            [
                "4b6d8a94e30892b5"
            ]
        ]
    },
    {
        "id": "4b6d8a94e30892b5",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "memorylocationQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1440,
        "wires": [
            [
                "dd0e50f3c1df94a2"
            ]
        ]
    },
    {
        "id": "37f63096637fe26d",
        "type": "debug",
        "z": "24039523dcf573b0",
        "name": "POST",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 120,
        "wires": []
    },
    {
        "id": "9bb5182f2a01f7f2",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "memorylocationDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1360,
        "wires": [
            [
                "bfc668c714f6589b"
            ]
        ]
    },
    {
        "id": "7c5744bd352c2266",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "memorylocationDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1340,
        "wires": [
            [
                "bfc668c714f6589b"
            ],
            [
                "9bb5182f2a01f7f2"
            ]
        ]
    },
    {
        "id": "b3dcee3be9daa59d",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Job ID",
        "func": "// 2 Outputs: [weiter zum Flow, Start-Report an Aggregator]\nconst id = Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\n\nmsg.job = {\n    id,\n    started: new Date().toISOString()\n};\n\n// HTTP response Handle zwischenspeichern\nflow.set(\"job:\" + id + \":res\", msg.res);\n\n// 1) Normal weiter\nconst next = RED.util.cloneMessage(msg);\n\n// 2) Start-Event (optional, registriert res auch im Aggregator)\nconst start = {\n    topic: \"report\",\n    payload: { type: \"start\" },\n    job: msg.job,\n    res: msg.res\n};\n\nreturn [next, start];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 50,
        "y": 1040,
        "wires": [
            [
                "cf5b4e3d9f7b919f",
                "fc844a7e96cc53cb"
            ],
            [
                "8c9f71b21e0933ff"
            ]
        ],
        "outputLabels": [
            "Auswahl",
            "Report"
        ]
    },
    {
        "id": "c031ce02b7ae1ff1",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Aggregator",
        "func": "// Aggregiert ohne Counts, nur Flags je Kategorie\nconst key = \"job:\" + (msg.job?.id || \"none\");\nlet st = flow.get(key) || {\n  started: msg.job?.started || new Date().toISOString(),\n  expect: {},    // cat → true (gestartet)\n  done: {},      // cat → true (fertig)\n  hasError: {},  // cat → true (Fehler aufgetreten)\n  hasSkipped: {} // cat → true (irgendwas übersprungen)\n};\n\n// 'start' kann res registrieren\nif (msg.topic === \"report\" && msg.payload?.type === \"start\" && msg.res) {\n  flow.set(key + \":res\", msg.res);\n}\n\nif (msg.topic === \"report\" && msg.payload) {\n  const p = msg.payload;\n\n  if (p.type === \"startCat\") {\n    const cat = p.category || \"unknown\";\n    st.expect[cat] = true;\n  }\n\n  if (p.type === \"skipped\") {\n    const cat = p.category || \"unknown\";\n    st.hasSkipped[cat] = true;\n  }\n\n  if (p.type === \"error\") {\n    const cat = p.category || \"unknown\";\n    st.hasError[cat] = true;\n  }\n\n  if (p.type === \"doneCat\") {\n    const cat = p.category || \"unknown\";\n    st.done[cat] = true;\n  }\n}\n\n// sichern\nflow.set(key, st);\n\n// fertig, wenn alle erwarteten Kategorien done sind\nconst expectedCats = Object.keys(st.expect);\nconst finished = expectedCats.length > 0 && expectedCats.every(cat => st.done[cat]);\n\nconst progressMsg = { ...msg, aggregated: st };\nif (finished) {\n  const finalizeMsg = { ...msg, aggregated: st, _ready: true };\n  return [progressMsg, finalizeMsg];\n}\nreturn [progressMsg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1200,
        "wires": [
            [],
            [
                "89b0d90d58155de5"
            ]
        ],
        "outputLabels": [
            "Progress",
            "Finalize"
        ]
    },
    {
        "id": "89b0d90d58155de5",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Finalize → HTTP response",
        "func": "// Nur antworten, wenn _ready\nif (!msg._ready) return null;\n\nconst key = \"job:\" + (msg.job?.id || \"none\");\nconst st = msg.aggregated || flow.get(key) || { expect: {}, done: {}, hasError: {}, hasSkipped: {} };\n\n// Kategorien sortiert (optional)\nconst cats = Object.keys(st.expect);\n\n// details ohne Counts\nconst details = cats.map(cat => {\n  const error = !!st.hasError[cat];\n  const skipped = !!st.hasSkipped[cat];\n\n  const status = error ? \"error\" : (skipped ? \"partial\" : \"ok\");\n  const note = status === \"partial\" ? \"some items were not present\" : undefined;\n\n  return { category: cat, status, note };\n});\n\n// overall + HTTP-Status\nconst hasError = details.some(d => d.status === \"error\");\nconst hasPartial = details.some(d => d.status === \"partial\");\nconst overall = hasError ? \"error\" : \"ok\";\n\n// res holen\nconst res = flow.get(key + \":res\");\nif (!res) {\n  flow.set(key, null);\n  flow.set(key + \":res\", null);\n  return null;\n}\n\n// Aktion, die wir schon in \"Auswahl\" auf msg.job.action gesetzt haben\nconst action = msg.job?.action || \"unknown\";\n\nmsg.res = res;\n// -> 207 jetzt auch bei \"partial\", nicht nur error\nmsg.statusCode = (hasError || hasPartial) ? 207 : 200;\n\nmsg.payload = {\n  action,             // \"store\" | \"recall\"\n  overall,            // \"ok\" | \"error\"\n  details,            // [{ category, status, note? }]\n  jobId: msg.job?.id,\n  started: st.started,\n  finished: new Date().toISOString(),\n  // Text fürs UI (Frontend nutzt bevorzugt \"message\")\n  message: hasError\n    ? \"Vorgang abgeschlossen – Fehler aufgetreten\"\n    : (hasPartial\n      ? \"Vorgang abgeschlossen – mit Hinweisen\"\n      : (action === \"store\" ? \"Store erfolgreich\" : \"Recall erfolgreich\"))\n};\n\n// Cleanup\nflow.set(key, null);\nflow.set(key + \":res\", null);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1200,
        "wires": [
            [
                "70e019b4dabfee92",
                "cf04cf1b1b45cbc5"
            ]
        ]
    },
    {
        "id": "70e019b4dabfee92",
        "type": "http response",
        "z": "24039523dcf573b0",
        "name": "HTTP 200/207",
        "statusCode": "",
        "headers": {},
        "x": 3340,
        "y": 1200,
        "wires": []
    },
    {
        "id": "cf04cf1b1b45cbc5",
        "type": "debug",
        "z": "24039523dcf573b0",
        "name": "HTTP RESPONSE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 1260,
        "wires": []
    },
    {
        "id": "fc844a7e96cc53cb",
        "type": "debug",
        "z": "24039523dcf573b0",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 800,
        "wires": []
    },
    {
        "id": "958a9bcb116f0244",
        "type": "link in",
        "z": "24039523dcf573b0",
        "name": "REPORT IN",
        "links": [
            "8c9f71b21e0933ff",
            "3882283dafc8f7ae",
            "716f54db6d32889b",
            "1a3576d54deb10e1",
            "673b872c6bbacb4a",
            "e60e5ab898a0a6de",
            "b5c5c6741c0f3ad0",
            "0e22a946caa8156b",
            "97dbf2e19dec5ed0"
        ],
        "x": 2755,
        "y": 1260,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "8c9f71b21e0933ff",
        "type": "link out",
        "z": "24039523dcf573b0",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 185,
        "y": 880,
        "wires": []
    },
    {
        "id": "mem_counter_inc_bulk",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1320,
        "wires": [
            [
                "917f910377da205a"
            ]
        ]
    },
    {
        "id": "mem_counter_dec_done",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Counter -- & DONE",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nlet n = flow.get(key) || 0;\nif (n > 0) n--; else n = 0;\nflow.set(key, n);\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: \"report\",\n    payload: { type: \"doneCat\", category: cat },\n    job: msg.job\n  });\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 2710,
        "y": 1140,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "mem_quick_src_exists",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1400,
        "wires": [
            [
                "mem_counter_inc_quick"
            ],
            [
                "mem_report_skipped"
            ]
        ]
    },
    {
        "id": "mem_counter_inc_quick",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1380,
        "wires": [
            [
                "c8ca1d82140028e8"
            ]
        ]
    },
    {
        "id": "mem_report_skipped",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "bf4eee564e09bce7",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1420,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "3882283dafc8f7ae",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1460,
        "wires": []
    },
    {
        "id": "e2f3a4b5c6d7e8f1",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "CATCH memoryLocation",
        "scope": [
            "8e5fd46df3643f82",
            "917f910377da205a",
            "c8ca1d82140028e8",
            "4b6d8a94e30892b5",
            "9bb5182f2a01f7f2",
            "7c5744bd352c2266",
            "9813dbafe6b048da"
        ],
        "uncaught": false,
        "x": 610,
        "y": 1420,
        "wires": [
            [
                "f1e2d3c4b5a69788"
            ]
        ]
    },
    {
        "id": "f1e2d3c4b5a69788",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'memoryLocation';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "3882283dafc8f7ae"
            ]
        ]
    },
    {
        "id": "585a9df6e2d4fc8f",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "CATCH trackdata",
        "scope": [
            "2bbec99d791c83db",
            "f99608698a8bf030",
            "0390d6ddd4e2c499",
            "32c6fc7eee758dc2",
            "6abd7f2dbd599246",
            "d298d4ce858c6423",
            "83efdb60310b9f66"
        ],
        "uncaught": false,
        "x": 580,
        "y": 1640,
        "wires": [
            [
                "5ce80ee7862fa202"
            ]
        ]
    },
    {
        "id": "5ce80ee7862fa202",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'trackdatarecall';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1680,
        "wires": [
            [
                "716f54db6d32889b"
            ]
        ]
    },
    {
        "id": "6abd7f2dbd599246",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackdataDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1560,
        "wires": [
            [
                "4de5265817a08368"
            ],
            [
                "0390d6ddd4e2c499"
            ]
        ]
    },
    {
        "id": "0390d6ddd4e2c499",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackdataDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1600,
        "wires": [
            [
                "4de5265817a08368"
            ]
        ]
    },
    {
        "id": "91137af6b7515c1b",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1560,
        "wires": [
            [
                "2bbec99d791c83db"
            ]
        ]
    },
    {
        "id": "83efdb60310b9f66",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackdataQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1640,
        "wires": [
            [
                "467ae7fcbc6b7735"
            ],
            [
                "32c6fc7eee758dc2"
            ]
        ]
    },
    {
        "id": "32c6fc7eee758dc2",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackdataQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1680,
        "wires": [
            [
                "467ae7fcbc6b7735"
            ]
        ]
    },
    {
        "id": "41005d8cd172bc9d",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1640,
        "wires": [
            [
                "8cb029efa37424c0"
            ],
            [
                "b45491f8febc2229"
            ]
        ]
    },
    {
        "id": "8cb029efa37424c0",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1620,
        "wires": [
            [
                "f99608698a8bf030"
            ]
        ]
    },
    {
        "id": "b45491f8febc2229",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "21da7a611532cde9",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1660,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "716f54db6d32889b",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4ffb2321785ac98b",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "CATCH clipeffects",
        "scope": [
            "eee3ed5815c3c52d",
            "1a5269fddad889e9",
            "7f28c8932dfe9550",
            "1961473680376c87",
            "9b7306709391a052",
            "501cb80a18e2101f",
            "5659f0cda1297389"
        ],
        "uncaught": false,
        "x": 590,
        "y": 1180,
        "wires": [
            [
                "6f4c05fec7be2cb3"
            ]
        ]
    },
    {
        "id": "6f4c05fec7be2cb3",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'clipfxpresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1220,
        "wires": [
            [
                "1a3576d54deb10e1"
            ]
        ]
    },
    {
        "id": "7f28c8932dfe9550",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "clipeffectDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1100,
        "wires": [
            [
                "ecac37490d9bab96"
            ],
            [
                "9b7306709391a052"
            ]
        ]
    },
    {
        "id": "ecac37490d9bab96",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1080,
        "wires": [
            [
                "c9e0e810f99a762b"
            ]
        ]
    },
    {
        "id": "c9e0e810f99a762b",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1080,
        "wires": [
            [
                "5726ab925fa2402a"
            ]
        ]
    },
    {
        "id": "1f67eb9de416c2b3",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1080,
        "wires": [
            [
                "5659f0cda1297389"
            ]
        ]
    },
    {
        "id": "5659f0cda1297389",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Copy Clip Effects Presets",
        "source": "clipeffectSrc",
        "sourceType": "msg",
        "target": "clipeffectDest",
        "targetType": "msg",
        "x": 2090,
        "y": 1080,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "9b7306709391a052",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "clipeffectDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1120,
        "wires": [
            [
                "ecac37490d9bab96"
            ]
        ]
    },
    {
        "id": "db8c2123cd78a2a1",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1160,
        "wires": [
            [
                "47f58a92faa4b273"
            ],
            [
                "4f8384d0182832a6"
            ]
        ]
    },
    {
        "id": "8ed53db524f61578",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1160,
        "wires": [
            [
                "db8c2123cd78a2a1"
            ]
        ]
    },
    {
        "id": "1961473680376c87",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "clipeffectQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1200,
        "wires": [
            [
                "8ed53db524f61578"
            ]
        ]
    },
    {
        "id": "1a5269fddad889e9",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "clipeffectQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1180,
        "wires": [
            [
                "8ed53db524f61578"
            ],
            [
                "1961473680376c87"
            ]
        ]
    },
    {
        "id": "1a3576d54deb10e1",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1220,
        "wires": []
    },
    {
        "id": "47f58a92faa4b273",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1140,
        "wires": [
            [
                "501cb80a18e2101f"
            ]
        ]
    },
    {
        "id": "4f8384d0182832a6",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "70677eb1b82c5a42",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1180,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "f149ab4d6c3361d7",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "CATCH trackdata",
        "scope": [
            "2bbec99d791c83db",
            "f99608698a8bf030",
            "0390d6ddd4e2c499",
            "32c6fc7eee758dc2",
            "6abd7f2dbd599246",
            "d298d4ce858c6423",
            "83efdb60310b9f66"
        ],
        "uncaught": false,
        "x": 580,
        "y": 1880,
        "wires": [
            [
                "ec8625296b55c237"
            ]
        ]
    },
    {
        "id": "ec8625296b55c237",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'keyboardshortcuts';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1920,
        "wires": [
            [
                "673b872c6bbacb4a"
            ]
        ]
    },
    {
        "id": "673b872c6bbacb4a",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1920,
        "wires": []
    },
    {
        "id": "d3eacd5953e17d84",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "kbshortcutDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1780,
        "wires": [
            [
                "bda8dd2c31472a75"
            ],
            [
                "983f0f1fddf2f572"
            ]
        ]
    },
    {
        "id": "bda8dd2c31472a75",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1780,
        "wires": [
            [
                "5c7b329f612ecf44"
            ]
        ]
    },
    {
        "id": "5c7b329f612ecf44",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1780,
        "wires": [
            [
                "63f6495b795634b9"
            ]
        ]
    },
    {
        "id": "983f0f1fddf2f572",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "kbshortcutDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1820,
        "wires": [
            [
                "bda8dd2c31472a75"
            ]
        ]
    },
    {
        "id": "e8576083d81a103e",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1780,
        "wires": [
            [
                "916a53a295dcad47"
            ]
        ]
    },
    {
        "id": "916a53a295dcad47",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Copy Keyboard Shortcuts",
        "source": "kbshortcutSrc",
        "sourceType": "msg",
        "target": "kbshortcutDest",
        "targetType": "msg",
        "x": 2090,
        "y": 1780,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "54f5060cfecb013f",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "kbshortcutQuickDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1860,
        "wires": [
            [
                "0a7ff522ecc866b5"
            ],
            [
                "0f74cb45dd82a5ba"
            ]
        ]
    },
    {
        "id": "0a7ff522ecc866b5",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1860,
        "wires": [
            [
                "5b841c6ebce3b6fa"
            ]
        ]
    },
    {
        "id": "0f74cb45dd82a5ba",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "kbshortcutQuickDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1900,
        "wires": [
            [
                "0a7ff522ecc866b5"
            ]
        ]
    },
    {
        "id": "5b841c6ebce3b6fa",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1860,
        "wires": [
            [
                "26a33c971f7b20c7"
            ],
            [
                "b938dced525b1034"
            ]
        ]
    },
    {
        "id": "26a33c971f7b20c7",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1840,
        "wires": [
            [
                "0cfb6f4a3d4d0171"
            ]
        ]
    },
    {
        "id": "b938dced525b1034",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "7ca6f5ba8382e25f",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1880,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "0cfb6f4a3d4d0171",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1840,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "e60e5ab898a0a6de",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 1025,
        "y": 380,
        "wires": []
    },
    {
        "id": "0177cdfae37f423d",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1470,
        "y": 300,
        "wires": [
            [
                "8d053651e71a88d0"
            ]
        ]
    },
    {
        "id": "0455b0dd8e131085",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "CATCH template",
        "scope": [
            "8d053651e71a88d0",
            "f1ddf879ad3e29dc",
            "dde28766e8809a51"
        ],
        "uncaught": false,
        "x": 720,
        "y": 340,
        "wires": [
            [
                "c27c1122548ae7b8"
            ]
        ]
    },
    {
        "id": "c27c1122548ae7b8",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'templates';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "e60e5ab898a0a6de"
            ]
        ]
    },
    {
        "id": "a266be18af804bb0",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Track Presets Funktion",
        "func": "// trackkpreset Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action } = msg.payload || {};\n    msg.category = \"trackpresets\";\n\n    // startCat nur 1x nebenbei senden\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    if (action === \"recall\") {\n        msg.trackpresetSrc = `${PathMitarbeiter}/${activeUser}/immo24/trackpresets`;\n        msg.trackpresetDest = `${PathPTUser}/Track Presets/${activeUser}`;\n        return [msg, startCat];\n    } else if (action === \"store\") {\n        msg.trackpresetSrc = `${PathPTUser}/Track Presets/${activeUser}`;\n        msg.trackpresetDest = `${PathMitarbeiter}/${activeUser}/immo24/trackpresets`;\n        return [msg, startCat];\n    }\n\n    // ungültige Aktion\n    return [null, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"trackpresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "122a96507f2fb522"
            ],
            [
                "b5c5c6741c0f3ad0"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "2aaacffa74b4ebdc",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Copy Track Presets",
        "source": "trackpresetSrc",
        "sourceType": "msg",
        "target": "trackpresetDest",
        "targetType": "msg",
        "x": 1690,
        "y": 480,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "1b464dea68e4fbcb",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackpresetDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1260,
        "y": 500,
        "wires": [
            [
                "f319bb1b3f5a5649"
            ]
        ]
    },
    {
        "id": "122a96507f2fb522",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackpresetDest",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "f319bb1b3f5a5649"
            ],
            [
                "1b464dea68e4fbcb"
            ]
        ]
    },
    {
        "id": "b5c5c6741c0f3ad0",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 1025,
        "y": 560,
        "wires": []
    },
    {
        "id": "f319bb1b3f5a5649",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1470,
        "y": 480,
        "wires": [
            [
                "2aaacffa74b4ebdc"
            ]
        ]
    },
    {
        "id": "7bf21c3b7172136f",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "CATCH trackpresets",
        "scope": [
            "2aaacffa74b4ebdc",
            "1b464dea68e4fbcb",
            "122a96507f2fb522"
        ],
        "uncaught": false,
        "x": 730,
        "y": 520,
        "wires": [
            [
                "ddf7a61881eb3321"
            ]
        ]
    },
    {
        "id": "ddf7a61881eb3321",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'trackpresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 560,
        "wires": [
            [
                "b5c5c6741c0f3ad0"
            ]
        ]
    },
    {
        "id": "0e22a946caa8156b",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 885,
        "y": 960,
        "wires": []
    },
    {
        "id": "22c35c48819fd2c5",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1910,
        "y": 880,
        "wires": [
            [
                "3c1e6a6d7b1b2c44",
                "8b5cc652c67109bc"
            ]
        ]
    },
    {
        "id": "bd97d6f6ce673d8c",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1030,
        "y": 920,
        "wires": [
            [
                "cb629a6342c84f4d"
            ],
            [
                "7956ea8999198d23"
            ]
        ]
    },
    {
        "id": "7956ea8999198d23",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "aba0adf3e81a1c0b",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 960,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "cb629a6342c84f4d",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 920,
        "wires": [
            [
                "49e52f42aa4489e3"
            ]
        ]
    },
    {
        "id": "6de7257c65f1e165",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "CATCH fadepresets",
        "scope": [
            "a35b9f8b5f3c9a11",
            "3c1e6a6d7b1b2c44",
            "5a8d0f1b3e2c4d66",
            "bd97d6f6ce673d8c",
            "49e52f42aa4489e3",
            "5d719dadc9ded89c",
            "8b5cc652c67109bc",
            "f7a0dd6dcd042919"
        ],
        "uncaught": false,
        "x": 590,
        "y": 920,
        "wires": [
            [
                "0c2c43bf90d12f7b"
            ]
        ]
    },
    {
        "id": "0c2c43bf90d12f7b",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'fadepresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 960,
        "wires": [
            [
                "0e22a946caa8156b"
            ]
        ]
    },
    {
        "id": "321d3cfaf3ad264f",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "CATCH pluginsettings",
        "scope": [
            "801fc15ef3777ecb",
            "717547741be93b38",
            "1c85a7b73c4d0534",
            "3a65d89c850f97fd",
            "46d02e8955535559",
            "5438f780f5fc4fff"
        ],
        "uncaught": false,
        "x": 600,
        "y": 740,
        "wires": [
            [
                "c122ef2968a5229e"
            ]
        ]
    },
    {
        "id": "c122ef2968a5229e",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'pluginsettings';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 780,
        "wires": [
            [
                "97dbf2e19dec5ed0"
            ]
        ]
    },
    {
        "id": "34ab116ea9fc7b9a",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1950,
        "y": 700,
        "wires": [
            [
                "d59e642b1764df76"
            ]
        ]
    },
    {
        "id": "97dbf2e19dec5ed0",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 885,
        "y": 780,
        "wires": []
    },
    {
        "id": "15ed22f12517848f",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Start CAT",
        "func": "// Plug-In Settings Start (Outputs: 2)\n// Out1 = passthrough, Out2 = startCat / error\ntry {\n    // Grunddaten / Kategorie\n    const { PathPTUser } = msg.payload || {};\n    msg.category = \"pluginsettings\";\n\n    // (Optional) hier weiterhin den Basis-Pfad setzen:\n    msg.payload = msg.payload || {};\n    msg.payload.PluginPath = `${PathPTUser}/Plug-In Settings`;\n\n    // startCat nur 1× pro Job/Kategorie senden\n    let report = null;\n    const jobId = msg.job?.id || \"none\";\n    const key = `startcat:${jobId}:${msg.category}`;\n    if (!flow.get(key) && msg.job && msg.job.id) {\n        flow.set(key, true);\n        report = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // Out1: normal weiter in deinen Scan/Stats-Flow\n    // Out2: startCat (oder null, wenn schon gesendet)\n    return [msg, report];\n\n} catch (err) {\n    // Fehler direkt reporten (Out2)\n    return [null, {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"pluginsettings\", message: err.message },\n        job: msg.job\n    }];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": [
            [
                "801fc15ef3777ecb"
            ],
            [
                "97dbf2e19dec5ed0"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "46d02e8955535559",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "pluginsettingDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 2270,
        "y": 760,
        "wires": [
            [
                "1c85a7b73c4d0534"
            ],
            [
                "5438f780f5fc4fff"
            ]
        ]
    },
    {
        "id": "5438f780f5fc4fff",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "pluginsettingDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2480,
        "y": 780,
        "wires": [
            [
                "1c85a7b73c4d0534"
            ]
        ]
    },
    {
        "id": "3a65d89c850f97fd",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.userDir",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1590,
        "y": 740,
        "wires": [
            [
                "717547741be93b38"
            ],
            []
        ]
    },
    {
        "id": "8b5cc652c67109bc",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "destFolder",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 2050,
        "y": 940,
        "wires": [
            [
                "3c1e6a6d7b1b2c44"
            ],
            [
                "f7a0dd6dcd042919"
            ]
        ]
    },
    {
        "id": "f7a0dd6dcd042919",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "destFolder",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2260,
        "y": 960,
        "wires": [
            [
                "3c1e6a6d7b1b2c44"
            ]
        ]
    },
    {
        "id": "49e52f42aa4489e3",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.destpath",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1520,
        "y": 980,
        "wires": [
            [
                "5a8d0f1b3e2c4d66"
            ],
            [
                "5d719dadc9ded89c"
            ]
        ]
    },
    {
        "id": "5d719dadc9ded89c",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "quickPresets.destpath",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1800,
        "y": 960,
        "wires": [
            [
                "5a8d0f1b3e2c4d66"
            ]
        ]
    }
]