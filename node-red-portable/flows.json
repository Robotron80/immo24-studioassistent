[
    {
        "id": "dc0d981398a42d88",
        "type": "tab",
        "label": "Immo24 Global",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1c585f0d25b86fd",
        "type": "tab",
        "label": "[Modul] Produktionsbuch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "24039523dcf573b0",
        "type": "tab",
        "label": "[Modul] Pro Tools",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "tab_login_api",
        "type": "tab",
        "label": "Login API",
        "disabled": false,
        "info": ""
    },
    {
        "id": "tab_user_main",
        "type": "tab",
        "label": "API /api/user",
        "disabled": false,
        "info": ""
    },
    {
        "id": "tab_user_worker",
        "type": "tab",
        "label": "Worker /api/user",
        "disabled": false,
        "info": ""
    },
    {
        "id": "0e1923748c0d505b",
        "type": "group",
        "z": "dc0d981398a42d88",
        "name": "User",
        "style": {
            "label": true
        },
        "nodes": [
            "7e2571b409d5d436",
            "b0eac16b480b0f6c",
            "7338a31d62aa380a",
            "84c87e607497b34b",
            "f683da12cce40141",
            "07c077a225675b93",
            "13bfc916dbc33c03",
            "a101d0e8677d1f77",
            "76182b64e9b2d9a8",
            "3e3926b522449b96",
            "c327d6b8c52ff001",
            "ae748b2fe00cc633",
            "a56e7a1f4e0144f2",
            "2c322a0a469a0476",
            "2f1651475a302004"
        ],
        "x": 354,
        "y": 979,
        "w": 2012,
        "h": 548
    },
    {
        "id": "2ae494e9447c2087",
        "type": "group",
        "z": "dc0d981398a42d88",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e05512e54561bc65",
            "2eb8ddaff3cdbe23"
        ],
        "x": 368,
        "y": 193,
        "w": 3114,
        "h": 754
    },
    {
        "id": "c0de7eb24d59090d",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "name": "Formular",
        "style": {
            "label": true
        },
        "nodes": [
            "5bb2e238bb454a2c",
            "b5243e0c66e2913c",
            "e328548f79e528dd",
            "3107bbdc156cb1fd",
            "e1a4d541d27ada53",
            "129513f184e0674f",
            "0f8b5377268eb5ef",
            "cd4727e3b14deeff",
            "8386ea793ecb5d63",
            "5c14c4543faf4c94",
            "6ee48779a11bb9b2",
            "e1e51838689893d3",
            "a1b73032b0467d2a",
            "18fb279e655df17d",
            "show_group",
            "65fcec03c7dba8bf",
            "4f8bcb239e8648f0",
            "8d69f8ce150fa10a",
            "5cd50f15353cd326",
            "867b11b1eea5e253",
            "3ecfee9bb798f6ec",
            "18ace834940f05cc",
            "dfcc8cb3d516c81c",
            "943691cfea40756e",
            "0cd05b587161c992",
            "3595a0c70851faf8",
            "ae1e298cdec965b1",
            "242b8c8906ac8743",
            "d3b77d7fcf6d30e0",
            "72355bd8351fcc3a",
            "889ad6ac5d382c0c",
            "1654c193d5f6ae09",
            "ee69128ef9ab3d71",
            "d0cfb42fb9db00ba",
            "c068a363626d3aac",
            "dcf62c9ed6a0c911",
            "2874bd00f08fcb06",
            "4f79fc09a4a552d8",
            "c6bbd2b9b2d5d462",
            "4b0349befccb3ec9"
        ],
        "x": 118,
        "y": 73,
        "w": 2554,
        "h": 1015.5
    },
    {
        "id": "90a1257292e52c0c",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "name": "Projekt anlegen",
        "style": {
            "label": true
        },
        "nodes": [
            "c8ba1d241617ce9c",
            "fca50c1326be8ea0",
            "91c3a5fe4e5eecf4",
            "b48da6116f6c4a9b",
            "8a63e541bf541b68",
            "af8fbaa4a773e082",
            "00cb38d09cf73f62",
            "a34bec94987a6255",
            "88664cf125d3933c",
            "e2f65bc098f601a4",
            "049d373b283a3afc",
            "daa77dbe62344f24",
            "52dd943e6e75ae72",
            "5be990aae94e6a3d",
            "79d9833babec0616",
            "3d4b5f86c5ffa01f",
            "f60de5ae351b2bf4",
            "740eded456c45a8d",
            "f6c56536578c78fe",
            "e2dfeadde161b489",
            "d86904636be0f112",
            "d008ed5534cdc428",
            "09f7e3677e960a0d",
            "0d1faa7a2ad224be",
            "d92ffa0a71a5bdab",
            "112134d881c75205",
            "4877009023c9a7ca"
        ],
        "x": 114,
        "y": 1139,
        "w": 1778,
        "h": 555.5
    },
    {
        "id": "b38df26cbb8bb4b3",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "name": "Produktionsbuch Konfiguration",
        "style": {
            "label": true
        },
        "nodes": [
            "b41e02a9f041aa19",
            "33ba96310cfdeb2a",
            "865166a918f8dd7f",
            "a4d41af963187fb7",
            "2ce41bb4bd723b67",
            "41a1604a42cf8a96",
            "2fe371eb71de6440",
            "a67a2cab1a358d44",
            "d2ddab99473b3656",
            "027af555cc7c1332",
            "7d54c183a3c2f73a",
            "f10c3bfa8109cdd0",
            "7080ca0422762589",
            "18e8a335ef97da21",
            "9106241422db912a",
            "f5cd7bb31098eaad",
            "7b6fc7ec6990e925",
            "ae55601a9da0c911",
            "2fd60a7350f47fb3",
            "dadf337fb5b73a92",
            "0d985a15d4a4a95c",
            "4f7262abea362c2d",
            "2a3513798f605e53",
            "4cb0d9e7dd76739c",
            "f4601d95bfebf9a0",
            "9d4854382e8cb59d",
            "2c1e3dd3e61d04e7",
            "d6cf07277be27381",
            "12c6eb058a6b1e99",
            "44ed24d9f345abc2",
            "2beb850f85c03577",
            "72c8c1490dfeb838",
            "9ba181b908f39390",
            "62ba854e72cdf8dd",
            "14f500b7b1de838f",
            "a762fc9288921434",
            "4a19a26eb247bcfb",
            "125ab90468385839",
            "5d8cb4ae2aa3f2ec",
            "373f7b1408a8d8ef",
            "0972a4a5dd6d6322",
            "2377aa45b2403535",
            "95e85c4c1456807d",
            "2305fc706cda51ac",
            "c02215de6b80ad47",
            "58ddc703a5fc46b3",
            "d0f086bb05d1dbca",
            "c44b831c7f71f3f0",
            "229093bfc29724c5",
            "f445c6f1b8754602",
            "57d258a6ea6ffd92",
            "9c53f64fe3de877c",
            "efee96497b779fbf",
            "f819f6286d8877ac",
            "faef63861048a934",
            "4e153b8c3c397e84",
            "d408f2bf260c2d70",
            "8a0a359434b8320d",
            "6d70868f6fb23c66",
            "12e3163221d910ad",
            "24a8b953ca577f10",
            "db9878092f0ecaf5",
            "fd1db7356666748a",
            "6fe2baae39839f1a",
            "fb507dc5d4767c29",
            "72ecfc50ae08ef2f",
            "841470fce5aa44c3",
            "d024dbe76a3f0926",
            "48b16f710a226513",
            "c4605a91d07eacc9",
            "96085ec8b042313e",
            "9fe26839a1e98ab7",
            "c3c1ad3d3e10693a",
            "44446a7c726fc41a",
            "3390d3aa2f43e28f",
            "670347c94138255e",
            "a9a1e815467da76c",
            "e2263c106be8ee44",
            "52cbb131108a02f7",
            "fd497a93ac24b99e",
            "64b77345d2c02e51",
            "93bdad8186170fba",
            "c6bc4f90d144350d",
            "38f613d2151f78ac",
            "a22736cc2f7c03c0",
            "d64ff09155af078f",
            "0c7d50182f40a06c",
            "d4546258e4fd2c43",
            "948c245c80c18ed9",
            "69133e5578d8d519",
            "e4d5097ebd7590e3",
            "216f55f9767ff53a",
            "ee9edf6773dc9e80",
            "2fd8cd24ef3ca281",
            "87c9602477bca030",
            "7181e0b3b5441717",
            "4406e8602c76e676",
            "8bd88f7173449a9a",
            "572f7613c5171676",
            "0690323155aa8ef2",
            "b739f83a1f86db3c",
            "82033a023a5391bf",
            "96edd07e868a5ac6",
            "ec0b4bed560ac8d2",
            "739e9b38e927c880",
            "4e39262379dd4dd2",
            "95f1c5e24f5f224e",
            "5df24669e97283b6",
            "bcad8f79ef187fef",
            "5aece03cec227a21"
        ],
        "x": 114,
        "y": 1739,
        "w": 2112,
        "h": 1322
    },
    {
        "id": "02b0fe64050de273",
        "type": "group",
        "z": "dc0d981398a42d88",
        "name": "Admin PW Konfig-Panel",
        "style": {
            "label": true
        },
        "nodes": [
            "43f8678fc93a7979",
            "2066cdf85f239a3b",
            "f94793cbe28403ca",
            "f3266bc13293c407",
            "e37094d01af90df8",
            "f632d3bb48fd947b",
            "156d30c8b310449b",
            "abdc1aacf5aa4023",
            "57ddd026fc96906a",
            "26c73fb1b34dac58",
            "19241936d8672013",
            "a6880e826ba5ad1a",
            "f33bbf72b9b63711",
            "99a7ae697d4f679c",
            "5159326f0de47168",
            "86241f78f6249423",
            "b31d7e3c8e683585",
            "88c706e3490e5d0c",
            "adminpw_in",
            "adminpw_validate",
            "adminpw_write",
            "adminpw_ok",
            "adminpw_err",
            "adminpw_out",
            "62d75ac90e54201e"
        ],
        "x": 354,
        "y": 1619,
        "w": 2452,
        "h": 322
    },
    {
        "id": "e921cd24dc377898",
        "type": "group",
        "z": "dc0d981398a42d88",
        "name": "Admin PW ändern",
        "style": {
            "label": true
        },
        "nodes": [
            "ddfa72e7c2a450f1",
            "7dcbe53e138eae81",
            "0cba90869c49877d",
            "2a95aa185a76b98c",
            "949bd568fbe25dd8",
            "edce9ff476f82012",
            "d3eff10aac35c35a",
            "26c09c93e79682b4",
            "2497faf4fd47531d",
            "774b28f42b4107b4",
            "b378f51a10d2e003",
            "bfdda9999aa1ec1c"
        ],
        "x": 354,
        "y": 1899,
        "w": 1572,
        "h": 202
    },
    {
        "id": "b26115dc10ade7b1",
        "type": "group",
        "z": "dc0d981398a42d88",
        "name": "Dialog Ersteinrichtung",
        "style": {
            "label": true
        },
        "nodes": [
            "370cc88d36aca222",
            "28bebc51dd2c6d65",
            "ed72f89326ea082c",
            "e14052290423cdbf",
            "5f5864d48107ba0a",
            "21fc12900bbf5cf9",
            "a82085bf2a638791",
            "91a32a31021577d5",
            "d1db0ff322ae3752",
            "257e2521945c94c9",
            "16e7539e98782819",
            "fea15a378a0e4b9e",
            "f4a0937259ba7471"
        ],
        "x": 354,
        "y": 2379,
        "w": 1152,
        "h": 262
    },
    {
        "id": "b72a4f67de28cc65",
        "type": "group",
        "z": "dc0d981398a42d88",
        "name": "Initialisierung",
        "style": {
            "label": true
        },
        "nodes": [
            "f4b0c144d2c6afc9",
            "67a76ef6609ed0cf",
            "625e6b2914f18b76",
            "ebe08a20f29e269e",
            "fa26e2f162763260",
            "0a6ef210fc91feea",
            "6aa73b130afa0192",
            "bb49eb64a95fd55b",
            "decba3fee1e2bca6",
            "ca07f5630f9e9739",
            "50f79ec4f9467c3b",
            "5b65ad269724dba9",
            "f3b026d31f0623fa",
            "9e9531cb7b3cf674"
        ],
        "x": 294,
        "y": 2119,
        "w": 1792,
        "h": 242
    },
    {
        "id": "21da7a611532cde9",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Track Data",
        "style": {
            "label": true
        },
        "nodes": [
            "ad680f0fcc01ddb6",
            "2bbec99d791c83db",
            "f99608698a8bf030",
            "467ae7fcbc6b7735",
            "d298d4ce858c6423",
            "4de5265817a08368",
            "b58c7b938f4c91b8",
            "1df69ea1c23c0c77",
            "585a9df6e2d4fc8f",
            "5ce80ee7862fa202",
            "6abd7f2dbd599246",
            "0390d6ddd4e2c499",
            "91137af6b7515c1b",
            "83efdb60310b9f66",
            "32c6fc7eee758dc2",
            "41005d8cd172bc9d",
            "8cb029efa37424c0",
            "b45491f8febc2229",
            "716f54db6d32889b"
        ],
        "x": 474,
        "y": 1519,
        "w": 1752,
        "h": 202
    },
    {
        "id": "bf4eee564e09bce7",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Memory Location",
        "style": {
            "label": true
        },
        "nodes": [
            "ccccb265ef4fb1dc",
            "defb410130f27b91",
            "917f910377da205a",
            "c8ca1d82140028e8",
            "dd0e50f3c1df94a2",
            "8e5fd46df3643f82",
            "bfc668c714f6589b",
            "af2ab063726281c3",
            "9813dbafe6b048da",
            "4b6d8a94e30892b5",
            "9bb5182f2a01f7f2",
            "7c5744bd352c2266",
            "mem_counter_inc_bulk",
            "mem_quick_src_exists",
            "mem_counter_inc_quick",
            "mem_report_skipped",
            "3882283dafc8f7ae",
            "e2f3a4b5c6d7e8f1",
            "f1e2d3c4b5a69788"
        ],
        "x": 474,
        "y": 1279,
        "w": 1792,
        "h": 222
    },
    {
        "id": "70677eb1b82c5a42",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Clip Effects Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "926c052763c39e29",
            "501cb80a18e2101f",
            "eee3ed5815c3c52d",
            "5726ab925fa2402a",
            "4ffb2321785ac98b",
            "6f4c05fec7be2cb3",
            "7f28c8932dfe9550",
            "ecac37490d9bab96",
            "c9e0e810f99a762b",
            "1f67eb9de416c2b3",
            "5659f0cda1297389",
            "9b7306709391a052",
            "db8c2123cd78a2a1",
            "8ed53db524f61578",
            "1961473680376c87",
            "1a5269fddad889e9",
            "1a3576d54deb10e1",
            "47f58a92faa4b273",
            "4f8384d0182832a6"
        ],
        "x": 474,
        "y": 1039,
        "w": 1752,
        "h": 222
    },
    {
        "id": "7ca6f5ba8382e25f",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Keyboard Shortcuts",
        "style": {
            "label": true
        },
        "nodes": [
            "97634934f5c4429f",
            "9e68a0c8e7d4679a",
            "63f6495b795634b9",
            "f149ab4d6c3361d7",
            "ec8625296b55c237",
            "673b872c6bbacb4a",
            "d3eacd5953e17d84",
            "bda8dd2c31472a75",
            "5c7b329f612ecf44",
            "983f0f1fddf2f572",
            "e8576083d81a103e",
            "916a53a295dcad47",
            "54f5060cfecb013f",
            "0a7ff522ecc866b5",
            "0f74cb45dd82a5ba",
            "5b841c6ebce3b6fa",
            "26a33c971f7b20c7",
            "b938dced525b1034",
            "0cfb6f4a3d4d0171"
        ],
        "x": 474,
        "y": 1739,
        "w": 1752,
        "h": 222
    },
    {
        "id": "32425cc956c27352",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Templates",
        "style": {
            "label": true
        },
        "nodes": [
            "c3540eab39bc2683",
            "8d053651e71a88d0",
            "f1ddf879ad3e29dc",
            "dde28766e8809a51",
            "e60e5ab898a0a6de",
            "0177cdfae37f423d",
            "0455b0dd8e131085",
            "c27c1122548ae7b8"
        ],
        "x": 614,
        "y": 259,
        "w": 1172,
        "h": 162
    },
    {
        "id": "45092586c8772558",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Track Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "a266be18af804bb0",
            "2aaacffa74b4ebdc",
            "1b464dea68e4fbcb",
            "122a96507f2fb522",
            "b5c5c6741c0f3ad0",
            "f319bb1b3f5a5649",
            "7bf21c3b7172136f",
            "ddf7a61881eb3321"
        ],
        "x": 614,
        "y": 439,
        "w": 1192,
        "h": 162
    },
    {
        "id": "aba0adf3e81a1c0b",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Fade Presets",
        "style": {
            "label": true
        },
        "nodes": [
            "2f9a0a1f4a3c0d01",
            "0c9f2f7f2db2d1f9",
            "d9b7b4ec5f1f3e7e",
            "a35b9f8b5f3c9a11",
            "f8f7f0fb2f6a5b33",
            "2f0a7a3d7b0c44a2",
            "3c1e6a6d7b1b2c44",
            "e0e4b5c2b9a1d7f5",
            "5a8d0f1b3e2c4d66",
            "0e22a946caa8156b",
            "22c35c48819fd2c5",
            "bd97d6f6ce673d8c",
            "7956ea8999198d23",
            "cb629a6342c84f4d",
            "6de7257c65f1e165",
            "0c2c43bf90d12f7b",
            "8b5cc652c67109bc",
            "f7a0dd6dcd042919",
            "49e52f42aa4489e3",
            "5d719dadc9ded89c"
        ],
        "x": 474,
        "y": 839,
        "w": 1892,
        "h": 182
    },
    {
        "id": "7152f8cea3400281",
        "type": "group",
        "z": "24039523dcf573b0",
        "name": "Plug-In Settings",
        "style": {
            "label": true
        },
        "nodes": [
            "801fc15ef3777ecb",
            "f9ae2e0d8b851b95",
            "27d01ea6c29f13b3",
            "717547741be93b38",
            "88826b980a9a9e60",
            "d59e642b1764df76",
            "1c85a7b73c4d0534",
            "321d3cfaf3ad264f",
            "c122ef2968a5229e",
            "34ab116ea9fc7b9a",
            "97dbf2e19dec5ed0",
            "15ed22f12517848f",
            "46d02e8955535559",
            "5438f780f5fc4fff",
            "3a65d89c850f97fd"
        ],
        "x": 474,
        "y": 619,
        "w": 2172,
        "h": 202
    },
    {
        "id": "a101d0e8677d1f77",
        "type": "group",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "User-Kürzel",
        "style": {
            "label": true
        },
        "nodes": [
            "73578be5bb4e199b",
            "3d4f6c357b280f9d",
            "7e3ad68b0e68ab1c",
            "5e918c4f654b9570",
            "e52762ce60bc3002",
            "41982608cddd2ccf",
            "d34f2e68f8876068",
            "9ededfc73854a094",
            "5294e92d768b2df1",
            "9f0f52d158968973",
            "1417911cc5113c27",
            "6c3fc97d54aa9ddc",
            "a5813a5728c972a1",
            "165132d60eaec82d",
            "9a6612878bf2d7c6",
            "4befd131b88b6f45",
            "86a35491e119452b",
            "274fd14fc9463071",
            "6a67adf057122650",
            "6c3939e79075838a",
            "f31c04d58dac383f",
            "5e2fd2d2411c3bed",
            "20b5c1a5c4dbe03d"
        ],
        "x": 414,
        "y": 1159,
        "w": 1872,
        "h": 342
    },
    {
        "id": "e05512e54561bc65",
        "type": "group",
        "z": "dc0d981398a42d88",
        "g": "2ae494e9447c2087",
        "name": "Konfiguration - Pfade",
        "style": {
            "label": true
        },
        "nodes": [
            "12b3b8916db0a005",
            "872ec960e6a2057a",
            "70b5091be3333c48",
            "b041b75503da8120",
            "64ad417a56f98697",
            "4c6cbfa8f0a550de",
            "3707c330a4f18ac6",
            "14cb9ccc3031664a",
            "abe2c3fee7f88ba3",
            "4a25ca70e395c293",
            "80d8c768e27f027f",
            "9c244dac7f46368b",
            "acbb32dda1a74229",
            "4e34d63dd5a52e2a",
            "122d9b3391a1ba88",
            "2607c2f3b1b7b756",
            "7f50215f36cae338",
            "1a15ac24124bdf48",
            "f08129ae41d7a57b",
            "7b87b9d3b685a32f",
            "paths_get_in",
            "paths_get_setfile",
            "paths_get_access",
            "paths_get_filein",
            "paths_get_parse",
            "paths_get_empty",
            "paths_get_attach",
            "paths_get_out",
            "paths_put_in",
            "paths_put_check",
            "paths_put_400",
            "paths_put_setfile",
            "paths_put_compare",
            "paths_put_409",
            "paths_put_write",
            "paths_put_globals",
            "paths_put_200",
            "fdf0491bc433bff1",
            "390fc01b433f604d",
            "31559c4fdeac3181"
        ],
        "x": 394,
        "y": 219,
        "w": 3062,
        "h": 342
    },
    {
        "id": "2eb8ddaff3cdbe23",
        "type": "group",
        "z": "dc0d981398a42d88",
        "g": "2ae494e9447c2087",
        "name": "Konfiguration - Datei/Ordnerschema",
        "style": {
            "label": true
        },
        "nodes": [
            "6715a92228bcfdee",
            "ede35def0294d032",
            "9b985426c86b5090",
            "d1909bbed3319c96",
            "23b15a9cfb0616c8",
            "898c1ef4feff193b",
            "afecede4169b2a1c",
            "8b30524bdbd82528",
            "ce4b27a0132d5d47",
            "315de6d408850334",
            "6a961ea3045bc83b",
            "b7b705aa3b8c3c14",
            "3eabd9f6dc1318b0",
            "3efda43add38a825",
            "69717fc395ef2f3a",
            "e050f83e4b8e76d7",
            "da6fd0152bd9ea92",
            "72f1d0dfaf9a236f",
            "1cc45dce0f78c6df",
            "9994f906d9c27dc4",
            "032a562dc99f4af8",
            "f51285520b00a3d3",
            "aeb8a17f71795a4c",
            "8bb41dd550361de6",
            "f3f4b4a22f8d1111"
        ],
        "x": 394,
        "y": 553,
        "w": 2958,
        "h": 368
    },
    {
        "id": "c6bbd2b9b2d5d462",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Datensätze interpretieren",
        "style": {
            "label": true
        },
        "nodes": [
            "886fa3dff40f66c4",
            "542d2ab3e9ca86ab",
            "4f280f447ba900e3",
            "26b26f7ae2735f2c",
            "9354621dcdb0fa1f",
            "1783e5703cd84fe4",
            "adc1ead1c46f301c",
            "6c770391f80f6f98",
            "e3d6822e1a01b3d9",
            "155d7272748534fd",
            "0a963be20f1e8016",
            "463b654d92f0757a",
            "4ff909ecfe240e72",
            "d980148938fe696d"
        ],
        "x": 144,
        "y": 119,
        "w": 1092,
        "h": 162
    },
    {
        "id": "4b0349befccb3ec9",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Tabelle",
        "style": {
            "label": true
        },
        "nodes": [
            "46c089e460663388",
            "185acd9882bafd74",
            "5dfefaa79a87b909",
            "95d6c49a59226dad",
            "94e48f5086781a41",
            "477b7d2ef0ea4778",
            "a304588c2808c1ac",
            "40b1713e53fe014e",
            "d4a860faf530cfaf",
            "e456d033730a3863",
            "d827e2987029dd1c",
            "2f60e367b0acae57",
            "0381824ca670a193"
        ],
        "x": 1294,
        "y": 99,
        "w": 1352,
        "h": 162
    },
    {
        "id": "0d1faa7a2ad224be",
        "type": "group",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "PTX öffnen",
        "style": {
            "label": true
        },
        "nodes": [
            "ea819edcc7fbd28a",
            "30aa15b86c7b3bff",
            "c392a56e56df401e",
            "6629036df320012f",
            "196e5db112dae50f"
        ],
        "x": 1294,
        "y": 1519,
        "w": 572,
        "h": 149.5
    },
    {
        "id": "f3f4b4a22f8d1111",
        "type": "group",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "API: Schema (GET/PUT)",
        "style": {
            "label": true
        },
        "nodes": [
            "c0a1ea6d1b9a1112",
            "0c2bb7a2a83a1113",
            "f5d8c9a8a2a1114",
            "9f7b5d6ac2d1115",
            "c3e4d5f6a7b1116",
            "2a9c0d1e2f311117",
            "8e7d6c5b4a311119",
            "a1b2c3d4e5f61120",
            "3f2e1d0c9b811121",
            "7bbbd4653db740f1",
            "77a939fd00b2c94a",
            "5fa35bb78c259faa",
            "2729b38d7e8e8fb5"
        ],
        "x": 2134,
        "y": 579,
        "w": 1192,
        "h": 282
    },
    {
        "id": "826de81a1d3da833",
        "type": "ui-base",
        "name": "immo24 Studioassistent",
        "path": "/dashboard",
        "appIcon": "/icon.png",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "dashpage",
        "navigationStyle": "none",
        "titleBarStyle": "hidden",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "96222c515d2abba0",
        "type": "ui-theme",
        "name": "immo24 Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "e1391360d2dcd740",
        "type": "ui-page",
        "name": "Projektanlage",
        "ui": "826de81a1d3da833",
        "path": "/projektanlage",
        "icon": "home",
        "layout": "grid",
        "theme": "96222c515d2abba0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "2d80b438009ca3d3",
        "type": "ui-page",
        "name": "Konfiguration",
        "ui": "826de81a1d3da833",
        "path": "/konfiguration",
        "icon": "home",
        "layout": "tabs",
        "theme": "96222c515d2abba0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "cd5104c8640ac448",
        "type": "ui-page",
        "name": "Anmelden",
        "ui": "826de81a1d3da833",
        "path": "/login",
        "icon": "home",
        "layout": "notebook",
        "theme": "96222c515d2abba0",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": false,
        "disabled": false
    },
    {
        "id": "91ae8c83e547fbd7",
        "type": "ui-group",
        "name": "Projektinfos",
        "page": "e1391360d2dcd740",
        "width": "6",
        "height": "1",
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a3aa87200649281b",
        "type": "ui-group",
        "name": "Pfade",
        "page": "2d80b438009ca3d3",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "4ace43d557abb992",
        "type": "ui-group",
        "name": "Anmelden",
        "page": "cd5104c8640ac448",
        "width": "6",
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f925aada115de858",
        "type": "ui-group",
        "name": "Angemeldet",
        "page": "e1391360d2dcd740",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": false,
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "62f81a586be9f22e",
        "type": "ui-group",
        "name": "Kuerzel",
        "page": "cd5104c8640ac448",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "dialog"
    },
    {
        "id": "2093508e61440187",
        "type": "ui-group",
        "name": "Produktionsbuch",
        "page": "e1391360d2dcd740",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "403731bf400b250a",
        "type": "ui-group",
        "name": "Projektkartei",
        "page": "e1391360d2dcd740",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9ad90850fbcf38ac",
        "type": "ui-group",
        "name": "Namensschema",
        "page": "2d80b438009ca3d3",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c32759b3efc667c0",
        "type": "ui-group",
        "name": "Produktionsbuch",
        "page": "2d80b438009ca3d3",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9acf74bc666bb115",
        "type": "ui-group",
        "name": "Neuer Kunde",
        "page": "2d80b438009ca3d3",
        "width": 6,
        "height": 1,
        "order": 6,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "dialog"
    },
    {
        "id": "1706fadffdc2c0e4",
        "type": "ui-group",
        "name": "Neuer Datensatz",
        "page": "2d80b438009ca3d3",
        "width": 6,
        "height": 1,
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "dialog"
    },
    {
        "id": "d702d7caf5852d18",
        "type": "ui-group",
        "name": "Passwort eingeben",
        "page": "e1391360d2dcd740",
        "width": 6,
        "height": 1,
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "dialog"
    },
    {
        "id": "63c9d128cce7d8b0",
        "type": "ui-group",
        "name": "Passwort",
        "page": "2d80b438009ca3d3",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9d7062b4e3dcd9da",
        "type": "ui-group",
        "name": "Ersteinrichtung",
        "page": "cd5104c8640ac448",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "dialog"
    },
    {
        "id": "d4665a684c798a6a",
        "type": "ui-group",
        "name": "Header",
        "page": "cd5104c8640ac448",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "true",
        "groupType": "default"
    },
    {
        "id": "6add80470fad5859",
        "type": "ui-group",
        "name": "Beenden",
        "page": "2d80b438009ca3d3",
        "width": 6,
        "height": 1,
        "order": 7,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "df8c64150cd5010a",
        "type": "ui-spacer",
        "group": "9ad90850fbcf38ac",
        "name": "spacer",
        "tooltip": "",
        "order": 4,
        "width": 1,
        "height": 1,
        "className": ""
    },
    {
        "id": "7058d859c30f2997",
        "type": "websocket-listener",
        "path": "/ws/activeUser",
        "wholemsg": "false"
    },
    {
        "id": "f4b0c144d2c6afc9",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Initialisieren",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 410,
        "y": 2160,
        "wires": [
            [
                "decba3fee1e2bca6",
                "2c322a0a469a0476"
            ]
        ]
    },
    {
        "id": "7e2571b409d5d436",
        "type": "fs-ops-dir",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "MA-Ordner lesen",
        "path": "PathMitarbeiter",
        "pathType": "global",
        "filter": "",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 530,
        "y": 1020,
        "wires": [
            [
                "b0eac16b480b0f6c"
            ]
        ]
    },
    {
        "id": "b0eac16b480b0f6c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "Unsichtbare filtern",
        "func": "let arr = msg.payload || [];\nmsg.payload = arr\n    .filter(name => !name.startsWith('.')) // Unsichtbare raus\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "07c077a225675b93"
            ]
        ]
    },
    {
        "id": "7338a31d62aa380a",
        "type": "fs-ops-stats",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1140,
        "y": 1020,
        "wires": [
            [
                "84c87e607497b34b"
            ]
        ]
    },
    {
        "id": "84c87e607497b34b",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "nach Ordner filtern",
        "func": "let pfade = msg.payload || [];\nlet stats = msg.stats || [];\nlet options = [];\n\nfor (let i = 0; i < pfade.length; i++) {\n    let stat = stats[i];\n    let isDir = false;\n    if (stat) {\n        if (typeof stat.isDirectory === \"function\") {\n            isDir = stat.isDirectory();\n        } else if (typeof stat.mode === \"number\") {\n            isDir = (stat.mode & 0o170000) === 0o040000;\n        }\n    }\n    if (isDir) {\n        let teile = pfade[i].split(/[\\\\/]/); // plattformunabhängig\n        let name = teile[teile.length - 1];\n        if (!name.startsWith('.')) {\n            options.push({\n                dropdown: \"user\",    // Das ist der Name des Dropdown-Felds im ui-form!\n                value: name,\n                label: name\n            });\n        }\n    }\n}\n\n// Die Optionen an das Dashboard schicken:\nmsg.ui_update = { dropdownOptions: options };\n\nmsg.payload = msg.ui_update;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1020,
        "wires": [
            [
                "f683da12cce40141"
            ]
        ]
    },
    {
        "id": "f683da12cce40141",
        "type": "ui-form",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "Anmelden",
        "group": "4ace43d557abb992",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Mitarbeiter",
                "key": "user",
                "type": "dropdown",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "user": ""
        },
        "payload": "",
        "submit": "anmelden",
        "cancel": "",
        "resetOnSubmit": false,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "passthru": false,
        "dropdownOptions": [],
        "x": 720,
        "y": 1080,
        "wires": [
            [
                "13bfc916dbc33c03"
            ]
        ]
    },
    {
        "id": "07c077a225675b93",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "zu Pfaden konvertieren",
        "func": "let path = global.get('PathMitarbeiter');\nlet arr = msg.payload || [];\nmsg.payload = arr\n    .map(name => path + '/' + name);            // Zu vollständigen Pfaden machen\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1020,
        "wires": [
            [
                "7338a31d62aa380a"
            ]
        ]
    },
    {
        "id": "13bfc916dbc33c03",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "activeUser",
                "pt": "global",
                "to": "payload.user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1080,
        "wires": [
            [
                "7e3ad68b0e68ab1c",
                "76182b64e9b2d9a8"
            ]
        ]
    },
    {
        "id": "73578be5bb4e199b",
        "type": "ui-control",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "",
        "ui": "826de81a1d3da833",
        "events": "all",
        "x": 1840,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "3d4f6c357b280f9d",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "[UI] Anmelden, Screen wechseln",
        "func": "msg.payload = {\n    page: 'Projektanlage',  // Seite zu der gewechselt werden soll\n    pages: {\n        enable: ['Projektanlage', 'Pro Tools', 'Konfiguration'],       // Diese Seite wird aktiviert (sichtbar)\n        disable: ['Anmelden']     // Diese Seite wird deaktiviert (unsichtbar)\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1200,
        "wires": [
            [
                "73578be5bb4e199b",
                "3e3926b522449b96"
            ]
        ]
    },
    {
        "id": "7e3ad68b0e68ab1c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "Kürzel-Pfad festlegen",
        "func": "let activeUser = global.get('activeUser');\nlet PathMitarbeiter = global.get('PathMitarbeiter') || '';\nmsg.PathKuerzel = `${PathMitarbeiter}/${activeUser}/immo24/immo24-user.json`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "5e918c4f654b9570"
            ]
        ]
    },
    {
        "id": "5e918c4f654b9570",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "Kürzel-File prüfen",
        "path": "",
        "pathType": "str",
        "filename": "PathKuerzel",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 770,
        "y": 1220,
        "wires": [
            [
                "e52762ce60bc3002"
            ],
            [
                "9f0f52d158968973"
            ]
        ]
    },
    {
        "id": "e52762ce60bc3002",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "immo24-user.json lesen",
        "filename": "PathKuerzel",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1010,
        "y": 1200,
        "wires": [
            [
                "41982608cddd2ccf"
            ]
        ]
    },
    {
        "id": "41982608cddd2ccf",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "setze global.activeUserKuerzel",
        "func": "global.set('activeUserKuerzel', msg.payload.trim());\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1200,
        "wires": [
            [
                "3d4f6c357b280f9d"
            ]
        ]
    },
    {
        "id": "d34f2e68f8876068",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "group": "62f81a586be9f22e",
        "name": "Kürzel",
        "label": "Kürzel",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 770,
        "y": 1360,
        "wires": [
            [
                "6c3fc97d54aa9ddc"
            ]
        ]
    },
    {
        "id": "9ededfc73854a094",
        "type": "ui-button",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "group": "62f81a586be9f22e",
        "name": "Speichern und Anmelden",
        "label": "Speichern und Anmelden",
        "order": 3,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 830,
        "y": 1440,
        "wires": [
            [
                "a5813a5728c972a1"
            ]
        ]
    },
    {
        "id": "5294e92d768b2df1",
        "type": "ui-control",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "",
        "ui": "826de81a1d3da833",
        "events": "all",
        "x": 1240,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "9f0f52d158968973",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "[UI] Kürzel-Dialog einblenden",
        "func": "msg.payload = {\n    groups: {\n        show: ['Kuerzel']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1240,
        "wires": [
            [
                "5294e92d768b2df1"
            ]
        ]
    },
    {
        "id": "1417911cc5113c27",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "Reset Kürzel-Feld",
        "func": "msg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1360,
        "wires": [
            [
                "d34f2e68f8876068"
            ]
        ]
    },
    {
        "id": "6c3fc97d54aa9ddc",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpKuerzel",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "a5813a5728c972a1",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "Pflichtfelder Check",
        "func": "let fehlende = [];\n\nif (!flow.get(\"tmpKuerzel\")) fehlende.push(\"Kürzel\");\n\nif (fehlende.length > 0) {\n    msg.payload = \"Bitte ausfüllen: \" + fehlende.join(\", \");\n    msg.ok = false;\n    return [msg, null]; // Output 1: Fehler\n} else {\n    msg.ok = true;\n    msg.payload = \"Alle Pflichtfelder sind ausgefüllt.\";\n    return [null, msg]; // Output 2: Alles ok\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1440,
        "wires": [
            [
                "165132d60eaec82d"
            ],
            [
                "9a6612878bf2d7c6"
            ]
        ]
    },
    {
        "id": "165132d60eaec82d",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 1310,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "9a6612878bf2d7c6",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "JSON formatieren, Zielpfad",
        "func": "// Kürzel aus dem Flow-Kontext holen (z.B. beim Textinput auf flow.kuerzel speichern!)\nlet kuerzel = flow.get('tmpKuerzel');\nlet activeUser = global.get('activeUser');\nlet PathMitarbeiter = global.get('PathMitarbeiter') || '';\n\nif (!kuerzel || !activeUser || !PathMitarbeiter) {\n    msg.payload = \"Fehler: Bitte Kürzel, User und Pfad angeben!\";\n    return msg;\n}\n\n// Zielpfad zur Datei bauen\n\nmsg.filename = `${PathMitarbeiter}/${activeUser}/immo24/immo24-user.json`;\nmsg.activeUserPath = `${PathMitarbeiter}/${activeUser}`;\nmsg.payload = kuerzel.trim(); // Schreib das Kürzel (ohne Leerzeichen) in die Datei\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1460,
        "wires": [
            [
                "f31c04d58dac383f"
            ]
        ]
    },
    {
        "id": "4befd131b88b6f45",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "immo24-user.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2140,
        "y": 1300,
        "wires": [
            [
                "86a35491e119452b",
                "1417911cc5113c27",
                "41982608cddd2ccf"
            ]
        ]
    },
    {
        "id": "86a35491e119452b",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "Meldung Text",
        "func": "msg.payload = \"Kürzel erfolgreich gespeichert!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1380,
        "wires": [
            [
                "274fd14fc9463071"
            ]
        ]
    },
    {
        "id": "274fd14fc9463071",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Meldung ausgeben",
        "x": 2150,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "76182b64e9b2d9a8",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "Angemeldet",
        "mode": "link",
        "links": [
            "6c770391f80f6f98"
        ],
        "x": 1125,
        "y": 1080,
        "wires": []
    },
    {
        "id": "12b3b8916db0a005",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "path.json lesen",
        "filename": "${IMMO24_USERDATA}/path.json",
        "filenameType": "env",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 580,
        "y": 260,
        "wires": [
            [
                "872ec960e6a2057a"
            ]
        ]
    },
    {
        "id": "872ec960e6a2057a",
        "type": "json",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "JSON parsen",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 560,
        "y": 320,
        "wires": [
            [
                "2607c2f3b1b7b756",
                "7f50215f36cae338"
            ]
        ]
    },
    {
        "id": "70b5091be3333c48",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "group": "a3aa87200649281b",
        "name": "Pfad Mitarbeiter",
        "label": "Pfad Mitarbeiter",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "PathMitarbeiter",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 1120,
        "y": 300,
        "wires": [
            [
                "4c6cbfa8f0a550de"
            ]
        ]
    },
    {
        "id": "b041b75503da8120",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "group": "a3aa87200649281b",
        "name": "Pfad Produktionen",
        "label": "Pfad Produktionen",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "PathProduktionen",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "3707c330a4f18ac6"
            ]
        ]
    },
    {
        "id": "64ad417a56f98697",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "group": "a3aa87200649281b",
        "name": "Pfad Stammdaten",
        "label": "Pfad Stammdaten",
        "order": 4,
        "width": 0,
        "height": 0,
        "topic": "PathStammdaten",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "14cb9ccc3031664a"
            ]
        ]
    },
    {
        "id": "4c6cbfa8f0a550de",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpPathMitarbeiter",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "3707c330a4f18ac6",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpPathProduktionen",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "14cb9ccc3031664a",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpPathStammdaten",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "abe2c3fee7f88ba3",
        "type": "ui-button",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "group": "a3aa87200649281b",
        "name": "Pfade speichern",
        "label": "Speichern",
        "order": 5,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 780,
        "y": 440,
        "wires": [
            [
                "4a25ca70e395c293"
            ]
        ]
    },
    {
        "id": "4a25ca70e395c293",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Pflichtfelder Check",
        "func": "let fehlende = [];\n\nif (!flow.get(\"tmpPathMitarbeiter\")) fehlende.push(\"Pfad Mitarbeiter\");\nif (!flow.get(\"tmpPathProduktionen\")) fehlende.push(\"Pfad Produktionen\");\nif (!flow.get(\"tmpPathStammdaten\")) fehlende.push(\"Pfad Stammdaten\");\n\nif (fehlende.length > 0) {\n    msg.payload = \"Bitte ausfüllen: \" + fehlende.join(\", \");\n    msg.ok = false;\n    return [msg, null]; // Output 1: Fehler\n} else {\n    msg.ok = true;\n    msg.payload = \"Alle Pflichtfelder sind ausgefüllt.\";\n    return [null, msg]; // Output 2: Alles ok\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "80d8c768e27f027f"
            ],
            [
                "9c244dac7f46368b"
            ]
        ]
    },
    {
        "id": "80d8c768e27f027f",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 1270,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "9c244dac7f46368b",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "JSON formatieren",
        "func": "// Holt die Schemas aus flow:\nlet PathMitarbeiter = flow.get(\"tmpPathMitarbeiter\") || \"\";\nlet PathProduktionen = flow.get(\"tmpPathProduktionen\") || \"\";\nlet PathStammdaten = flow.get(\"tmpPathStammdaten\") || \"\";\n\n\n// Baue ein JSON-Objekt\nlet out = {\n    PathMitarbeiter,\n    PathProduktionen,\n    PathStammdaten\n};\n\n// Speichern als String im msg.payload:\nmsg.payload = JSON.stringify(out, null, 3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 460,
        "wires": [
            [
                "acbb32dda1a74229"
            ]
        ]
    },
    {
        "id": "acbb32dda1a74229",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "path.json schreiben",
        "filename": "${IMMO24_USERDATA}/path.json",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1730,
        "y": 460,
        "wires": [
            [
                "4e34d63dd5a52e2a"
            ]
        ]
    },
    {
        "id": "4e34d63dd5a52e2a",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Meldung Text",
        "func": "msg.payload = \"Pfade erfolgreich gespeichert!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 520,
        "wires": [
            [
                "122d9b3391a1ba88"
            ]
        ]
    },
    {
        "id": "122d9b3391a1ba88",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Meldung ausgeben",
        "x": 1790,
        "y": 520,
        "wires": [
            [
                "7b87b9d3b685a32f"
            ]
        ]
    },
    {
        "id": "2607c2f3b1b7b756",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "JSON formatieren",
        "func": "// msg.payload enthält jetzt das JSON-Objekt\nlet data = msg.payload || {};\n\n// Bereite je ein msg für jedes Textfeld:\nlet msgPathMitarbeiter = { payload: data.PathMitarbeiter || \"\" };\nlet msgPathProduktionen = { payload: data.PathProduktionen || \"\" };\nlet msgPathStammdaten = { payload: data.PathStammdaten || \"\" };\n\n\n// Output 1: an Mitarbeiter-Textfeld, Output 2: an Produktionen-Textfeld, Output 3: an Stammdaten-Textfeld\nreturn [msgPathMitarbeiter, msgPathProduktionen, msgPathStammdaten];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "70b5091be3333c48"
            ],
            [
                "b041b75503da8120"
            ],
            [
                "64ad417a56f98697"
            ]
        ]
    },
    {
        "id": "6715a92228bcfdee",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "JSON formatieren",
        "func": "// msg.payload enthält jetzt das JSON-Objekt\nlet data = msg.payload || {};\n\n// Bereite je ein msg für jedes Textfeld:\nlet msgProjektordner = { payload: data.projektordnerSchema || \"\" };\nlet msgSession = { payload: data.sessionSchema || \"\" };\n\n// Output 1: an Projektordner-Textfeld, Output 2: an Session-Textfeld\nreturn [msgProjektordner, msgSession];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 740,
        "wires": [
            [
                "898c1ef4feff193b"
            ],
            [
                "afecede4169b2a1c"
            ]
        ]
    },
    {
        "id": "ede35def0294d032",
        "type": "json",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "JSON parsen",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 560,
        "y": 680,
        "wires": [
            [
                "6715a92228bcfdee",
                "1cc45dce0f78c6df"
            ]
        ]
    },
    {
        "id": "9b985426c86b5090",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "schemes.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 590,
        "y": 640,
        "wires": [
            [
                "ede35def0294d032"
            ]
        ]
    },
    {
        "id": "d1909bbed3319c96",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 1270,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "23b15a9cfb0616c8",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "Demo-Werte festlegen",
        "func": "let schema = msg.payload;\n\nlet demoValues = {\n    datum: \"1997-01-23\",\n    projektname: \"Faszination Falten\",\n    moid: \"O4BZ\",\n    benutzer: \"PL\",\n    kunde: \"SuperVision\",\n    produktionsstufe: \"Foleys\",\n    version: \"v3\"\n};\n\nlet beispiel = schema.replace(/\\{\\{(\\w+)\\}\\}/g, (match, p1) => demoValues[p1] || \"\");\n\nmsg.payload = beispiel;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 720,
        "wires": [
            [
                "72f1d0dfaf9a236f"
            ]
        ]
    },
    {
        "id": "898c1ef4feff193b",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "group": "9ad90850fbcf38ac",
        "name": "Projektordner",
        "label": "Projektordner",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "projektordnerSchema",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 780,
        "y": 680,
        "wires": [
            [
                "69717fc395ef2f3a"
            ]
        ]
    },
    {
        "id": "afecede4169b2a1c",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "group": "9ad90850fbcf38ac",
        "name": "Session",
        "label": "Session",
        "order": 7,
        "width": 0,
        "height": 0,
        "topic": "sessionSchema",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 760,
        "y": 720,
        "wires": [
            [
                "e050f83e4b8e76d7"
            ]
        ]
    },
    {
        "id": "8b30524bdbd82528",
        "type": "ui-button",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "group": "9ad90850fbcf38ac",
        "name": "Schema speichern",
        "label": "Speichern",
        "order": 8,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 790,
        "y": 800,
        "wires": [
            [
                "ce4b27a0132d5d47"
            ]
        ]
    },
    {
        "id": "ce4b27a0132d5d47",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "Pflichtfelder Check",
        "func": "let fehlende = [];\n\nif (!flow.get(\"tmpProjektordnerSchema\")) fehlende.push(\"Projektordner Schema\");\nif (!flow.get(\"tmpSessionSchema\")) fehlende.push(\"Session Schema\");\n\nif (fehlende.length > 0) {\n    msg.payload = \"Bitte ausfüllen: \" + fehlende.join(\", \");\n    msg.ok = false;\n    return [msg, null]; // Output 1: Fehler\n} else {\n    msg.ok = true;\n    msg.payload = \"Alle Pflichtfelder sind ausgefüllt.\";\n    return [null, msg]; // Output 2: Alles ok\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "d1909bbed3319c96"
            ],
            [
                "6a961ea3045bc83b"
            ]
        ]
    },
    {
        "id": "315de6d408850334",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "Demo-Werte festlegen",
        "func": "let schema = msg.payload;\n\nlet demoValues = {\n    datum: \"1997-01-23\",\n    projektname: \"Faszination Falten\",\n    moid: \"O4BZ\",\n    benutzer: \"PL\",\n    kunde: \"SuperVision\",\n    produktionsstufe: \"Foleys\",\n    version: \"v3\"\n};\n\nlet beispiel = schema.replace(/\\{\\{(\\w+)\\}\\}/g, (match, p1) => demoValues[p1] || \"\");\n\nmsg.payload = beispiel;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 680,
        "wires": [
            [
                "da6fd0152bd9ea92"
            ]
        ]
    },
    {
        "id": "6a961ea3045bc83b",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "JSON formatieren",
        "func": "// Holt die Schemas aus Flow:\nlet projektordnerSchema = flow.get(\"tmpProjektordnerSchema\") || \"\";\nlet sessionSchema = flow.get(\"tmpSessionSchema\") || \"\";\n\n// Baue ein JSON-Objekt\nlet out = {\n    projektordnerSchema,\n    sessionSchema\n};\n\n// Speichern als String im msg.payload:\nmsg.payload = JSON.stringify(out, null, 2);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 820,
        "wires": [
            [
                "f51285520b00a3d3"
            ]
        ]
    },
    {
        "id": "b7b705aa3b8c3c14",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "schemes.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1750,
        "y": 820,
        "wires": [
            [
                "3eabd9f6dc1318b0"
            ]
        ]
    },
    {
        "id": "3eabd9f6dc1318b0",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "Meldung Text",
        "func": "msg.payload = \"Namensschema erfolgreich gespeichert!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 880,
        "wires": [
            [
                "3efda43add38a825"
            ]
        ]
    },
    {
        "id": "3efda43add38a825",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Meldung ausgeben",
        "x": 1790,
        "y": 880,
        "wires": [
            [
                "8bb41dd550361de6"
            ]
        ]
    },
    {
        "id": "69717fc395ef2f3a",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpProjektordnerSchema",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 680,
        "wires": [
            [
                "315de6d408850334"
            ]
        ]
    },
    {
        "id": "e050f83e4b8e76d7",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpSessionSchema",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 720,
        "wires": [
            [
                "23b15a9cfb0616c8"
            ]
        ]
    },
    {
        "id": "da6fd0152bd9ea92",
        "type": "ui-text",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "group": "9ad90850fbcf38ac",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Demo Projektordner ausgeben",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1650,
        "y": 680,
        "wires": []
    },
    {
        "id": "72f1d0dfaf9a236f",
        "type": "ui-text",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "group": "9ad90850fbcf38ac",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Demo Session ausgeben",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 1630,
        "y": 720,
        "wires": []
    },
    {
        "id": "7f50215f36cae338",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "tmp-Flows + Global initialisieren",
        "func": "let data = msg.payload || {};\n\n// flow.set für UI-Textfelder (z. B. damit Pflichtfeldprüfung funktioniert)\nflow.set(\"tmpPathMitarbeiter\", data.PathMitarbeiter || \"\");\nflow.set(\"tmpPathProduktionen\", data.PathProduktionen || \"\");\nflow.set(\"tmpPathStammdaten\", data.PathStammdaten || \"\");\nflow.set(\"tmpPathPTUser\", data.PathPTUser || \"\");\n\n// global.set für allgemeine Verwendung im Flow\nglobal.set(\"PathMitarbeiter\", data.PathMitarbeiter || \"\");\nglobal.set(\"PathProduktionen\", data.PathProduktionen || \"\");\nglobal.set(\"PathStammdaten\", data.PathStammdaten || \"\");\nglobal.set(\"PathPTUser\", data.PathPTUser || \"\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "1cc45dce0f78c6df",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "tmp-Flows + Global initialisieren",
        "func": "let data = msg.payload || {};\n\n// flow.set für UI-Textfelder (z. B. damit Pflichtfeldprüfung funktioniert)\nflow.set(\"tmpProjektordnerSchema\", data.projektordnerSchema || \"\");\nflow.set(\"tmpSessionSchema\", data.sessionSchema || \"\");\n\n// global.set für allgemeine Verwendung im Flow\nglobal.set(\"projektordnerSchema\", data.projektordnerSchema || \"\");\nglobal.set(\"sessionSchema\", data.sessionSchema || \"\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "3e3926b522449b96",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "Text angemeldeter User",
        "func": "//msg.payload = global.get(\"activeUser\") || \"\";\n//return msg;\n\n\nmsg.payload = { activeUser: global.get(\"activeUser\") };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1020,
        "wires": [
            [
                "a56e7a1f4e0144f2",
                "194d99600dc9f4e6"
            ]
        ]
    },
    {
        "id": "43f8678fc93a7979",
        "type": "ui-button",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "group": "f925aada115de858",
        "name": "Konfiguration",
        "label": "Konfiguration",
        "order": 2,
        "width": 2,
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "lock",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 520,
        "y": 1740,
        "wires": [
            [
                "f94793cbe28403ca"
            ]
        ]
    },
    {
        "id": "2066cdf85f239a3b",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "group": "d702d7caf5852d18",
        "name": "Passwort",
        "label": "Passwort",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "password",
        "tooltip": "",
        "delay": 300,
        "passthru": false,
        "sendOnDelay": false,
        "sendOnBlur": false,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 660,
        "y": 1800,
        "wires": [
            [
                "f632d3bb48fd947b",
                "26c73fb1b34dac58"
            ]
        ]
    },
    {
        "id": "f94793cbe28403ca",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "[UI] PW-Dialog einblenden",
        "func": "msg.payload = {\n    groups: {\n        show: ['Passwort eingeben']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "f3266bc13293c407",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "adminpw.json lesen",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 790,
        "y": 1700,
        "wires": [
            [
                "e37094d01af90df8"
            ]
        ]
    },
    {
        "id": "e37094d01af90df8",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Global initialisieren",
        "func": "global.set('adminPW', msg.payload.trim());\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "f632d3bb48fd947b",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Passwort-Check",
        "func": "let userEingabe = msg.payload; // Annahme: kommt direkt vom Textfeld\nlet adminPW = global.get(\"adminPW\"); // im Global-Kontext gespeichert\n\nif (userEingabe === adminPW) {\n    msg.payload = \"FREIGABE\"; // oder beliebiger Befehl\n    return [msg, null];       // Output 1 = OK, Output 2 = Fehler\n} else {\n    msg.payload = \"FALSCH\";\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1800,
        "wires": [
            [
                "57ddd026fc96906a"
            ],
            [
                "abdc1aacf5aa4023"
            ]
        ]
    },
    {
        "id": "156d30c8b310449b",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": false,
        "color": "#ff2600",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 1310,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "abdc1aacf5aa4023",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Meldung Text",
        "func": "msg.payload = \"Falsches Passwort!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1840,
        "wires": [
            [
                "156d30c8b310449b"
            ]
        ]
    },
    {
        "id": "57ddd026fc96906a",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "[UI] Konfig-Page weiterleiten",
        "func": "msg.payload = {\n    page: 'Konfiguration',  // Seite zu der gewechselt werden soll\n    pages: {\n        enable: ['Konfiguration'],       // Diese Seite wird aktiviert (sichtbar)\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "26c73fb1b34dac58",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Clear PW",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1800,
        "wires": [
            [
                "2066cdf85f239a3b"
            ]
        ]
    },
    {
        "id": "67a76ef6609ed0cf",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "PathStammdaten abfragen",
        "func": "msg.payload = global.get('PathStammdaten');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2240,
        "wires": [
            [
                "625e6b2914f18b76"
            ]
        ]
    },
    {
        "id": "625e6b2914f18b76",
        "type": "fs-ops-dir",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Ordner abfragen",
        "path": "payload",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 960,
        "y": 2240,
        "wires": [
            [
                "bb49eb64a95fd55b"
            ]
        ]
    },
    {
        "id": "ebe08a20f29e269e",
        "type": "catch",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Kein Ordner gefunden",
        "scope": [
            "625e6b2914f18b76"
        ],
        "uncaught": false,
        "x": 980,
        "y": 2280,
        "wires": [
            [
                "fa26e2f162763260"
            ]
        ]
    },
    {
        "id": "ddfa72e7c2a450f1",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "group": "63c9d128cce7d8b0",
        "name": "Neues Passwort",
        "label": "Neues Passwort",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "password",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 600,
        "y": 1940,
        "wires": [
            [
                "949bd568fbe25dd8"
            ]
        ]
    },
    {
        "id": "7dcbe53e138eae81",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "group": "63c9d128cce7d8b0",
        "name": "Neues Passwort wiederholen",
        "label": "Neues Passwort wiederholen",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "password",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 640,
        "y": 1980,
        "wires": [
            [
                "edce9ff476f82012"
            ]
        ]
    },
    {
        "id": "0cba90869c49877d",
        "type": "ui-button",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "group": "63c9d128cce7d8b0",
        "name": "Passwort ändern",
        "label": "Passwort ändern",
        "order": 3,
        "width": "1",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 610,
        "y": 2040,
        "wires": [
            [
                "2497faf4fd47531d"
            ]
        ]
    },
    {
        "id": "2a95aa185a76b98c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "name": "Passwort-Check",
        "func": "const newPw = flow.get('newPassword');\nconst repeatPw = flow.get('repeatPassword');\n\nif (!newPw || !repeatPw) {\n    return [null, { payload: \"Bitte beide Felder ausfüllen!\" }];\n}\n\nif (newPw !== repeatPw) {\n    return [null, { payload: \"Passwörter stimmen nicht überein!\" }];\n}\n\n// Alles ok, weiter zum Speichern\nmsg.payload = newPw; // Das neue Passwort als Payload für Speichern\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2040,
        "wires": [
            [
                "774b28f42b4107b4"
            ],
            [
                "d3eff10aac35c35a"
            ]
        ],
        "outputLabels": [
            "PW speichern",
            "Fehler"
        ]
    },
    {
        "id": "949bd568fbe25dd8",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "newPassword",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "edce9ff476f82012",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "repeatPassword",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 940,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "d3eff10aac35c35a",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": false,
        "color": "#ff2600",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 1330,
        "y": 2060,
        "wires": [
            [
                "26c09c93e79682b4"
            ]
        ]
    },
    {
        "id": "26c09c93e79682b4",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "name": "Clear PW",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1960,
        "wires": [
            [
                "ddfa72e7c2a450f1",
                "7dcbe53e138eae81"
            ]
        ]
    },
    {
        "id": "2497faf4fd47531d",
        "type": "delay",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 2040,
        "wires": [
            [
                "2a95aa185a76b98c"
            ]
        ]
    },
    {
        "id": "774b28f42b4107b4",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "name": "adminpw.json schreiben",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1590,
        "y": 2020,
        "wires": [
            [
                "26c09c93e79682b4",
                "bfdda9999aa1ec1c"
            ]
        ]
    },
    {
        "id": "b378f51a10d2e003",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#ff2600",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Meldung ausgeben",
        "x": 1810,
        "y": 1960,
        "wires": [
            []
        ]
    },
    {
        "id": "bfdda9999aa1ec1c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e921cd24dc377898",
        "name": "Meldung Text",
        "func": "msg.payload = \"Passwort erfolgreich geändert!\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 1960,
        "wires": [
            [
                "b378f51a10d2e003"
            ]
        ]
    },
    {
        "id": "370cc88d36aca222",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "group": "9d7062b4e3dcd9da",
        "name": "Pfad Mitarbeiter",
        "label": "Pfad Mitarbeiter",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "PathMitarbeiter",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": true,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 800,
        "y": 2420,
        "wires": [
            [
                "e14052290423cdbf"
            ]
        ]
    },
    {
        "id": "28bebc51dd2c6d65",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "group": "9d7062b4e3dcd9da",
        "name": "Pfad Produktionen",
        "label": "Pfad Produktionen",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "PathProduktionen",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 810,
        "y": 2460,
        "wires": [
            [
                "5f5864d48107ba0a"
            ]
        ]
    },
    {
        "id": "ed72f89326ea082c",
        "type": "ui-text-input",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "group": "9d7062b4e3dcd9da",
        "name": "Pfad Stammdaten",
        "label": "Pfad Stammdaten",
        "order": 4,
        "width": 0,
        "height": 0,
        "topic": "PathStammdaten",
        "topicType": "str",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 810,
        "y": 2500,
        "wires": [
            [
                "21fc12900bbf5cf9"
            ]
        ]
    },
    {
        "id": "e14052290423cdbf",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpPathMitarbeiter",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "5f5864d48107ba0a",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpPathProduktionen",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "21fc12900bbf5cf9",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tmpPathStammdaten",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "a82085bf2a638791",
        "type": "ui-button",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "group": "9d7062b4e3dcd9da",
        "name": "Pfade speichern",
        "label": "Speichern",
        "order": 5,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 460,
        "y": 2580,
        "wires": [
            [
                "91a32a31021577d5"
            ]
        ]
    },
    {
        "id": "91a32a31021577d5",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "name": "Pflichtfelder Check",
        "func": "let fehlende = [];\n\nif (!flow.get(\"tmpPathMitarbeiter\")) fehlende.push(\"Pfad Mitarbeiter\");\nif (!flow.get(\"tmpPathProduktionen\")) fehlende.push(\"Pfad Produktionen\");\nif (!flow.get(\"tmpPathStammdaten\")) fehlende.push(\"Pfad Stammdaten\");\n\nif (fehlende.length > 0) {\n    msg.payload = \"Bitte ausfüllen: \" + fehlende.join(\", \");\n    msg.ok = false;\n    return [msg, null]; // Output 1: Fehler\n} else {\n    msg.ok = true;\n    msg.payload = \"Alle Pflichtfelder sind ausgefüllt.\";\n    return [null, msg]; // Output 2: Alles ok\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2580,
        "wires": [
            [
                "d1db0ff322ae3752"
            ],
            [
                "257e2521945c94c9"
            ]
        ]
    },
    {
        "id": "d1db0ff322ae3752",
        "type": "ui-notification",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 950,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "257e2521945c94c9",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "name": "tmp-Flows > Global",
        "func": "global.set(\"PathMitarbeiter\", flow.get(\"tmpPathMitarbeiter\") || \"\");\nglobal.set(\"PathProduktionen\", flow.get(\"tmpPathProduktionen\") || \"\");\nglobal.set(\"PathStammdaten\", flow.get(\"tmpPathStammdaten\") || \"\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2600,
        "wires": [
            [
                "16e7539e98782819"
            ]
        ]
    },
    {
        "id": "16e7539e98782819",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "name": "JSON formatieren",
        "func": "// Holt die Schemas aus global:\nlet PathMitarbeiter = global.get(\"PathMitarbeiter\") || \"\";\nlet PathProduktionen = global.get(\"PathProduktionen\") || \"\";\nlet PathStammdaten = global.get(\"PathStammdaten\") || \"\";\n\n\n// Baue ein JSON-Objekt\nlet out = {\n    PathMitarbeiter,\n    PathProduktionen,\n    PathStammdaten\n};\n\n// Speichern als String im msg.payload:\nmsg.payload = JSON.stringify(out, null, 3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2600,
        "wires": [
            [
                "fea15a378a0e4b9e"
            ]
        ]
    },
    {
        "id": "fea15a378a0e4b9e",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "name": "path.json schreiben",
        "filename": "${IMMO24_USERDATA}/path.json",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1390,
        "y": 2600,
        "wires": [
            [
                "6aa73b130afa0192"
            ]
        ]
    },
    {
        "id": "fa26e2f162763260",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "[UI] Ersteinrichtung-Dialog einblenden",
        "func": "msg.payload = {\n    groups: {\n        show: ['Ersteinrichtung']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2280,
        "wires": [
            [
                "0a6ef210fc91feea"
            ]
        ]
    },
    {
        "id": "0a6ef210fc91feea",
        "type": "ui-control",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "",
        "ui": "826de81a1d3da833",
        "events": "all",
        "x": 1580,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "6aa73b130afa0192",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "[UI] Konfig-Page weiterleiten",
        "func": "msg.payload = {\n    page: 'Konfiguration',  // Seite zu der gewechselt werden soll\n    pages: {\n        enable: ['Konfiguration'],       // Diese Seite wird aktiviert (sichtbar)\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2240,
        "wires": [
            [
                "0a6ef210fc91feea",
                "5b65ad269724dba9"
            ]
        ]
    },
    {
        "id": "1a15ac24124bdf48",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "START",
        "links": [
            "bb49eb64a95fd55b"
        ],
        "x": 435,
        "y": 260,
        "wires": [
            [
                "12b3b8916db0a005"
            ]
        ]
    },
    {
        "id": "9994f906d9c27dc4",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "START",
        "links": [
            "bb49eb64a95fd55b"
        ],
        "x": 435,
        "y": 620,
        "wires": [
            [
                "032a562dc99f4af8"
            ]
        ]
    },
    {
        "id": "c327d6b8c52ff001",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "START",
        "links": [
            "bb49eb64a95fd55b"
        ],
        "x": 395,
        "y": 1020,
        "wires": [
            [
                "7e2571b409d5d436"
            ]
        ]
    },
    {
        "id": "19241936d8672013",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "START",
        "links": [
            "bb49eb64a95fd55b"
        ],
        "x": 395,
        "y": 1700,
        "wires": [
            [
                "f3266bc13293c407"
            ]
        ]
    },
    {
        "id": "bb49eb64a95fd55b",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "START",
        "mode": "link",
        "links": [
            "19241936d8672013",
            "1a15ac24124bdf48",
            "9994f906d9c27dc4",
            "c327d6b8c52ff001",
            "a762fc9288921434"
        ],
        "x": 1105,
        "y": 2240,
        "wires": []
    },
    {
        "id": "decba3fee1e2bca6",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "path.json lesen",
        "filename": "${IMMO24_USERDATA}/path.json",
        "filenameType": "env",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1480,
        "y": 2160,
        "wires": [
            [
                "ca07f5630f9e9739"
            ]
        ]
    },
    {
        "id": "ca07f5630f9e9739",
        "type": "json",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "JSON parsen",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1680,
        "y": 2160,
        "wires": [
            [
                "50f79ec4f9467c3b"
            ]
        ]
    },
    {
        "id": "50f79ec4f9467c3b",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "tmp-Flows + Global initialisieren",
        "func": "let data = msg.payload || {};\n\n// flow.set für UI-Textfelder (z. B. damit Pflichtfeldprüfung funktioniert)\nflow.set(\"tmpPathMitarbeiter\", data.PathMitarbeiter || \"\");\nflow.set(\"tmpPathProduktionen\", data.PathProduktionen || \"\");\nflow.set(\"tmpPathStammdaten\", data.PathStammdaten || \"\");\n\n// global.set für allgemeine Verwendung im Flow\nglobal.set(\"PathMitarbeiter\", data.PathMitarbeiter || \"\");\nglobal.set(\"PathProduktionen\", data.PathProduktionen || \"\");\nglobal.set(\"PathStammdaten\", data.PathStammdaten || \"\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 2160,
        "wires": [
            [
                "67a76ef6609ed0cf"
            ]
        ]
    },
    {
        "id": "5b65ad269724dba9",
        "type": "delay",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "Delay Loop",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1590,
        "y": 2240,
        "wires": [
            [
                "decba3fee1e2bca6"
            ]
        ]
    },
    {
        "id": "032a562dc99f4af8",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "schemes.json Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/schemes.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            [
                "9b985426c86b5090"
            ]
        ]
    },
    {
        "id": "f51285520b00a3d3",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "schemes.json Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/schemes.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 760,
        "wires": [
            [
                "b7b705aa3b8c3c14"
            ]
        ]
    },
    {
        "id": "f3b026d31f0623fa",
        "type": "ui-control",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "New Connection",
        "ui": "826de81a1d3da833",
        "events": "connect",
        "x": 410,
        "y": 2200,
        "wires": [
            [
                "decba3fee1e2bca6"
            ]
        ]
    },
    {
        "id": "ae748b2fe00cc633",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "group": "d4665a684c798a6a",
        "page": "",
        "ui": "",
        "name": "Header Login-Page",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"display:flex; flex-direction:column; align-items:center; justify-content:center; padding-bottom:12px;\">\n    <img src=\"/logo.png\" alt=\"Logo\" style=\"max-width:300px; width:80%; margin-bottom:10px;\" />\n    <span style=\"font-size:0.88em; color:#777; margin-top:2px;\">v{{msg.release}}</span>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 710,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "6a67adf057122650",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "group": "62f81a586be9f22e",
        "page": "",
        "ui": "",
        "name": "Kuerzel Text",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<p>Für diesen Nutzer ist kein Kürzel definiert.</p>\n<p>Bitte ein Kürzel festlegen.</p>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "6c3939e79075838a",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 1260,
        "wires": [
            [
                "9f0f52d158968973"
            ]
        ]
    },
    {
        "id": "9e9531cb7b3cf674",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "g": "b72a4f67de28cc65",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1080,
        "y": 2320,
        "wires": [
            [
                "fa26e2f162763260"
            ]
        ]
    },
    {
        "id": "f4a0937259ba7471",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "g": "b26115dc10ade7b1",
        "group": "9d7062b4e3dcd9da",
        "page": "",
        "ui": "",
        "name": "Ersteinrichtung Text",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<p>Bitte folgende Pfade definieren:</p>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 540,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "a56e7a1f4e0144f2",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "group": "f925aada115de858",
        "page": "",
        "ui": "",
        "name": "Angemeldeter Nutzer",
        "order": 1,
        "width": "2",
        "height": "1",
        "head": "",
        "format": "<span style=\"display:flex; align-items:center; gap:8px;\">\n  <svg height=\"26\" width=\"26\" viewBox=\"0 0 24 24\" style=\"fill:#222;\">\n    <path d=\"M12 12c2.7 0 8 1.34 8 4v2H4v-2c0-2.66 5.3-4 8-4zm0-2c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z\"/>\n  </svg>\n  <span style=\"font-size:1.4em; font-weight:500; font-family:Inter,Roboto,Arial,sans-serif;\">{{msg.payload}}</span>\n</span>\n\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2240,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "a6880e826ba5ad1a",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 720,
        "y": 1760,
        "wires": [
            [
                "f94793cbe28403ca"
            ]
        ]
    },
    {
        "id": "f08129ae41d7a57b",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "group": "a3aa87200649281b",
        "page": "",
        "ui": "",
        "name": "Text Pfade",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"font-size:1.09em; line-height:1.6;\">\n    <strong style=\"font-size:1.18em;\">Pfade</strong><br>\n    <span>Hier können die Verzeichnis-Pfade geändert werden.</span><br>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 770,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b74e6bae90ce69cb",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "group": "9ad90850fbcf38ac",
        "page": "",
        "ui": "",
        "name": "Text Projektschema",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"font-size:1.09em; line-height:1.6;\">\n    <strong style=\"font-size:1.18em;\">Projekt-Schema</strong><br>\n    <span>Hier wird das Namensschema des Projektordners festgelegt.</span><br>\n    <span style=\"color:#246fe5; font-weight:500;\">Verfügbare Variablen: </span>\n    <code style=\"background:#f4f6f8; padding:2px 8px; border-radius:5px;\">\n&#123;&#123;datum&#125;&#125; &#123;&#123;projektname&#125;&#125; &#123;&#123;moid&#125;&#125; &#123;&#123;benutzer&#125;&#125; &#123;&#123;kunde&#125;&#125;\n  </code>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "aeb8a17f71795a4c",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "group": "9ad90850fbcf38ac",
        "page": "",
        "ui": "",
        "name": "Text Sessionschema",
        "order": 5,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"font-size:1.09em; line-height:1.6;\">\n    <strong style=\"font-size:1.18em;\">Session-Schema</strong><br>\n    <span>Hier wird das Namensschema des Session-Files festgelegt.</span><br>\n    <span style=\"color:#246fe5; font-weight:500;\">Verfügbare Variablen: </span>\n    <code style=\"background:#f4f6f8; padding:2px 8px; border-radius:5px;\">\n    &#123;&#123;datum&#125;&#125; &#123;&#123;projektname&#125;&#125; &#123;&#123;moid&#125;&#125; &#123;&#123;benutzer&#125;&#125; &#123;&#123;kunde&#125;&#125; &#123;&#123;produktionsstufe&#125;&#125; &#123;&#123;version&#125;&#125;\n  </code>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "acef5155e6d33582",
        "type": "ui-button",
        "z": "dc0d981398a42d88",
        "group": "6add80470fad5859",
        "name": "Konfig Beenden",
        "label": "Speichern und Schließen",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 500,
        "y": 2720,
        "wires": [
            [
                "0bc5460d1e11cf09",
                "884c64afe7d27cf9"
            ]
        ]
    },
    {
        "id": "59762f656dd25a68",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "[UI] Projektanlage-Page weiterleiten",
        "func": "msg.payload = {\n    page: 'Projektanlage',  // Seite zu der gewechselt werden soll\n    pages: {\n        disable: ['Konfiguration'],       // Diese Seite wird aktiviert (sichtbar)\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2720,
        "wires": [
            [
                "e7dff078a3ccb0c5"
            ]
        ]
    },
    {
        "id": "e7dff078a3ccb0c5",
        "type": "ui-control",
        "z": "dc0d981398a42d88",
        "name": "",
        "ui": "826de81a1d3da833",
        "events": "all",
        "x": 1110,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "f31c04d58dac383f",
        "type": "fs-ops-dir",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "User-Verzeichnis lesen",
        "path": "activeUserPath",
        "pathType": "msg",
        "filter": "\"immo24\"",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 1580,
        "y": 1460,
        "wires": [
            [
                "5e2fd2d2411c3bed"
            ]
        ]
    },
    {
        "id": "5e2fd2d2411c3bed",
        "type": "switch",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "immo24-Verzeichnis vorhanden",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 1380,
        "wires": [
            [
                "20b5c1a5c4dbe03d"
            ],
            [
                "4befd131b88b6f45"
            ]
        ],
        "outputLabels": [
            "immo24 nicht vorhanden",
            "immo24 vorhanden"
        ]
    },
    {
        "id": "20b5c1a5c4dbe03d",
        "type": "fs-ops-mkdir",
        "z": "dc0d981398a42d88",
        "g": "a101d0e8677d1f77",
        "name": "immo24 anlegen",
        "path": "activeUserPath",
        "pathType": "msg",
        "dirname": "immo24",
        "dirnameType": "str",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1890,
        "y": 1260,
        "wires": [
            [
                "4befd131b88b6f45"
            ]
        ]
    },
    {
        "id": "7b87b9d3b685a32f",
        "type": "delay",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Delay Loop",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1990,
        "y": 520,
        "wires": [
            [
                "12b3b8916db0a005"
            ]
        ]
    },
    {
        "id": "8bb41dd550361de6",
        "type": "delay",
        "z": "dc0d981398a42d88",
        "g": "2eb8ddaff3cdbe23",
        "name": "Delay Loop",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1990,
        "y": 880,
        "wires": [
            [
                "032a562dc99f4af8"
            ]
        ]
    },
    {
        "id": "0bc5460d1e11cf09",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "d": true,
        "name": "Logout",
        "mode": "link",
        "links": [],
        "x": 665,
        "y": 2720,
        "wires": []
    },
    {
        "id": "2c322a0a469a0476",
        "type": "change",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "release",
                "pt": "msg",
                "to": "APP_VERSION",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "ae748b2fe00cc633"
            ]
        ]
    },
    {
        "id": "2613f69ed7d2daf9",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "",
        "url": "api/logout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1400,
        "wires": [
            [
                "323882591cd862a3",
                "9d0818970aca3db6"
            ]
        ]
    },
    {
        "id": "194d99600dc9f4e6",
        "type": "websocket out",
        "z": "dc0d981398a42d88",
        "name": "",
        "server": "7058d859c30f2997",
        "client": "",
        "x": 2530,
        "y": 1080,
        "wires": []
    },
    {
        "id": "aeadd963dbb52430",
        "type": "ui-template",
        "z": "dc0d981398a42d88",
        "group": "6add80470fad5859",
        "page": "",
        "ui": "",
        "name": "",
        "order": 1,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<script>\n  $scope.$watch('msg', function(msg) {\n  if(msg && msg.topic === 'close_window') {\n    window.close();\n  }\n});\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 2800,
        "wires": [
            [
                "bf6dd013f8b9c554"
            ]
        ]
    },
    {
        "id": "884c64afe7d27cf9",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "function 2",
        "func": "msg.topic = \"close_window\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2800,
        "wires": [
            [
                "bf6dd013f8b9c554",
                "aeadd963dbb52430"
            ]
        ]
    },
    {
        "id": "bf6dd013f8b9c554",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 2920,
        "wires": []
    },
    {
        "id": "f33bbf72b9b63711",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "",
        "url": "/api/check-password",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1600,
        "y": 1680,
        "wires": [
            [
                "86241f78f6249423",
                "88c706e3490e5d0c"
            ]
        ]
    },
    {
        "id": "99a7ae697d4f679c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Passwort-Check",
        "func": "const given = (msg.givenPassword ?? '').toString();\n\n// Datei-Inhalt steckt jetzt in msg.payload (utf8-String)\nlet stored = '';\nconst raw = (msg.payload ?? '').toString().trim();\n\nif (!raw) {\n    // Kein gespeichertes PW vorhanden -> Zugriff verweigern\n    msg.statusCode = 401;\n    msg.payload = { ok: false };\n    return msg;\n}\n\n// Erst versuchen, JSON zu lesen { \"password\": \"...\" }\ntry {\n    const obj = JSON.parse(raw);\n    if (obj && typeof obj.password === 'string') {\n        stored = obj.password;\n    } else {\n        // Kein Feld \"password\" -> treat as plain\n        stored = raw;\n    }\n} catch {\n    // Nicht-JSON -> treat as plain string\n    stored = raw;\n}\n\nif (given && stored && given === stored) {\n    msg.statusCode = 200;\n    msg.payload = { ok: true };\n} else {\n    msg.statusCode = 401;\n    msg.payload = { ok: false };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2550,
        "y": 1660,
        "wires": [
            [
                "5159326f0de47168"
            ]
        ]
    },
    {
        "id": "5159326f0de47168",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2730,
        "y": 1660,
        "wires": []
    },
    {
        "id": "86241f78f6249423",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 1740,
        "wires": []
    },
    {
        "id": "paths_get_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "GET /api/paths",
        "url": "/api/paths",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2040,
        "y": 260,
        "wires": [
            [
                "paths_get_setfile"
            ]
        ]
    },
    {
        "id": "paths_get_setfile",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||   // Fallback, falls du es global setzt\n    '';\n\nif (!base) {\n    // optionales Logging hilft beim Debuggen\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n    // Wenn du willst, kannst du hier noch einen Default setzen:\n    // msg.filename = '/tmp/path.json'; return msg;\n}\n\nmsg.filename = base + '/path.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 260,
        "wires": [
            [
                "paths_get_access",
                "fdf0491bc433bff1"
            ]
        ]
    },
    {
        "id": "paths_get_access",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 2460,
        "y": 260,
        "wires": [
            [
                "paths_get_filein"
            ],
            [
                "paths_get_empty"
            ]
        ]
    },
    {
        "id": "paths_get_filein",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "lesen (utf8)",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "x": 2660,
        "y": 260,
        "wires": [
            [
                "paths_get_parse"
            ]
        ]
    },
    {
        "id": "paths_get_parse",
        "type": "json",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2830,
        "y": 260,
        "wires": [
            [
                "paths_get_attach"
            ]
        ]
    },
    {
        "id": "paths_get_empty",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Fallback: {}",
        "func": "msg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2670,
        "y": 320,
        "wires": [
            [
                "paths_get_attach"
            ]
        ]
    },
    {
        "id": "paths_get_attach",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Version anhängen + Globals",
        "func": "let ver = global.get('paths_version');\nif (!ver) { ver = String(Date.now()); global.set('paths_version', ver); }\nconst data = typeof msg.payload === 'object' && msg.payload ? msg.payload : {};\nif (data.PathMitarbeiter !== undefined) global.set('PathMitarbeiter', data.PathMitarbeiter);\nif (data.PathProduktionen !== undefined) global.set('PathProduktionen', data.PathProduktionen);\nif (data.PathStammdaten !== undefined) global.set('PathStammdaten', data.PathStammdaten);\nif (data.PathPTUser !== undefined) global.set('PathPTUser', data.PathPTUser);\nmsg.payload = { data, version: ver };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3060,
        "y": 290,
        "wires": [
            [
                "paths_get_out"
            ]
        ]
    },
    {
        "id": "paths_get_out",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "200",
        "statusCode": "",
        "headers": {},
        "x": 3250,
        "y": 290,
        "wires": []
    },
    {
        "id": "paths_put_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "PUT /api/paths",
        "url": "/api/paths",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 2040,
        "y": 420,
        "wires": [
            [
                "paths_put_check"
            ]
        ]
    },
    {
        "id": "paths_put_check",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Body parsen + prüfen",
        "func": "// Robust parse helper\nfunction safeParse(x) {\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\n\nconst body = safeParse(msg.payload);\n\n// Grundprüfung\nif (!body || typeof body.version !== 'string' || typeof body.data !== 'object' || body.data === null || Array.isArray(body.data)) {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\n\n// Felder whitelisten/normalisieren\nconst d = body.data;\nconst normalized = {\n  PathMitarbeiter: typeof d.PathMitarbeiter === 'string' ? d.PathMitarbeiter : '',\n  PathProduktionen: typeof d.PathProduktionen === 'string' ? d.PathProduktionen : '',\n  PathStammdaten: typeof d.PathStammdaten === 'string' ? d.PathStammdaten : '',\n  PathPTUser: typeof d.PathPTUser === 'string' ? d.PathPTUser : ''\n};\n\n// Ergebnis für die weiteren Nodes bereitstellen\nmsg.body = { data: normalized, version: body.version };\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 420,
        "wires": [
            [
                "paths_put_setfile",
                "390fc01b433f604d"
            ],
            [
                "paths_put_400",
                "31559c4fdeac3181"
            ]
        ]
    },
    {
        "id": "paths_put_400",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 2510,
        "y": 460,
        "wires": []
    },
    {
        "id": "paths_put_setfile",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Pfad setzen",
        "func": "// Function-Node (Sandbox) → KEIN process.env!\n// Richtig: env.get('IMMO24_USERDATA')\nconst base =\n    env.get('IMMO24_USERDATA') ||\n    global.get('IMMO24_USERDATA') ||   // Fallback, falls du es global setzt\n    '';\n\nif (!base) {\n    // optionales Logging hilft beim Debuggen\n    node.warn('IMMO24_USERDATA ist leer – verwende Fallback im UserData-Verzeichnis?');\n    // Wenn du willst, kannst du hier noch einen Default setzen:\n    // msg.filename = '/tmp/path.json'; return msg;\n}\n\nmsg.filename = base + '/path.json';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 420,
        "wires": [
            [
                "paths_put_compare"
            ]
        ]
    },
    {
        "id": "paths_put_compare",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Version vergleichen",
        "func": "const cur = global.get('paths_version') || '0';\nconst cli = String(msg.body?.version || '');\nif (cli !== cur) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion: cur };\n  return [null, msg];\n}\nconst next = msg.body.data || {};\nmsg.payload = JSON.stringify(next, null, 2);\nmsg.nextVersion = String(Date.now());\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 2750,
        "y": 420,
        "wires": [
            [
                "paths_put_write"
            ],
            [
                "paths_put_409"
            ]
        ]
    },
    {
        "id": "paths_put_409",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 2960,
        "y": 460,
        "wires": []
    },
    {
        "id": "paths_put_write",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "path.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2960,
        "y": 420,
        "wires": [
            [
                "paths_put_globals"
            ]
        ]
    },
    {
        "id": "paths_put_globals",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "Globals setzen + Antwort",
        "func": "try { var data = JSON.parse(msg.payload); } catch(e) { data = {}; }\nif (data.PathMitarbeiter !== undefined) global.set('PathMitarbeiter', data.PathMitarbeiter);\nif (data.PathProduktionen !== undefined) global.set('PathProduktionen', data.PathProduktionen);\nif (data.PathStammdaten !== undefined) global.set('PathStammdaten', data.PathStammdaten);\nif (data.PathPTUser !== undefined) global.set('PathPTUser', data.PathPTUser);\nif (msg.nextVersion) global.set('paths_version', msg.nextVersion);\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('paths_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 420,
        "wires": [
            [
                "paths_put_200"
            ]
        ]
    },
    {
        "id": "paths_put_200",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 3380,
        "y": 420,
        "wires": []
    },
    {
        "id": "fdf0491bc433bff1",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 320,
        "wires": []
    },
    {
        "id": "390fc01b433f604d",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2320,
        "y": 480,
        "wires": []
    },
    {
        "id": "31559c4fdeac3181",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "e05512e54561bc65",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2320,
        "y": 520,
        "wires": []
    },
    {
        "id": "b31d7e3c8e683585",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "adminpw.json lesen",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2320,
        "y": 1660,
        "wires": [
            [
                "99a7ae697d4f679c"
            ]
        ]
    },
    {
        "id": "88c706e3490e5d0c",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "Body sichern + Pfad setzen",
        "func": "const body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst given = (body.password ?? '').toString();\n\nif (!given) {\n    msg.statusCode = 400;\n    msg.payload = { ok: false, error: 'missing_password' };\n    return [null, msg];\n}\n\n// Passwort für später parken\nmsg.givenPassword = given;\n\n// Datei-Pfad setzen (hier über den File-Node einfacher per ENV!)\n// -> im nachfolgenden \"file in\" Node dann Filename = ${IMMO24_USERDATA}/adminpw.json (Typ: env)\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 1680,
        "wires": [
            [
                "b31d7e3c8e683585"
            ],
            [
                "5159326f0de47168"
            ]
        ]
    },
    {
        "id": "adminpw_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "POST /api/adminpw",
        "url": "/api/adminpw",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1570,
        "y": 1840,
        "wires": [
            [
                "adminpw_validate"
            ]
        ]
    },
    {
        "id": "adminpw_validate",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "validate fields",
        "func": "const body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst newPassword = (body.newPassword ?? '').toString();\nconst repeatPassword = (body.repeatPassword ?? '').toString();\n\nif (!newPassword || !repeatPassword) {\n  msg.statusCode = 400;\n  msg.payload = { ok:false, error:'missing_fields' };\n  return [null, msg];\n}\nif (newPassword !== repeatPassword) {\n  msg.statusCode = 422;\n  msg.payload = { ok:false, error:'password_mismatch' };\n  return [null, msg];\n}\n// ok → für File-Node String vorbereiten\nmsg.payload = JSON.stringify({ password: newPassword }, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 1970,
        "y": 1840,
        "wires": [
            [
                "adminpw_write",
                "62d75ac90e54201e"
            ],
            [
                "adminpw_err",
                "62d75ac90e54201e"
            ]
        ]
    },
    {
        "id": "adminpw_write",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "write ${IMMO24_USERDATA}/adminpw.json",
        "filename": "${IMMO24_USERDATA}/adminpw.json",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2270,
        "y": 1840,
        "wires": [
            [
                "adminpw_ok"
            ]
        ]
    },
    {
        "id": "adminpw_ok",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "200 OK",
        "func": "msg.statusCode = 200;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2500,
        "y": 1840,
        "wires": [
            [
                "adminpw_out"
            ]
        ]
    },
    {
        "id": "adminpw_err",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "error response",
        "statusCode": "",
        "headers": {},
        "x": 2200,
        "y": 1900,
        "wires": []
    },
    {
        "id": "adminpw_out",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2660,
        "y": 1840,
        "wires": []
    },
    {
        "id": "62d75ac90e54201e",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "02b0fe64050de273",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 1760,
        "wires": []
    },
    {
        "id": "c0a1ea6d1b9a1112",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "",
        "url": "/api/schema",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2240,
        "y": 620,
        "wires": [
            [
                "7bbbd4653db740f1"
            ]
        ]
    },
    {
        "id": "0c2bb7a2a83a1113",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2670,
        "y": 680,
        "wires": [
            [
                "f5d8c9a8a2a1114"
            ]
        ]
    },
    {
        "id": "f5d8c9a8a2a1114",
        "type": "json",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "parse (tolerant)",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2670,
        "y": 620,
        "wires": [
            [
                "9f7b5d6ac2d1115"
            ]
        ]
    },
    {
        "id": "9f7b5d6ac2d1115",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "Wrap {data, version}",
        "func": "const obj = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst data = {\n  projektordnerSchema: (obj.projektordnerSchema ?? '').toString(),\n  sessionSchema: (obj.sessionSchema ?? '').toString()\n};\nmsg.payload = { data, version: String(Date.now()) };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 2900,
        "y": 620,
        "wires": [
            [
                "c3e4d5f6a7b1116",
                "77a939fd00b2c94a"
            ]
        ]
    },
    {
        "id": "c3e4d5f6a7b1116",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "200",
        "statusCode": "",
        "headers": {},
        "x": 3100,
        "y": 620,
        "wires": []
    },
    {
        "id": "2a9c0d1e2f311117",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "",
        "url": "/api/schema",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 2240,
        "y": 740,
        "wires": [
            [
                "8e7d6c5b4a311119",
                "2729b38d7e8e8fb5"
            ]
        ]
    },
    {
        "id": "8e7d6c5b4a311119",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "Validate + toWrite",
        "func": "// Body robust ermitteln ({schema:{…}}, {data:{…}} oder flach)\nconst body = (typeof msg.payload === 'object' && msg.payload) ? msg.payload : {};\nconst container =\n  (body.schema && typeof body.schema === 'object') ? body.schema :\n    (body.data && typeof body.data === 'object') ? body.data :\n      body;\n\nconst projekt = container?.projektordnerSchema;\nconst session = container?.sessionSchema;\nconst version = body?.version;\n\n// Validierung\nif (typeof version !== 'string' || typeof projekt !== 'string' || typeof session !== 'string') {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\n\n// Für File-Node (schreibt nur die Schemes, ohne Version)\nmsg.payload = JSON.stringify({\n  projektordnerSchema: projekt,\n  sessionSchema: session\n}, null, 2);\n\nmsg.clientVersion = version;\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 800,
        "wires": [
            [
                "5fa35bb78c259faa",
                "2729b38d7e8e8fb5"
            ],
            [
                "3f2e1d0c9b811121",
                "2729b38d7e8e8fb5"
            ]
        ],
        "outputLabels": [
            "okay",
            "error"
        ]
    },
    {
        "id": "a1b2c3d4e5f61120",
        "type": "file",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 2950,
        "y": 720,
        "wires": [
            [
                "3f2e1d0c9b811121"
            ]
        ]
    },
    {
        "id": "3f2e1d0c9b811121",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "Reply",
        "statusCode": "",
        "headers": {},
        "x": 3250,
        "y": 780,
        "wires": [],
        "info": "Bei Erfolg sendet der vorangehende http response (200) schon –\ndieser Knoten dient als Fallback für Fehlerausgänge."
    },
    {
        "id": "7bbbd4653db740f1",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/schemes.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2450,
        "y": 660,
        "wires": [
            [
                "0c2bb7a2a83a1113"
            ]
        ]
    },
    {
        "id": "77a939fd00b2c94a",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 660,
        "wires": []
    },
    {
        "id": "5fa35bb78c259faa",
        "type": "function",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "schemes.json Verzeichnis",
        "func": "const base = global.get('PathStammdaten');\nif (!base) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'no_stammdaten_path' };\n    return [null, msg];\n}\nmsg.filename = base + '/schemes.json';\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 740,
        "wires": [
            [
                "a1b2c3d4e5f61120"
            ]
        ]
    },
    {
        "id": "2729b38d7e8e8fb5",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "g": "f3f4b4a22f8d1111",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2900,
        "y": 820,
        "wires": []
    },
    {
        "id": "0429d8b08e8463f2",
        "type": "change",
        "z": "dc0d981398a42d88",
        "name": "global.activeUser = payload.user",
        "rules": [
            {
                "t": "set",
                "p": "activeUser",
                "pt": "global",
                "to": "payload.user",
                "tot": "msg"
            }
        ],
        "x": 3020,
        "y": 1220,
        "wires": [
            [
                "2b57da8d419bc3d5"
            ]
        ]
    },
    {
        "id": "2b57da8d419bc3d5",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 3240,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f3f83af13edd1713",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "POST /api/logout",
        "url": "/api/logout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2520,
        "y": 1280,
        "wires": [
            [
                "89f32ddc71725f1e"
            ]
        ]
    },
    {
        "id": "89f32ddc71725f1e",
        "type": "change",
        "z": "dc0d981398a42d88",
        "name": "global.activeUser = null",
        "rules": [
            {
                "t": "set",
                "p": "activeUser",
                "pt": "global",
                "to": "null",
                "tot": "json"
            }
        ],
        "x": 2810,
        "y": 1280,
        "wires": [
            [
                "cd81f2a98454698b"
            ]
        ]
    },
    {
        "id": "cd81f2a98454698b",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "200 OK",
        "statusCode": "200",
        "headers": {},
        "x": 3020,
        "y": 1280,
        "wires": []
    },
    {
        "id": "2f1651475a302004",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "g": "0e1923748c0d505b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1710,
        "y": 1020,
        "wires": [
            [
                "3e3926b522449b96"
            ]
        ]
    },
    {
        "id": "323882591cd862a3",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Wipe User",
        "func": "// Globale Variable löschen (reset)\nglobal.set(\"activeUser\", null);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "9468d90cbe4abb54",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 1500,
        "wires": [
            [
                "323882591cd862a3"
            ]
        ]
    },
    {
        "id": "9d0818970aca3db6",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "post logout",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 1340,
        "wires": []
    },
    {
        "id": "b39896ec151883db",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "name": "Kürzel-File prüfen",
        "path": "",
        "pathType": "str",
        "filename": "PathKuerzel",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 2710,
        "y": 1420,
        "wires": [
            [
                "dae0fd073aefd226"
            ],
            []
        ]
    },
    {
        "id": "dae0fd073aefd226",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "name": "immo24-user.json lesen",
        "filename": "PathKuerzel",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2950,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "3606cd78175f49ab",
        "type": "inject",
        "z": "dc0d981398a42d88",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2550,
        "y": 1460,
        "wires": [
            [
                "read_ma_dir"
            ]
        ]
    },
    {
        "id": "read_ma_dir",
        "type": "fs-ops-dir",
        "z": "dc0d981398a42d88",
        "name": "MA-Ordner lesen",
        "path": "PathMitarbeiter",
        "pathType": "global",
        "filter": "",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 3190,
        "y": 1560,
        "wires": [
            [
                "filter_hidden"
            ]
        ]
    },
    {
        "id": "filter_hidden",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Unsichtbare filtern",
        "func": "if(!Array.isArray(msg.payload)) msg.payload=[];\nmsg.payload = msg.payload.filter(n => typeof n === 'string' && !n.startsWith('.'));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3390,
        "y": 1560,
        "wires": [
            [
                "to_full_paths"
            ]
        ]
    },
    {
        "id": "to_full_paths",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "zu Pfaden konvertieren",
        "func": "const base = global.get('PathMitarbeiter') || '';\nmsg.payload = (msg.payload || []).map(n => base + '/' + n);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3610,
        "y": 1560,
        "wires": [
            [
                "stats_paths"
            ]
        ]
    },
    {
        "id": "stats_paths",
        "type": "fs-ops-stats",
        "z": "dc0d981398a42d88",
        "name": "Statistiken (Array)",
        "path": "",
        "pathType": "str",
        "filename": "payload",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 3830,
        "y": 1560,
        "wires": [
            [
                "only_directory_names"
            ]
        ]
    },
    {
        "id": "only_directory_names",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Nur Ordnernamen (Array)",
        "func": "const pfade = msg.payload || [];\nconst stats = msg.stats || [];\nconst out = [];\nfor (let i = 0; i < pfade.length; i++) {\n  const s = stats[i];\n  let isDir = false;\n  if (s) {\n    if (typeof s.isDirectory === 'function') {\n      isDir = s.isDirectory();\n    } else if (typeof s.mode === 'number') {\n      isDir = (s.mode & 0o170000) === 0o040000;\n    }\n  }\n  if (isDir) {\n    const teile = pfade[i].split(/[\\\\/]/);\n    const name = teile[teile.length - 1];\n    if (name && !name.startsWith('.')) out.push(name);\n  }\n}\nmsg.payload = out;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4050,
        "y": 1560,
        "wires": [
            [
                "split_per_user"
            ]
        ]
    },
    {
        "id": "split_per_user",
        "type": "split",
        "z": "dc0d981398a42d88",
        "name": "pro Ordner",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2990,
        "y": 1620,
        "wires": [
            [
                "build_user_json_path"
            ]
        ]
    },
    {
        "id": "build_user_json_path",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Pfad zu immo24/immo24-user.json",
        "func": "const PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst userName = msg.payload; // einzelner Ordnername\nmsg.userName = userName;\nmsg.filename = `${PathMitarbeiter}/${userName}/immo24/immo24-user.json`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3220,
        "y": 1620,
        "wires": [
            [
                "check_exists"
            ]
        ]
    },
    {
        "id": "check_exists",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "name": "Datei vorhanden?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 3470,
        "y": 1620,
        "wires": [
            [
                "file_in_json"
            ],
            [
                "mark_empty"
            ]
        ]
    },
    {
        "id": "file_in_json",
        "type": "file in",
        "z": "dc0d981398a42d88",
        "name": "JSON lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 3670,
        "y": 1620,
        "wires": [
            [
                "extract_kuerzel"
            ]
        ]
    },
    {
        "id": "mark_empty",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "leer markieren",
        "func": "msg.payload = null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3680,
        "y": 1660,
        "wires": [
            [
                "join_back"
            ]
        ]
    },
    {
        "id": "join_back",
        "type": "join",
        "z": "dc0d981398a42d88",
        "name": "Array sammeln",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "useparts": true,
        "x": 3880,
        "y": 1660,
        "wires": [
            [
                "filter_nulls_sort"
            ]
        ]
    },
    {
        "id": "filter_nulls_sort",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Nulls entfernen + sortieren",
        "func": "// Erwartet msg.payload = Array aus Objekten oder nulls\n// Format: { name: \"<ordnername>\", kuerzel: \"<string>\" }\n\n// Nulls entfernen\nlet arr = Array.isArray(msg.payload)\n    ? msg.payload.filter(v => v && typeof v === 'object')\n    : [];\n\n// Sortieren nach 'name'\narr.sort((a, b) => String(a.name).localeCompare(String(b.name), 'de'));\n\n// sauberes msg zurückgeben\nmsg.payload = arr;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4100,
        "y": 1660,
        "wires": [
            [
                "0e752b1a10a0f407",
                "n_return"
            ]
        ]
    },
    {
        "id": "0e752b1a10a0f407",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4240,
        "y": 1720,
        "wires": []
    },
    {
        "id": "extract_kuerzel",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "Kürzel extrahieren (nie droppen)",
        "func": "// Erwartet msg.payload = String-Inhalt der Datei (vom file in / utf8)\n// msg.userName = Name des User-Ordners\n// Gibt { name: <username>, kuerzel: <string> } oder null zurück\n\nlet text = (msg.payload || \"\").trim();\n\nif (!text) {\n  msg.payload = null;   // leer → kein Eintrag\n} else {\n  msg.payload = { name: msg.userName, kuerzel: text };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3890,
        "y": 1620,
        "wires": [
            [
                "join_back"
            ]
        ]
    },
    {
        "id": "f5e0f6d97d4bf184",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "GET /api/user",
        "url": "/api/user",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2990,
        "y": 1760,
        "wires": [
            [
                "d46d40672dee4b34"
            ]
        ]
    },
    {
        "id": "d46d40672dee4b34",
        "type": "link call",
        "z": "dc0d981398a42d88",
        "name": "Scan-Flow aufrufen",
        "links": [
            "f3e2c2d834082ab2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 3190,
        "y": 1760,
        "wires": [
            [
                "c19b623fcc500c5b"
            ]
        ]
    },
    {
        "id": "c19b623fcc500c5b",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "200 JSON",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 3410,
        "y": 1760,
        "wires": []
    },
    {
        "id": "n_return",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "name": "Return an Caller",
        "mode": "return",
        "links": [],
        "x": 4285,
        "y": 1660,
        "wires": []
    },
    {
        "id": "f3e2c2d834082ab2",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "name": "Scan-Flow Eingang",
        "links": [],
        "x": 3035,
        "y": 1560,
        "wires": [
            [
                "read_ma_dir"
            ]
        ]
    },
    {
        "id": "8806e98ff9e91037",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "POST /api/login",
        "url": "/api/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2520,
        "y": 1220,
        "wires": [
            [
                "0429d8b08e8463f2"
            ]
        ]
    },
    {
        "id": "user_http_in",
        "type": "http in",
        "z": "dc0d981398a42d88",
        "name": "POST /api/user",
        "url": "/api/user",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2530,
        "y": 1020,
        "wires": [
            [
                "user_call_worker",
                "c3eb8604590cad9d"
            ]
        ]
    },
    {
        "id": "user_call_worker",
        "type": "link call",
        "z": "dc0d981398a42d88",
        "name": "run user worker",
        "links": [
            "user_link_in"
        ],
        "timeout": "120",
        "x": 2900,
        "y": 1020,
        "wires": [
            [
                "user_http_200",
                "a6777d4781e75d3d"
            ]
        ]
    },
    {
        "id": "user_http_200",
        "type": "http response",
        "z": "dc0d981398a42d88",
        "name": "HTTP 200",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 3080,
        "y": 1020,
        "wires": []
    },
    {
        "id": "user_link_in",
        "type": "link in",
        "z": "dc0d981398a42d88",
        "name": "Worker In",
        "links": [],
        "x": 2685,
        "y": 1080,
        "wires": [
            [
                "user_validate_bulk"
            ]
        ]
    },
    {
        "id": "user_validate_bulk",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "validate payload",
        "func": "const p = msg.payload || {};\nconst list = Array.isArray(p.mitarbeiter) ? p.mitarbeiter : [];\nif (!Array.isArray(list) || list.length === 0) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'mitarbeiter array required' };\n    return msg;\n}\nconst base = global.get('PathMitarbeiter') || '';\nmsg.base = base;\nmsg.payload = list.map(x => ({ name: String(x?.name ?? ''), kuerzel: String(x?.kuerzel ?? '') }));\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2885,
        "y": 1080,
        "wires": [
            [
                "user_split",
                "e339fdade55c3a6f"
            ]
        ]
    },
    {
        "id": "user_split",
        "type": "split",
        "z": "dc0d981398a42d88",
        "name": "per user",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3065,
        "y": 1080,
        "wires": [
            [
                "user_build_paths",
                "e339fdade55c3a6f"
            ]
        ]
    },
    {
        "id": "user_build_paths",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "build paths",
        "func": "const base = msg.base || '';\nconst name = msg.payload.name;\nconst kuerzel = msg.payload.kuerzel;\nif (!name) { msg.payload = { name, action: 'skipped:name-missing' }; return msg; }\nmsg.user = { name, kuerzel };\nmsg.paths = {\n  userDir: `${base}/${name}`,\n  metaDir: `${base}/${name}/immo24`,\n  metaFile: `${base}/${name}/immo24/immo24-user.json`\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 3225,
        "y": 1080,
        "wires": [
            [
                "user_access_userdir"
            ]
        ]
    },
    {
        "id": "user_access_userdir",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "name": "userDir exists?",
        "path": "",
        "pathType": "str",
        "filename": "paths.userDir",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 3425,
        "y": 1080,
        "wires": [
            [
                "user_access_metadir"
            ],
            [
                "user_mkdir_userdir"
            ]
        ]
    },
    {
        "id": "user_mkdir_userdir",
        "type": "fs-ops-mkdir",
        "z": "dc0d981398a42d88",
        "name": "mkdir userDir",
        "path": "",
        "pathType": "str",
        "dirname": "paths.userDir",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "dir",
        "fullpathType": "msg",
        "x": 3620,
        "y": 1100,
        "wires": [
            [
                "user_access_metadir"
            ]
        ]
    },
    {
        "id": "user_access_metadir",
        "type": "fs-ops-access",
        "z": "dc0d981398a42d88",
        "name": "metaDir exists?",
        "path": "",
        "pathType": "str",
        "filename": "paths.metaDir",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 3825,
        "y": 1080,
        "wires": [
            [
                "user_set_file_payload"
            ],
            [
                "user_mkdir_metadir",
                "3e7a88e641e2554e"
            ]
        ]
    },
    {
        "id": "user_mkdir_metadir",
        "type": "fs-ops-mkdir",
        "z": "dc0d981398a42d88",
        "name": "mkdir metaDir",
        "path": "",
        "pathType": "str",
        "dirname": "paths.metaDir",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "dir",
        "fullpathType": "msg",
        "x": 4180,
        "y": 1120,
        "wires": [
            [
                "user_set_file_payload"
            ]
        ]
    },
    {
        "id": "user_set_file_payload",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "payload/filename setzen",
        "func": "msg.filename = msg.paths.metaFile;\nmsg.payload = msg.user.kuerzel; // exakt wie geliefert\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4190,
        "y": 980,
        "wires": [
            [
                "user_write_file"
            ]
        ]
    },
    {
        "id": "user_write_file",
        "type": "file",
        "z": "dc0d981398a42d88",
        "name": "write immo24-user.json",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 4415,
        "y": 1080,
        "wires": [
            [
                "user_result_written"
            ]
        ]
    },
    {
        "id": "user_result_written",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "result entry",
        "func": "msg.payload = { name: msg.user.name, action: 'written' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4605,
        "y": 1080,
        "wires": [
            [
                "user_join"
            ]
        ]
    },
    {
        "id": "user_join",
        "type": "join",
        "z": "dc0d981398a42d88",
        "name": "collect results",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "x": 4775,
        "y": 1080,
        "wires": [
            [
                "user_summary"
            ]
        ]
    },
    {
        "id": "user_summary",
        "type": "function",
        "z": "dc0d981398a42d88",
        "name": "200 summary",
        "func": "const arr = Array.isArray(msg.payload) ? msg.payload : [];\nmsg.statusCode = 200;\nmsg.payload = { ok: true, results: arr, count: arr.length };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 4955,
        "y": 1080,
        "wires": [
            [
                "user_link_out"
            ]
        ]
    },
    {
        "id": "user_link_out",
        "type": "link out",
        "z": "dc0d981398a42d88",
        "name": "Worker Return",
        "mode": "return",
        "links": [],
        "x": 5135,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c3eb8604590cad9d",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2870,
        "y": 980,
        "wires": []
    },
    {
        "id": "a6777d4781e75d3d",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3080,
        "y": 980,
        "wires": []
    },
    {
        "id": "e339fdade55c3a6f",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 1140,
        "wires": []
    },
    {
        "id": "3e7a88e641e2554e",
        "type": "debug",
        "z": "dc0d981398a42d88",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 4080,
        "y": 1240,
        "wires": []
    },
    {
        "id": "886fa3dff40f66c4",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Template Pfad setzen",
        "func": "let PathMitarbeiter = global.get('PathMitarbeiter');\nlet activeUser = global.get('activeUser');\nmsg.dir = `${PathMitarbeiter}/${activeUser}/immo24/templates/`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 160,
        "wires": [
            [
                "542d2ab3e9ca86ab"
            ]
        ]
    },
    {
        "id": "542d2ab3e9ca86ab",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Templates lesen",
        "path": "dir",
        "pathType": "msg",
        "filter": "*.ptxt",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 620,
        "y": 160,
        "wires": [
            [
                "1783e5703cd84fe4"
            ]
        ]
    },
    {
        "id": "4f280f447ba900e3",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "kunden_stammdaten.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "26b26f7ae2735f2c"
            ]
        ]
    },
    {
        "id": "26b26f7ae2735f2c",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "JSON parsen",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 620,
        "y": 200,
        "wires": [
            [
                "463b654d92f0757a"
            ]
        ]
    },
    {
        "id": "9354621dcdb0fa1f",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Array filtern",
        "func": "// msg.payload ist das komplette Kunden/Ordner-Array\n\nmsg.options = msg.payload.map(k => ({ label: k.kunde, value: k.kunde }));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 200,
        "wires": [
            [
                "155d7272748534fd"
            ]
        ]
    },
    {
        "id": "1783e5703cd84fe4",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Array filtern",
        "func": "msg.options = msg.payload.map(e => ({ label: e, value: e }));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 160,
        "wires": [
            [
                "e3d6822e1a01b3d9"
            ]
        ]
    },
    {
        "id": "adc1ead1c46f301c",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Array filtern",
        "func": "// msg.payload enthält jetzt den gewählten Kundenname\nlet selectedKunde = msg.payload;\n\n// Stammdaten holen\nlet kundenArray = flow.get('kundenStammdaten') || [];\n\n// Passenden Kunden suchen\nlet eintrag = kundenArray.find(k => k.kunde === selectedKunde);\n\n// Ordner-Optionen bauen, aber nur für Produktionsstufen mit Klarname\nmsg.options = (eintrag?.ordner || [])\n    .filter(o => o.ist_Produktionsstufe)\n    .map(o => ({ label: o.label, value: o.name }));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "0a963be20f1e8016"
            ]
        ]
    },
    {
        "id": "6c770391f80f6f98",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "link in 2",
        "links": [
            "76182b64e9b2d9a8"
        ],
        "x": 185,
        "y": 180,
        "wires": [
            [
                "886fa3dff40f66c4",
                "d980148938fe696d",
                "4f8bcb239e8648f0"
            ]
        ]
    },
    {
        "id": "e3d6822e1a01b3d9",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Template-Dropdown",
        "mode": "link",
        "links": [
            "ae1e298cdec965b1"
        ],
        "x": 1195,
        "y": 160,
        "wires": []
    },
    {
        "id": "155d7272748534fd",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Kunden-Dropdown",
        "mode": "link",
        "links": [
            "d3b77d7fcf6d30e0"
        ],
        "x": 1195,
        "y": 200,
        "wires": []
    },
    {
        "id": "0a963be20f1e8016",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Produktionsstufe-Dropdown",
        "mode": "link",
        "links": [
            "242b8c8906ac8743"
        ],
        "x": 1195,
        "y": 240,
        "wires": []
    },
    {
        "id": "463b654d92f0757a",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Array speichern",
        "func": "// msg.payload ist das komplette Kunden/Ordner-Array\nflow.set('kundenStammdaten', msg.payload); // speichere das Array im Flow-Kontext\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 200,
        "wires": [
            [
                "9354621dcdb0fa1f"
            ]
        ]
    },
    {
        "id": "4ff909ecfe240e72",
        "type": "comment",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Produktionsstufen",
        "info": "",
        "x": 870,
        "y": 240,
        "wires": []
    },
    {
        "id": "5bb2e238bb454a2c",
        "type": "ui-text-input",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "91ae8c83e547fbd7",
        "name": "Projektname",
        "label": "📝 Projektname",
        "order": 4,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 490,
        "y": 500,
        "wires": [
            [
                "dfcc8cb3d516c81c"
            ]
        ]
    },
    {
        "id": "b5243e0c66e2913c",
        "type": "ui-text-input",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "91ae8c83e547fbd7",
        "name": "Mo-ID",
        "label": "🆔 Mo-ID",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 470,
        "y": 620,
        "wires": [
            [
                "943691cfea40756e"
            ]
        ]
    },
    {
        "id": "e328548f79e528dd",
        "type": "ui-dropdown",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "91ae8c83e547fbd7",
        "name": "Kunde",
        "label": "🏢 Kunde",
        "tooltip": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 470,
        "y": 420,
        "wires": [
            [
                "adc1ead1c46f301c",
                "867b11b1eea5e253"
            ]
        ]
    },
    {
        "id": "3107bbdc156cb1fd",
        "type": "ui-text-input",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "91ae8c83e547fbd7",
        "name": "Datum",
        "label": "📅 Datum",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "date",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 470,
        "y": 540,
        "wires": [
            [
                "18ace834940f05cc"
            ]
        ]
    },
    {
        "id": "e1a4d541d27ada53",
        "type": "ui-dropdown",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "91ae8c83e547fbd7",
        "name": "Produktionsstufe",
        "label": "📍 Produktionsstufe",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 510,
        "y": 660,
        "wires": [
            [
                "0cd05b587161c992"
            ]
        ]
    },
    {
        "id": "129513f184e0674f",
        "type": "ui-dropdown",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "91ae8c83e547fbd7",
        "name": "Template",
        "label": "📄 Template",
        "tooltip": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onChange",
        "x": 480,
        "y": 700,
        "wires": [
            [
                "3595a0c70851faf8"
            ]
        ]
    },
    {
        "id": "0f8b5377268eb5ef",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Datum heute",
        "func": "let today = new Date();\nlet yyyy = today.getFullYear();\nlet mm = String(today.getMonth() + 1).padStart(2, '0');\nlet dd = String(today.getDate()).padStart(2, '0');\nmsg.payload = `${yyyy}-${mm}-${dd}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 540,
        "wires": [
            [
                "3107bbdc156cb1fd"
            ]
        ]
    },
    {
        "id": "cd4727e3b14deeff",
        "type": "ui-button",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "91ae8c83e547fbd7",
        "name": "Zurücksetzen",
        "label": "Zurücksetzen",
        "order": 8,
        "width": 3,
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "red",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 500,
        "y": 840,
        "wires": [
            [
                "8386ea793ecb5d63",
                "6ee48779a11bb9b2",
                "4f8bcb239e8648f0",
                "5c14c4543faf4c94"
            ]
        ]
    },
    {
        "id": "8386ea793ecb5d63",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Reset Dropdown",
        "func": "msg.payload = [];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 840,
        "wires": [
            [
                "ee69128ef9ab3d71"
            ]
        ]
    },
    {
        "id": "5c14c4543faf4c94",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Initialize Flow",
        "func": "msg.payload = null;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 920,
        "wires": [
            [
                "867b11b1eea5e253",
                "18ace834940f05cc",
                "dfcc8cb3d516c81c",
                "943691cfea40756e",
                "0cd05b587161c992",
                "3595a0c70851faf8"
            ]
        ]
    },
    {
        "id": "6ee48779a11bb9b2",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Reset Text In",
        "func": "msg.payload = null;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 800,
        "wires": [
            [
                "d0cfb42fb9db00ba"
            ]
        ]
    },
    {
        "id": "e1e51838689893d3",
        "type": "ui-radio-group",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "2093508e61440187",
        "name": "Neu / Vorhanden",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 1,
        "columns": "2",
        "passthru": true,
        "options": [
            {
                "label": "neues Projekt",
                "value": "neu",
                "type": "str"
            },
            {
                "label": "vorhandenes Projekt",
                "value": "vorhanden",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 510,
        "y": 460,
        "wires": [
            [
                "3ecfee9bb798f6ec"
            ]
        ]
    },
    {
        "id": "a1b73032b0467d2a",
        "type": "ui-table",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "group": "403731bf400b250a",
        "name": "Projektkartei",
        "label": "",
        "order": 1,
        "width": "6",
        "height": "1",
        "maxrows": 0,
        "passthru": false,
        "autocols": false,
        "showSearch": true,
        "deselect": true,
        "selectionType": "click",
        "columns": [
            {
                "title": "Datum",
                "key": "date",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Projektname",
                "key": "projektname",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Mo-ID",
                "key": "moid",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Mitarbeiter*in",
                "key": "user",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 490,
        "y": 1040,
        "wires": [
            [
                "18fb279e655df17d"
            ]
        ]
    },
    {
        "id": "18fb279e655df17d",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Formatiere für Textfelder",
        "func": "let moidMsg = { payload: msg.payload.moid };\nlet projektnameMsg = { payload: msg.payload.projektname };\n\n// Datum parsen und formatieren\nlet dateStr = msg.payload.date || \"\";\nlet formattedDate = \"\";\n\nif (dateStr) {\n    // Beispiel: \"2024-07-03 12:44:00\" → \"2024-07-03\"\n    let match = dateStr.match(/^(\\d{4}-\\d{2}-\\d{2})/);\n    if (match) {\n        formattedDate = match[1];\n    }\n}\n\nlet dateMsg = { payload: formattedDate };\n\n// Output 1: an Mo-ID-Textfeld\n// Output 2: an Projektname-Textfeld\n// Output 3: an Datums-Feld\nreturn [moidMsg, projektnameMsg, dateMsg];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1040,
        "wires": [
            [
                "b5243e0c66e2913c"
            ],
            [
                "5bb2e238bb454a2c"
            ],
            [
                "3107bbdc156cb1fd"
            ]
        ]
    },
    {
        "id": "show_group",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "[UI] neu/vorhanden Show/Hide",
        "func": "if (msg.payload === \"vorhanden\") {\n    msg.payload = {\n        groups: {\n            show: [\"Projektkartei\"]\n        }\n    };\n} else if (msg.payload === \"neu\") {\n    msg.payload = {\n        groups: {\n            hide: [\"Projektkartei\"]\n        }\n    };\n} else {\n    // Falls ein anderer Wert, keine Änderung\n    return null;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "65fcec03c7dba8bf"
            ]
        ]
    },
    {
        "id": "65fcec03c7dba8bf",
        "type": "ui-control",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "ui": "826de81a1d3da833",
        "events": "all",
        "x": 1360,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4f8bcb239e8648f0",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Reset Radiobutton",
        "func": "msg.payload = \"neu\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 880,
        "wires": [
            [
                "c068a363626d3aac"
            ]
        ]
    },
    {
        "id": "8d69f8ce150fa10a",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "neu = Reset",
        "func": "if (msg.payload === \"neu\") {\n    return msg;           // Nachricht weitergeben\n} else {\n    return null;          // sonst gar nichts schicken!\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "6ee48779a11bb9b2",
                "8386ea793ecb5d63"
            ]
        ]
    },
    {
        "id": "5cd50f15353cd326",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "[UI] Eingabesperre",
        "func": "if (msg.payload === \"vorhanden\") {\n    msg.payload = undefined; // explizit löschen (optional)\n    msg.enabled = false;     // Feld sperren\n    return msg;\n} else if (msg.payload === \"neu\") {\n    msg.payload = undefined; // explizit löschen (optional)\n    msg.enabled = true;      // Feld freigeben\n    return msg;\n} else {\n    return null;             // nichts tun\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "3107bbdc156cb1fd",
                "5bb2e238bb454a2c",
                "b5243e0c66e2913c"
            ]
        ]
    },
    {
        "id": "867b11b1eea5e253",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "kunde",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 420,
        "wires": [
            [
                "4f79fc09a4a552d8"
            ]
        ]
    },
    {
        "id": "3ecfee9bb798f6ec",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "vorhanden",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 460,
        "wires": [
            [
                "5cd50f15353cd326",
                "8d69f8ce150fa10a",
                "show_group"
            ]
        ]
    },
    {
        "id": "18ace834940f05cc",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datum",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "dfcc8cb3d516c81c",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "projektname",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "943691cfea40756e",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "moid",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "0cd05b587161c992",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "stufe",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "3595a0c70851faf8",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "template",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "ae1e298cdec965b1",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Template-Dropdown",
        "links": [
            "e3d6822e1a01b3d9",
            "ee69128ef9ab3d71"
        ],
        "x": 345,
        "y": 700,
        "wires": [
            [
                "129513f184e0674f"
            ]
        ]
    },
    {
        "id": "242b8c8906ac8743",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Produktionsstufe-Dropdown",
        "links": [
            "0a963be20f1e8016",
            "ee69128ef9ab3d71"
        ],
        "x": 345,
        "y": 660,
        "wires": [
            [
                "e1a4d541d27ada53"
            ]
        ]
    },
    {
        "id": "d3b77d7fcf6d30e0",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Kunden-Dropdown",
        "links": [
            "155d7272748534fd",
            "ee69128ef9ab3d71"
        ],
        "x": 345,
        "y": 420,
        "wires": [
            [
                "e328548f79e528dd"
            ]
        ]
    },
    {
        "id": "72355bd8351fcc3a",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Projektkartei-Table",
        "links": [
            "d0cfb42fb9db00ba",
            "95d6c49a59226dad"
        ],
        "x": 345,
        "y": 1040,
        "wires": [
            [
                "a1b73032b0467d2a"
            ]
        ]
    },
    {
        "id": "889ad6ac5d382c0c",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Projektname-Textinput",
        "links": [
            "d0cfb42fb9db00ba"
        ],
        "x": 345,
        "y": 500,
        "wires": [
            [
                "5bb2e238bb454a2c"
            ]
        ]
    },
    {
        "id": "1654c193d5f6ae09",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Mo-ID-Textinput",
        "links": [
            "d0cfb42fb9db00ba"
        ],
        "x": 345,
        "y": 620,
        "wires": [
            [
                "b5243e0c66e2913c"
            ]
        ]
    },
    {
        "id": "ee69128ef9ab3d71",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Reset Dropdown",
        "mode": "link",
        "links": [
            "242b8c8906ac8743",
            "ae1e298cdec965b1",
            "d3b77d7fcf6d30e0"
        ],
        "x": 935,
        "y": 840,
        "wires": []
    },
    {
        "id": "d0cfb42fb9db00ba",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Reset Text In",
        "mode": "link",
        "links": [
            "1654c193d5f6ae09",
            "2874bd00f08fcb06",
            "72355bd8351fcc3a",
            "889ad6ac5d382c0c"
        ],
        "x": 935,
        "y": 800,
        "wires": []
    },
    {
        "id": "c068a363626d3aac",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Reset Radiobutton",
        "mode": "link",
        "links": [
            "dcf62c9ed6a0c911"
        ],
        "x": 935,
        "y": 880,
        "wires": []
    },
    {
        "id": "dcf62c9ed6a0c911",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Neu/Vorhanden-Radiobutton",
        "links": [
            "c068a363626d3aac"
        ],
        "x": 345,
        "y": 460,
        "wires": [
            [
                "e1e51838689893d3"
            ]
        ]
    },
    {
        "id": "2874bd00f08fcb06",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Datum-Textinput",
        "links": [
            "d0cfb42fb9db00ba"
        ],
        "x": 175,
        "y": 540,
        "wires": [
            [
                "0f8b5377268eb5ef"
            ]
        ]
    },
    {
        "id": "c8ba1d241617ce9c",
        "type": "ui-button",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "group": "91ae8c83e547fbd7",
        "name": "Projekt anlegen",
        "label": "Projekt anlegen",
        "order": 7,
        "width": 3,
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "fca50c1326be8ea0"
            ]
        ]
    },
    {
        "id": "fca50c1326be8ea0",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Pflichtfelder Check",
        "func": "let fehlende = [];\n\nif (!flow.get(\"kunde\")) fehlende.push(\"Kunde\");\nif (!flow.get(\"datum\")) fehlende.push(\"Datum\");\nif (!flow.get(\"moid\")) fehlende.push(\"Mo-ID\");\nif (!flow.get(\"projektname\")) fehlende.push(\"Projektname\");\nif (!flow.get(\"stufe\")) fehlende.push(\"Produktionsstufe\");\nif (!flow.get(\"template\")) fehlende.push(\"Template\");\n\nif (fehlende.length > 0) {\n  msg.payload = `\n  <div>\n    <div style=\"font-size:1.15em;font-weight:bold;\">Pflichtfelder fehlen!</div>\n    <div style=\"margin-top:4px;\">Bitte ausfüllen:<br>\n      <span style=\"font-weight:500;\">${fehlende.join(\", \")}</span>\n    </div>\n  </div>`;\n\n  msg.ui_update = {\n    color: \"red\",\n    dismissText: \"Schließen\",\n    allowDismiss: true,\n    allowConfirm: false\n  };\n\n\n\n  msg.ok = false;\n  return [msg, null]; // Output 1: Fehler\n} else {\n    msg.ok = true;\n    msg.payload = \"Alle Pflichtfelder sind ausgefüllt.\";\n    return [null, msg]; // Output 2: Alles ok\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1180,
        "wires": [
            [
                "049d373b283a3afc"
            ],
            [
                "f6c56536578c78fe"
            ]
        ]
    },
    {
        "id": "91c3a5fe4e5eecf4",
        "type": "fs-ops-mkdir",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Projektordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "zielPfad",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 500,
        "y": 1460,
        "wires": [
            [
                "3d4b5f86c5ffa01f"
            ]
        ]
    },
    {
        "id": "b48da6116f6c4a9b",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Unterordner anlegen",
        "func": "msg.payload = msg.unterordner.map(ordnerObj => `${msg.zielPfad}/${ordnerObj.name}`);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1460,
        "wires": [
            [
                "8a63e541bf541b68"
            ]
        ]
    },
    {
        "id": "8a63e541bf541b68",
        "type": "split",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1430,
        "y": 1460,
        "wires": [
            [
                "af8fbaa4a773e082"
            ]
        ]
    },
    {
        "id": "af8fbaa4a773e082",
        "type": "fs-ops-mkdir",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Unterordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1620,
        "y": 1460,
        "wires": [
            [
                "00cb38d09cf73f62"
            ]
        ]
    },
    {
        "id": "00cb38d09cf73f62",
        "type": "join",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1810,
        "y": 1460,
        "wires": [
            [
                "f60de5ae351b2bf4"
            ]
        ]
    },
    {
        "id": "a34bec94987a6255",
        "type": "fs-ops-copy",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Template kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "templateSource",
        "sourceFilenameType": "msg",
        "destPath": "templateDest",
        "destPathType": "msg",
        "destFilename": "filename",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": false,
        "x": 730,
        "y": 1520,
        "wires": [
            [
                "52dd943e6e75ae72"
            ]
        ]
    },
    {
        "id": "88664cf125d3933c",
        "type": "switch",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "neu/vorhanden",
        "property": "vorhanden",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "neu",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "vorhanden",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 1280,
        "wires": [
            [
                "e2dfeadde161b489"
            ],
            [
                "d008ed5534cdc428"
            ]
        ]
    },
    {
        "id": "e2f65bc098f601a4",
        "type": "fs-ops-access",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Duplikate prüfen",
        "path": "",
        "pathType": "str",
        "filename": "zielPfad",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 280,
        "y": 1440,
        "wires": [
            [
                "daa77dbe62344f24",
                "4877009023c9a7ca"
            ],
            [
                "91c3a5fe4e5eecf4"
            ]
        ]
    },
    {
        "id": "049d373b283a3afc",
        "type": "ui-notification",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": false,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": true,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 1630,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "daa77dbe62344f24",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Duplikat Fehlermeldung",
        "func": "msg.payload = `\n  <div>\n    <div style=\"font-size:1.15em;font-weight:bold;\">Das Projekt existiert bereits!</div>\n  </div>`;\n\nmsg.ui_update = {\n    color: \"red\",\n    dismissText: \"Schließen\",\n    allowDismiss: true,\n    allowConfirm: false\n}; \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1400,
        "wires": [
            [
                "049d373b283a3afc"
            ]
        ]
    },
    {
        "id": "52dd943e6e75ae72",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Meldung Text",
        "func": "msg.payload = `\n  <div>\n    <div style=\"font-size:1.15em;font-weight:bold;\">Das Projekt wurde erfolgreich angelegt!</div>\n  </div>`;\n\nmsg.ui_update = {\n    color: \"green\",\n    dismissText: \"Schließen\",\n    confirmText: \"Projekt öffnen\",\n    allowDismiss: true,\n    allowConfirm: true\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1520,
        "wires": [
            [
                "5be990aae94e6a3d"
            ]
        ]
    },
    {
        "id": "5be990aae94e6a3d",
        "type": "ui-notification",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": false,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": false,
        "dismissText": "",
        "allowConfirm": false,
        "confirmText": "",
        "raw": true,
        "className": "",
        "name": "Meldung ausgeben",
        "x": 1150,
        "y": 1520,
        "wires": [
            [
                "ea819edcc7fbd28a"
            ]
        ]
    },
    {
        "id": "79d9833babec0616",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "immo24-proj.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 1460,
        "wires": [
            [
                "b48da6116f6c4a9b"
            ]
        ]
    },
    {
        "id": "3d4b5f86c5ffa01f",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "JSON formatieren",
        "func": "// let now = msg.datum;\n// let erstellt_am = now.toISOString().replace('T', ' ').substring(0, 19); // Schöneres Format\n\nmsg.filename = `${msg.zielPfad}/immo24-proj.json`;\nmsg.payload = {\n    erstellt_am: msg.datum,\n    kunde: msg.kunde,\n    projektname: msg.projektname,\n    mo_id: msg.moid,\n    user: msg.activeUser\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1460,
        "wires": [
            [
                "79d9833babec0616"
            ]
        ]
    },
    {
        "id": "f60de5ae351b2bf4",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Session-Files auflisten",
        "path": "templateDest",
        "pathType": "msg",
        "filter": "*.ptx",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 300,
        "y": 1520,
        "wires": [
            [
                "740eded456c45a8d"
            ]
        ]
    },
    {
        "id": "740eded456c45a8d",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Nummerierung",
        "func": "function normalize(str) {\n    return (str || \"\").normalize(\"NFC\");\n}\n\n// Alles normalisieren!\nlet files = (msg.payload || []).map(normalize);\n\nlet values = {\n    datum: normalize(msg.datum),\n    projektname: normalize(msg.projektname),\n    moid: normalize(msg.moid),\n    benutzer: normalize(msg.activeUserKuerzel),\n    kunde: normalize(msg.kunde),\n    produktionsstufe: normalize(msg.stufeLabel)\n};\n\nlet baseTemplate = normalize(global.get(\"sessionSchema\") || \"{{projektname}} {{moid}} - {{produktionsstufe}} {{benutzer}} {{version}}\");\n\n// Regex für alles EXKLUSIVE {{version}} bauen:\nlet rePattern = baseTemplate\n    .replace(/\\./g, '\\\\.') // Punkte escapen\n    .replace(/\\{\\{version\\}\\}/g, \"v(\\\\d+)\")\n    .replace(/\\{\\{(\\w+)\\}\\}/g, (match, p1) => {\n        if (p1 === \"version\") return \"\";\n        return values[p1] ? values[p1].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : \".*\";\n    });\n\nlet re = new RegExp('^' + rePattern + '\\\\.ptx$');\n\nnode.warn(\"Regex pattern: \" + re);\nlet maxV = 0;\nlet matches = [];\n\nfiles.forEach(f => {\n    let m = re.exec(f);\n    node.warn(\"Checking file: \" + f + \" -> \" + (m ? \"MATCH\" : \"NO MATCH\"));\n    if (m && m[1]) {\n        matches.push(f);\n        let v = parseInt(m[1]);\n        if (v > maxV) maxV = v;\n    }\n});\n\nlet nextV = maxV + 1;\nvalues.version = `v${nextV}`;\n\nlet filename = baseTemplate.replace(/\\{\\{(\\w+)\\}\\}/g, (match, p1) => values[p1] || \"\");\n\n// .ptx-Endung erzwingen\nfilename = filename.replace(/\\.[^.]+$/, \"\") + \".ptx\";\nmsg.filename = filename;\n\nnode.warn(\"Gefundene Matches: \" + JSON.stringify(matches));\nnode.warn(\"Nächstes File: \" + filename);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1520,
        "wires": [
            [
                "a34bec94987a6255"
            ]
        ]
    },
    {
        "id": "f6c56536578c78fe",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Projektvariablen laden",
        "func": "// Funktion: Projektvariablen laden\n\nmsg.kunde = flow.get('kunde');\nmsg.vorhanden = flow.get('vorhanden');\nmsg.datum = flow.get('datum');\nmsg.projektname = flow.get('projektname');\nmsg.moid = flow.get('moid');\nmsg.stufe = flow.get('stufe');\nmsg.template = flow.get('template');\n\nmsg.activeUser = global.get('activeUser');\nmsg.activeUserKuerzel = global.get('activeUserKuerzel');\nmsg.projektordnerSchema = global.get(\"projektordnerSchema\") || \"\";\nmsg.kundenStammdaten = flow.get('kundenStammdaten') || [];\nmsg.PathProduktionen = global.get('PathProduktionen') || '';\nmsg.PathMitarbeiter = global.get('PathMitarbeiter') || '';\nmsg.projektRoot = msg.PathProduktionen + '/' + msg.kunde;\n\n// Unterordner & Label hier setzen\nlet kundeObj = msg.kundenStammdaten.find(k => k.kunde === msg.kunde) || {};\nlet unterordner = Array.isArray(kundeObj.ordner) ? kundeObj.ordner : [];\nmsg.unterordner = unterordner;\nlet stufeObj = unterordner.find(o => o.name === msg.stufe);\nmsg.stufeLabel = stufeObj ? stufeObj.label : msg.stufe;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1200,
        "wires": [
            [
                "112134d881c75205"
            ]
        ]
    },
    {
        "id": "e2dfeadde161b489",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "neue Projektordner und Pfade berechnen",
        "func": "\n// Platzhalter ersetzen im Ordnernamen/Schema\nlet values = {\n    datum: msg.datum,\n    projektname: msg.projektname,\n    moid: msg.moid,\n    benutzer: msg.activeUserKuerzel,\n    kunde: msg.kunde\n};\n\nmsg.projektOrdner = msg.projektordnerSchema.replace(/{{(\\w+)}}/g, (_, key) => values[key] || \"\");\nmsg.zielPfad = `${msg.PathProduktionen}/${msg.kunde}/${msg.projektOrdner}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1260,
        "wires": [
            [
                "d86904636be0f112"
            ]
        ]
    },
    {
        "id": "d86904636be0f112",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Template-Pfade auflösen",
        "func": "msg.templateSource = `${msg.PathMitarbeiter}/${msg.activeUser}/immo24/templates/${msg.template}`;\nmsg.templateDest = `${msg.zielPfad}/${msg.stufe}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1260,
        "wires": [
            [
                "e2f65bc098f601a4",
                "d92ffa0a71a5bdab"
            ]
        ]
    },
    {
        "id": "4f79fc09a4a552d8",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c0de7eb24d59090d",
        "name": "Reset Produktionsstufe",
        "func": "msg.payload = [];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 320,
        "wires": [
            [
                "e1a4d541d27ada53",
                "46c089e460663388"
            ]
        ]
    },
    {
        "id": "46c089e460663388",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "Projekt-Pfad",
        "func": "let kunde = flow.get('kunde');\nlet PathProduktionen = global.get('PathProduktionen');\n\nmsg.payload = PathProduktionen + '/' + kunde;\nmsg.projektRoot = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 160,
        "wires": [
            [
                "185acd9882bafd74"
            ]
        ]
    },
    {
        "id": "185acd9882bafd74",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "Projekte lesen",
        "path": "payload",
        "pathType": "msg",
        "filter": "",
        "filterType": "str",
        "dir": "payload",
        "dirType": "msg",
        "x": 1580,
        "y": 160,
        "wires": [
            [
                "5dfefaa79a87b909"
            ]
        ]
    },
    {
        "id": "5dfefaa79a87b909",
        "type": "split",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1750,
        "y": 160,
        "wires": [
            [
                "d827e2987029dd1c"
            ]
        ]
    },
    {
        "id": "95d6c49a59226dad",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "Projektkartei-Table",
        "mode": "link",
        "links": [
            "72355bd8351fcc3a"
        ],
        "x": 2415,
        "y": 220,
        "wires": []
    },
    {
        "id": "94e48f5086781a41",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "nach Ordnern filtern",
        "func": "if (msg.stats && msg.stats.isDirectory()) {\n    msg.filename = msg.payload.path + \"/immo24-proj.json\";\n    msg.projektname = msg.payload.name;\n    return msg;\n}\n// KEIN ORDNER: Dummy-Nachricht erzeugen\nreturn { skip: true, parts: msg.parts };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 160,
        "wires": [
            [
                "a304588c2808c1ac"
            ]
        ]
    },
    {
        "id": "477b7d2ef0ea4778",
        "type": "fs-ops-stats",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.path",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 2100,
        "y": 160,
        "wires": [
            [
                "94e48f5086781a41"
            ]
        ]
    },
    {
        "id": "a304588c2808c1ac",
        "type": "fs-ops-access",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "Check immo24-proj.json",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": true,
        "write": false,
        "throwerror": false,
        "x": 2510,
        "y": 160,
        "wires": [
            [
                "d4a860faf530cfaf"
            ],
            [
                "40b1713e53fe014e"
            ]
        ]
    },
    {
        "id": "40b1713e53fe014e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "JSON + Dummys",
        "func": "if (msg.skip) return msg; // Dummy durchreichen\ntry {\n    let data = JSON.parse(msg.payload);\n    msg.payload = {\n        date: data.erstellt_am,\n        projektname: data.projektname,\n        moid: data.mo_id,\n        user: data.user\n    };\n    return msg;\n} catch (e) {\n    // Fehler beim JSON: Dummy setzen\n    msg.skip = true;\n    msg.error = \"Kein valides JSON\";\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 220,
        "wires": [
            [
                "e456d033730a3863"
            ]
        ]
    },
    {
        "id": "d4a860faf530cfaf",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "immo24-proj.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1630,
        "y": 220,
        "wires": [
            [
                "40b1713e53fe014e"
            ]
        ]
    },
    {
        "id": "e456d033730a3863",
        "type": "join",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "",
        "mode": "auto",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "1",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2090,
        "y": 220,
        "wires": [
            [
                "2f60e367b0acae57"
            ]
        ]
    },
    {
        "id": "d827e2987029dd1c",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "Pfad anreichern",
        "func": "// msg.payload ist z.B. \"Projektname\"\nlet root = msg.projektRoot;\n\n// Erzeuge ein Objekt für jeden Eintrag mit name + vollständigem Pfad\nmsg.payload = {\n    name: msg.payload,\n    path: root + \"/\" + msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 160,
        "wires": [
            [
                "477b7d2ef0ea4778"
            ]
        ]
    },
    {
        "id": "2f60e367b0acae57",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "Dummys rausfiltern",
        "func": "if (!Array.isArray(msg.payload)) {\n    msg.payload = [];\n    return msg;\n}\nmsg.payload = msg.payload.filter(function (item) {\n    return item\n        && !item.skip\n        && typeof item === \"object\"\n        && item.date\n        && item.projektname\n        && item.moid\n        && item.user;\n});\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 220,
        "wires": [
            [
                "95d6c49a59226dad"
            ]
        ]
    },
    {
        "id": "d008ed5534cdc428",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Projektordner für vorhandenes Projekt suchen",
        "func": "\nfunction normalize(str) {\n    return str.normalize(\"NFC\"); // oder \"NFD\", aber am besten überall das gleiche!\n}\n\n// Holt Ordnernamen (ohne versteckte Dateien), UND normalisiert sie!\nconst ordnerListe = (msg.folders || []).filter(name => !name.startsWith('.')).map(normalize);\n\n// Werte für Platzhalter aus msg (alle Werte normalisieren!)\nconst values = {\n    datum: normalize(msg.datum),\n    projektname: normalize(msg.projektname),\n    moid: normalize(msg.moid),\n    kunde: normalize(msg.kunde)\n    // ggf. weitere Platzhalter!\n};\n\n// Schema auch normalisieren!\nlet schema = normalize(msg.projektordnerSchema);\n\n// Pattern bauen wie gehabt\nlet pattern = schema\n    .replace(/{{benutzer}}/g, '.+')\n    .replace(/{{(\\w+)}}/g, (m, key) =>\n        values[key] ? values[key].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '.*'\n    );\npattern = '^' + pattern.replace(/ /g, '\\\\s+') + '$';\n\nconst re = new RegExp(pattern);\n\nordnerListe.forEach(name => {\n    node.warn(\"Teste [\" + name + \"] gegen Pattern [\" + pattern + \"]: \" + (re.test(name) ? \"JA\" : \"NEIN\"));\n});\n\nlet gefunden = ordnerListe.find(name => re.test(name));\n\nif (gefunden) {\n    msg.zielPfad = msg.PathProduktionen + '/' + msg.kunde + '/' + gefunden;\n    // Kürzel extrahieren\n    const schemaParts = schema.split(' ');\n    const ordnerParts = gefunden.split(' ');\n    const benutzerIndex = schemaParts.findIndex(part => part.includes('benutzer'));\n    msg.benutzerAusOrdner = benutzerIndex > -1 ? ordnerParts[benutzerIndex] : null;\n    return [msg, null];\n} else {\n    msg.error = \"Kein passender Projektordner gefunden! (Unicode-Problem?)\";\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1300,
        "wires": [
            [
                "09f7e3677e960a0d"
            ],
            []
        ]
    },
    {
        "id": "09f7e3677e960a0d",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Template-Pfade auflösen",
        "func": "msg.templateSource = `${msg.PathMitarbeiter}/${msg.activeUser}/immo24/templates/${msg.template}`;\nmsg.templateDest = `${msg.zielPfad}/${msg.stufe}`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1300,
        "wires": [
            [
                "f60de5ae351b2bf4"
            ]
        ]
    },
    {
        "id": "196e5db112dae50f",
        "type": "exec",
        "z": "b1c585f0d25b86fd",
        "g": "0d1faa7a2ad224be",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Pro Tools öffnen",
        "x": 1760,
        "y": 1620,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6629036df320012f",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "0d1faa7a2ad224be",
        "name": "Befehle je nach OS",
        "func": "let fullPath = msg.templateDest + '/' + msg.filename;\nif (msg.payload.platform === \"win32\") {\n    fullPath = fullPath.replace(/\\//g, \"\\\\\");\n    msg.command = 'start \"\" \"' + fullPath + '\"';\n} else if (msg.payload.platform === \"darwin\") {\n    msg.command = 'open \"' + fullPath + '\"';\n} else {\n    msg.command = \"echo OS nicht unterstützt\";\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1620,
        "wires": [
            [
                "196e5db112dae50f"
            ]
        ]
    },
    {
        "id": "30aa15b86c7b3bff",
        "type": "delay",
        "z": "b1c585f0d25b86fd",
        "g": "0d1faa7a2ad224be",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1620,
        "y": 1560,
        "wires": [
            [
                "c392a56e56df401e"
            ]
        ]
    },
    {
        "id": "c392a56e56df401e",
        "type": "OS",
        "z": "b1c585f0d25b86fd",
        "g": "0d1faa7a2ad224be",
        "name": "",
        "x": 1370,
        "y": 1620,
        "wires": [
            [
                "6629036df320012f"
            ]
        ]
    },
    {
        "id": "ea819edcc7fbd28a",
        "type": "switch",
        "z": "b1c585f0d25b86fd",
        "g": "0d1faa7a2ad224be",
        "name": "Projekt öffnen geklickt",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "confirm_clicked",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1420,
        "y": 1560,
        "wires": [
            [
                "30aa15b86c7b3bff"
            ]
        ]
    },
    {
        "id": "b41e02a9f041aa19",
        "type": "ui-table",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "group": "c32759b3efc667c0",
        "name": "Kundenliste",
        "label": "",
        "order": 2,
        "width": "0",
        "height": "0",
        "maxrows": "",
        "passthru": false,
        "autocols": false,
        "showSearch": false,
        "deselect": false,
        "selectionType": "click",
        "columns": [
            {
                "title": "Kunde",
                "key": "kunde",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Unterordner",
                "key": "ordner_anzahl",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "🗑",
                "keyType": "str",
                "type": "button",
                "width": "10",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 370,
        "y": 1960,
        "wires": [
            [
                "7080ca0422762589",
                "d6cf07277be27381"
            ]
        ]
    },
    {
        "id": "33ba96310cfdeb2a",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json lesen",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 1840,
        "wires": [
            [
                "865166a918f8dd7f"
            ]
        ]
    },
    {
        "id": "865166a918f8dd7f",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "JSON parsen",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 640,
        "y": 1840,
        "wires": [
            [
                "a4d41af963187fb7",
                "2fe371eb71de6440"
            ]
        ]
    },
    {
        "id": "a4d41af963187fb7",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Daten aufbereiten",
        "func": "\nlet selectedKunde = flow.get('selectedKunde');\nmsg.payload = msg.payload.map(k => ({\n    kunde: k.kunde,\n    ordner_anzahl: k.ordner ? k.ordner.length : 0\n}));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1860,
        "wires": [
            [
                "b41e02a9f041aa19"
            ]
        ]
    },
    {
        "id": "2ce41bb4bd723b67",
        "type": "ui-form",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Neukunden Formular",
        "group": "9acf74bc666bb115",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Kunde",
                "key": "kunde",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "kunde": ""
        },
        "payload": "",
        "submit": "Anlegen",
        "cancel": "",
        "resetOnSubmit": true,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "passthru": false,
        "dropdownOptions": [],
        "x": 400,
        "y": 2300,
        "wires": [
            [
                "41a1604a42cf8a96",
                "f4601d95bfebf9a0"
            ]
        ]
    },
    {
        "id": "41a1604a42cf8a96",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Kunde hinzufügen",
        "func": "// Erwartet: msg.payload = { kunde: \"Name\" }\n// Liest bestehende Kunden aus dem Flow-Kontext, ergänzt bei Erfolg und liefert JSON-String zurück.\n\n// 1) Eingabe validieren\nconst body = msg.payload && typeof msg.payload === 'object' ? msg.payload : {};\nconst nameRaw = (body.kunde || '').trim();\n\nif (!nameRaw) {\n    msg.statusCode = 400;                    // Bad Request\n    msg.payload = { error: 'kunde fehlt' };\n    msg.topic = 'error';\n    return [null, msg];                      // → Fehler-Output\n}\n\n// 2) Bestehende Liste holen\nlet kunden = flow.get('kundenStammdaten') || [];\n\n// 3) Duplikat-Check (case-insensitive)\nconst exists = kunden.some(k => (k.kunde || '').trim().toLowerCase() === nameRaw.toLowerCase());\nif (exists) {\n    msg.statusCode = 409;                    // Conflict\n    msg.payload = { error: 'Kunde existiert bereits' };\n    msg.topic = 'error';\n    return [null, msg];                      // → Fehler-Output\n}\n\n// 4) Neuen Kunden einfügen\nconst neuerKunde = { kunde: nameRaw, ordner: [] };\nkunden.push(neuerKunde);\n\n// 5) Liste im Flow aktualisieren (optional, falls du das woanders machst, kannst du’s weglassen)\n// flow.set('kundenStammdaten', kunden);\n\n// 6) Für File-Write vorbereiten & Metadaten setzen\nmsg.payload = JSON.stringify(kunden, null, 2);\nmsg.topic = 'ok';\nmsg.neukunde = neuerKunde;\nmsg.statusCode = 201;                      // Created (falls direkt an HTTP Response)\n\nreturn [msg, null];                        // → Erfolg-Output",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2320,
        "wires": [
            [
                "4a19a26eb247bcfb",
                "5d8cb4ae2aa3f2ec"
            ],
            [
                "a67a2cab1a358d44",
                "9c53f64fe3de877c"
            ]
        ],
        "outputLabels": [
            "Kunde anlegen",
            "Fehler: Kunde vorhanden"
        ]
    },
    {
        "id": "2fe371eb71de6440",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Array speichern",
        "func": "// msg.payload ist das komplette Kunden/Ordner-Array\nflow.set('kundenStammdaten', msg.payload); // speichere das Array im Flow-Kontext\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "a67a2cab1a358d44",
        "type": "ui-notification",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Fehlermeldung ausgeben",
        "x": 1470,
        "y": 2020,
        "wires": [
            [
                "027af555cc7c1332"
            ]
        ]
    },
    {
        "id": "d2ddab99473b3656",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1530,
        "y": 1980,
        "wires": [
            [
                "027af555cc7c1332",
                "57d258a6ea6ffd92"
            ]
        ]
    },
    {
        "id": "027af555cc7c1332",
        "type": "link out",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Refresh Table",
        "mode": "link",
        "links": [
            "7d54c183a3c2f73a"
        ],
        "x": 1715,
        "y": 2000,
        "wires": []
    },
    {
        "id": "7d54c183a3c2f73a",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Refresh Table",
        "links": [
            "027af555cc7c1332"
        ],
        "x": 155,
        "y": 1820,
        "wires": [
            [
                "14f500b7b1de838f"
            ]
        ]
    },
    {
        "id": "f10c3bfa8109cdd0",
        "type": "ui-table",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "group": "c32759b3efc667c0",
        "name": "Ordnerliste",
        "label": "",
        "order": 4,
        "width": "0",
        "height": "0",
        "maxrows": "",
        "passthru": false,
        "autocols": false,
        "showSearch": false,
        "deselect": true,
        "selectionType": "none",
        "columns": [
            {
                "title": "Name",
                "key": "name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Label",
                "key": "label",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Produktionsstufe",
                "key": "ist_Produktionsstufe",
                "keyType": "key",
                "type": "tickcross",
                "width": "",
                "align": "start"
            },
            {
                "title": "",
                "key": "✏️",
                "keyType": "str",
                "type": "button",
                "width": "10",
                "align": "end"
            },
            {
                "title": "",
                "key": "🗑️",
                "keyType": "str",
                "type": "button",
                "width": "10",
                "align": "end"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 370,
        "y": 2040,
        "wires": [
            [
                "ae55601a9da0c911"
            ]
        ]
    },
    {
        "id": "7080ca0422762589",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Aktuellen Kunden & Ordner setzen",
        "func": "// Kundenliste aus flow holen (oder global)\nlet kunden = flow.get(\"kundenStammdaten\") || [];\nlet gewaehlterKunde = msg.payload.kunde; // z.B. \"SuperVision\"\n\n// Kundenobjekt suchen\nlet kundeObj = kunden.find(k => k.kunde === gewaehlterKunde);\n\nif (kundeObj && Array.isArray(kundeObj.ordner)) {\n    msg.payload = kundeObj.ordner; // vollständige Ordnerliste für die Tabelle!\n    flow.set(\"currentKunde\", kundeObj); // optional, für spätere Aktionen\n} else {\n    msg.payload = []; // falls nichts gefunden\n}\n\nflow.set('selectedKunde', gewaehlterKunde);\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1960,
        "wires": [
            [
                "f10c3bfa8109cdd0"
            ]
        ]
    },
    {
        "id": "18e8a335ef97da21",
        "type": "ui-form",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner Datensatz",
        "group": "1706fadffdc2c0e4",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Name",
                "key": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Label",
                "key": "label",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Produktionsstufe",
                "key": "ist_Produktionsstufe",
                "type": "checkbox",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "name": "",
            "label": "",
            "ist_Produktionsstufe": false
        },
        "payload": "",
        "submit": "Speichern",
        "cancel": "",
        "resetOnSubmit": true,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "passthru": false,
        "dropdownOptions": [],
        "x": 390,
        "y": 2160,
        "wires": [
            [
                "4f7262abea362c2d",
                "9106241422db912a"
            ]
        ]
    },
    {
        "id": "9106241422db912a",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Datensatz bearbeiten",
        "func": "let kunden = flow.get('kundenStammdaten') || [];\nlet selectedKunde = flow.get('selectedKunde') || \"\";\nlet altName = flow.get('bearbeiteAltName'); // Vorher im Flow gesetzt (Bearbeiten) oder undefined/null (Neuanlage)\nlet neuerOrdner = msg.payload;\n\nlet kunde = kunden.find(k => k.kunde === selectedKunde);\nif (!kunde || !Array.isArray(kunde.ordner)) {\n    node.error(\"Kunde oder Ordnerliste nicht gefunden!\");\n    return null;\n}\n\n// --- NEU: Unterscheidung Neu/Bearbeiten ---\nif (!altName) {\n    // NEUANLAGE\n    // Prüfe, ob der Name schon existiert\n    if (kunde.ordner.some(o => o.name.toLowerCase().trim() === neuerOrdner.name.toLowerCase().trim())) {\n        msg.payload = \"Ordnername existiert bereits!\";\n        msg.topic = \"error\";\n        return [null, msg];\n    }\n    kunde.ordner.push(neuerOrdner);\n    flow.set('kundenStammdaten', kunden);\n    msg.payload = JSON.stringify(kunden, null, 2);\n    msg.topic = \"ok\";\n    return [msg, null];\n} else {\n    // BEARBEITEN\n    // Prüfe auf doppelten Namen (außer der aktuelle ist derselbe wie vorher)\n    let nameVorhanden = kunde.ordner.findIndex(o =>\n        o.name.toLowerCase().trim() === neuerOrdner.name.toLowerCase().trim()\n    );\n    let idxAlt = kunde.ordner.findIndex(o =>\n        o.name.toLowerCase().trim() === altName.toLowerCase().trim()\n    );\n    if (nameVorhanden >= 0 && nameVorhanden !== idxAlt) {\n        msg.payload = \"Ordnername existiert bereits!\";\n        msg.topic = \"error\";\n        return [null, msg];\n    }\n\n    // Ordner ersetzen\n    if (idxAlt >= 0) {\n        kunde.ordner[idxAlt] = neuerOrdner;\n        flow.set('kundenStammdaten', kunden);\n        msg.payload = JSON.stringify(kunden, null, 2);\n        msg.topic = \"ok\";\n        flow.set('bearbeiteAltName', null); // Aufräumen\n        return [msg, null];\n    } else {\n        node.error(\"Alter Ordnername nicht gefunden!\");\n        return null;\n    }\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 2180,
        "wires": [
            [
                "4a19a26eb247bcfb"
            ],
            [
                "a67a2cab1a358d44"
            ]
        ]
    },
    {
        "id": "f5cd7bb31098eaad",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Loeschen",
        "func": "let kunden = flow.get('kundenStammdaten') || [];\nlet selectedKunde = flow.get('selectedKunde') || \"\";\n\n// Info zur Zeile kommt oft als msg.payload, z.B. { name: \"03_Sounddesign\", ... }\nlet zuLoeschen = msg.payload;\n\n// Kunde suchen\nlet kunde = kunden.find(k => k.kunde === selectedKunde);\nif (!kunde || !Array.isArray(kunde.ordner)) return null;\n\n// Ordner mit gleichem Namen rausfiltern (case-insensitive)\nkunde.ordner = kunde.ordner.filter(o =>\n    o.name.toLowerCase().trim() !== zuLoeschen.name.toLowerCase().trim()\n);\n\n// Speichern & Rückgabe\nflow.set('kundenStammdaten', kunden);\nmsg.datensatz = JSON.stringify(kunden, null, 2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2020,
        "wires": [
            [
                "72c8c1490dfeb838"
            ]
        ]
    },
    {
        "id": "7b6fc7ec6990e925",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Neu / Bearbeiten",
        "func": "// 1. Werte für Bearbeiten im Flow-Kontext speichern (damit sie nach dem Dialog öffnen noch da sind)\nflow.set('editFormValue', {\n    name: msg.payload.name,\n    label: msg.payload.label,\n    ist_Produktionsstufe: msg.payload.ist_Produktionsstufe\n});\n// Optional: alten Namen merken, falls du das beim Speichern brauchst\nflow.set('bearbeiteAltName', msg.payload.name);\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2060,
        "wires": [
            [
                "2fd60a7350f47fb3",
                "0d985a15d4a4a95c"
            ]
        ]
    },
    {
        "id": "ae55601a9da0c911",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Button Selector",
        "func": "// Action kann \"button_click\" sein, column ist entweder \"🗑️\" (Papierkorb) oder \"✏️\" (Stift)\n\nif (msg.action !== \"button_click\") {\n    return null; // Nur reagieren, wenn ein Button geklickt wurde\n}\n\nif (msg.column === \"🗑️\") {\n    // An Output 1: Löschen-Logik\n    return [msg, null];\n}\nif (msg.column === \"✏️\") {\n    // An Output 2: Bearbeiten-Logik\n    return [null, msg];\n}\n\n// Falls kein bekannter Button: nichts machen\nreturn null;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 2040,
        "wires": [
            [
                "f5cd7bb31098eaad"
            ],
            [
                "7b6fc7ec6990e925"
            ]
        ]
    },
    {
        "id": "2fd60a7350f47fb3",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "[UI] Bearbeiten-Dialog einblenden",
        "func": "msg.payload = {\n    groups: {\n        show: ['Neuer Datensatz']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 2120,
        "wires": [
            [
                "dadf337fb5b73a92"
            ]
        ]
    },
    {
        "id": "dadf337fb5b73a92",
        "type": "ui-control",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "ui": "826de81a1d3da833",
        "events": "all",
        "x": 1680,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "0d985a15d4a4a95c",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Werte ans Formular schicken",
        "func": "msg.payload = flow.get('editFormValue');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 2060,
        "wires": [
            [
                "18e8a335ef97da21"
            ]
        ]
    },
    {
        "id": "4f7262abea362c2d",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "[UI] Bearbeiten-Dialog ausblenden",
        "func": "msg.payload = {\n    groups: {\n        hide: ['Neuer Datensatz']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 2160,
        "wires": [
            [
                "dadf337fb5b73a92"
            ]
        ]
    },
    {
        "id": "2a3513798f605e53",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "[UI] Neukunden-Dialog einblenden",
        "func": "msg.payload = {\n    groups: {\n        show: ['Neuer Kunde']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 2200,
        "wires": [
            [
                "dadf337fb5b73a92"
            ]
        ]
    },
    {
        "id": "4cb0d9e7dd76739c",
        "type": "ui-button",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "group": "c32759b3efc667c0",
        "name": "Neuer Kunde",
        "label": "Neuer Kunde",
        "order": 3,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 370,
        "y": 2240,
        "wires": [
            [
                "2a3513798f605e53"
            ]
        ]
    },
    {
        "id": "f4601d95bfebf9a0",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "[UI] Neukunden-Dialog ausblenden",
        "func": "msg.payload = {\n    groups: {\n        hide: ['Neuer Kunde']\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 2240,
        "wires": [
            [
                "dadf337fb5b73a92"
            ]
        ]
    },
    {
        "id": "9d4854382e8cb59d",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Refresh",
        "func": "let kunde = flow.get('selectedKunde');\nif (!kunde) return null;\n\nmsg.payload = { kunde: kunde }; // wie beim Row-Click!\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1880,
        "wires": [
            [
                "7080ca0422762589"
            ]
        ]
    },
    {
        "id": "2c1e3dd3e61d04e7",
        "type": "delay",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 1880,
        "wires": [
            [
                "9d4854382e8cb59d"
            ]
        ]
    },
    {
        "id": "d6cf07277be27381",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Kunde Loeschen",
        "func": "// Prüfe, ob es ein Button-Click auf die Spalte \"🗑\" war\nif (msg.action === \"button_click\" && msg.column === \"🗑\") {\n    // Kunden aus flow holen\n    let kunden = flow.get('kundenStammdaten') || [];\n    let zuLoeschen = msg.payload.kunde;\n\n    // Kunden filtern\n    kunden = kunden.filter(k => k.kunde !== zuLoeschen);\n    flow.set('kundenStammdaten', kunden);\n\n    // Optional: Selektion zurücksetzen\n    flow.set('selectedKunde', null);\n\n    // JSON für Datei\n    msg.datensatz = JSON.stringify(kunden, null, 2);\n\n    return msg;\n}\n\n// Kein passender Button-Klick: Node tut nichts\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1960,
        "wires": [
            [
                "2beb850f85c03577"
            ]
        ]
    },
    {
        "id": "12c6eb058a6b1e99",
        "type": "ui-button",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "group": "c32759b3efc667c0",
        "name": "Neuer Ordner",
        "label": "Neuer Ordner",
        "order": 5,
        "width": "2",
        "height": "1",
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 380,
        "y": 2100,
        "wires": [
            [
                "7b6fc7ec6990e925"
            ]
        ]
    },
    {
        "id": "44ed24d9f345abc2",
        "type": "ui-notification",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "ui": "826de81a1d3da833",
        "position": "center center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Abbrechen",
        "allowConfirm": true,
        "confirmText": "Löschen",
        "raw": false,
        "className": "",
        "name": "Löschen bestätigen",
        "x": 1510,
        "y": 1820,
        "wires": [
            [
                "9ba181b908f39390"
            ]
        ]
    },
    {
        "id": "2beb850f85c03577",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Meldung Kunde Löschen",
        "func": "msg.payload = \"Soll der Kunde wirklich gelöscht werden?\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1800,
        "wires": [
            [
                "44ed24d9f345abc2"
            ]
        ]
    },
    {
        "id": "72c8c1490dfeb838",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Meldung Ordner Löschen",
        "func": "msg.payload = \"Soll der Ordner wirklich gelöscht werden?\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1840,
        "wires": [
            [
                "44ed24d9f345abc2"
            ]
        ]
    },
    {
        "id": "9ba181b908f39390",
        "type": "switch",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Löschen geklickt",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "confirm_clicked",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1530,
        "y": 1860,
        "wires": [
            [
                "62ba854e72cdf8dd"
            ]
        ]
    },
    {
        "id": "62ba854e72cdf8dd",
        "type": "change",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "datensatz",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1530,
        "y": 1900,
        "wires": [
            [
                "4a19a26eb247bcfb"
            ]
        ]
    },
    {
        "id": "d980148938fe696d",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "c6bbd2b9b2d5d462",
        "name": "Stammdaten Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/kunden_stammdaten.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "4f280f447ba900e3"
            ]
        ]
    },
    {
        "id": "14f500b7b1de838f",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/kunden_stammdaten.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1780,
        "wires": [
            [
                "33ba96310cfdeb2a",
                "2c1e3dd3e61d04e7"
            ]
        ]
    },
    {
        "id": "a762fc9288921434",
        "type": "link in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "START",
        "links": [
            "bb49eb64a95fd55b"
        ],
        "x": 155,
        "y": 1780,
        "wires": [
            [
                "14f500b7b1de838f"
            ]
        ]
    },
    {
        "id": "4a19a26eb247bcfb",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten Verzeichnis",
        "func": "msg.filename = global.get('PathStammdaten') + \"/kunden_stammdaten.json\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1940,
        "wires": [
            [
                "d2ddab99473b3656"
            ]
        ]
    },
    {
        "id": "125ab90468385839",
        "type": "ui-template",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "group": "c32759b3efc667c0",
        "page": "",
        "ui": "",
        "name": "Text Produktionsbuch",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<div style=\"font-size:1.09em; line-height:1.6;\">\n    <strong style=\"font-size:1.18em;\">Kunden-Stammdaten</strong><br>\n    <span>Hier können die Kunden-Stammdaten für das Produktionsbuch angelegt und bearbeitet werden.</span><br>\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 240,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "d92ffa0a71a5bdab",
        "type": "debug",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 1240,
        "wires": []
    },
    {
        "id": "5d8cb4ae2aa3f2ec",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "PathProduktionen abfragen",
        "func": "msg.payload = global.get('PathProduktionen');\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 2340,
        "wires": [
            [
                "373f7b1408a8d8ef"
            ]
        ]
    },
    {
        "id": "373f7b1408a8d8ef",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner abfragen",
        "path": "payload",
        "pathType": "msg",
        "filter": "",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 1680,
        "y": 2340,
        "wires": [
            [
                "2377aa45b2403535"
            ]
        ]
    },
    {
        "id": "0972a4a5dd6d6322",
        "type": "debug",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2120,
        "y": 2360,
        "wires": []
    },
    {
        "id": "2377aa45b2403535",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner filtern",
        "func": "// msg.files = Liste aller Ordnernamen (Strings), msg.neukunde.kunde = gewünschter Name\nconst wanted = (msg.neukunde.kunde || '').toLowerCase();\nconst found = (msg.files || []).some(dir => dir.toLowerCase() === wanted);\n\nif (found) {\n    msg.payload = \"Achtung: Ordner existiert bereits (ggf. mit anderer Groß-/Kleinschreibung)!\";\n    return [null, msg]; // Output 2: Info\n} else {\n    msg.payload = global.get('PathProduktionen') + '/' + msg.neukunde.kunde;\n    return [msg, null]; // Output 1: Ordner anlegen\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 2340,
        "wires": [
            [
                "95e85c4c1456807d",
                "0972a4a5dd6d6322"
            ],
            [
                "0972a4a5dd6d6322"
            ]
        ],
        "outputLabels": [
            "Kundenordner anlegen",
            "Kundenordner bereits vorhanden"
        ]
    },
    {
        "id": "95e85c4c1456807d",
        "type": "fs-ops-mkdir",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Kundenordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "payload",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2060,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "112134d881c75205",
        "type": "fs-ops-dir",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "Projektverzeichnis lesen",
        "path": "projektRoot",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "folders",
        "dirType": "msg",
        "x": 930,
        "y": 1200,
        "wires": [
            [
                "88664cf125d3933c"
            ]
        ]
    },
    {
        "id": "4877009023c9a7ca",
        "type": "debug",
        "z": "b1c585f0d25b86fd",
        "g": "90a1257292e52c0c",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0381824ca670a193",
        "type": "comment",
        "z": "b1c585f0d25b86fd",
        "g": "4b0349befccb3ec9",
        "name": "DEFEKT",
        "info": "",
        "x": 2280,
        "y": 140,
        "wires": []
    },
    {
        "id": "2305fc706cda51ac",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 2440,
        "wires": [
            [
                "c02215de6b80ad47"
            ]
        ]
    },
    {
        "id": "c02215de6b80ad47",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2440,
        "wires": [
            [
                "58ddc703a5fc46b3"
            ]
        ]
    },
    {
        "id": "58ddc703a5fc46b3",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 840,
        "y": 2440,
        "wires": [
            [
                "d0f086bb05d1dbca"
            ]
        ]
    },
    {
        "id": "d0f086bb05d1dbca",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1010,
        "y": 2440,
        "wires": [
            [
                "c44b831c7f71f3f0"
            ]
        ]
    },
    {
        "id": "c44b831c7f71f3f0",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 2440,
        "wires": []
    },
    {
        "id": "229093bfc29724c5",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 350,
        "y": 2480,
        "wires": [
            [
                "41a1604a42cf8a96"
            ]
        ]
    },
    {
        "id": "f445c6f1b8754602",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1710,
        "y": 2400,
        "wires": []
    },
    {
        "id": "57d258a6ea6ffd92",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Status",
        "func": "msg.statusCode = 201;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 2400,
        "wires": [
            [
                "f445c6f1b8754602"
            ]
        ]
    },
    {
        "id": "9c53f64fe3de877c",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1710,
        "y": 2440,
        "wires": []
    },
    {
        "id": "efee96497b779fbf",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 380,
        "y": 2520,
        "wires": [
            [
                "f819f6286d8877ac"
            ]
        ]
    },
    {
        "id": "f819f6286d8877ac",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2520,
        "wires": [
            [
                "faef63861048a934"
            ]
        ]
    },
    {
        "id": "faef63861048a934",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 880,
        "y": 2520,
        "wires": [
            [
                "24a8b953ca577f10"
            ]
        ]
    },
    {
        "id": "4e153b8c3c397e84",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Kunde loeschen",
        "func": "const param = (msg.req.params.kunde || '').trim();\nif (!param) { msg.statusCode = 400; msg.payload = { error: 'kunde fehlt' }; return [null, msg]; }\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst before = arr.length;\narr = arr.filter(k => (k.kunde || '').toLowerCase() !== param.toLowerCase());\nif (arr.length === before) { msg.statusCode = 404; msg.payload = { error: 'nicht gefunden' }; return [null, msg]; }\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 2520,
        "wires": [
            [
                "d408f2bf260c2d70"
            ],
            [
                "6d70868f6fb23c66"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "d408f2bf260c2d70",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1490,
        "y": 2500,
        "wires": [
            [
                "8a0a359434b8320d"
            ]
        ]
    },
    {
        "id": "8a0a359434b8320d",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1730,
        "y": 2500,
        "wires": []
    },
    {
        "id": "6d70868f6fb23c66",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1430,
        "y": 2540,
        "wires": []
    },
    {
        "id": "12e3163221d910ad",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 390,
        "y": 2580,
        "wires": [
            [
                "db9878092f0ecaf5"
            ]
        ]
    },
    {
        "id": "24a8b953ca577f10",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1050,
        "y": 2520,
        "wires": [
            [
                "4e153b8c3c397e84"
            ]
        ]
    },
    {
        "id": "db9878092f0ecaf5",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2580,
        "wires": [
            [
                "fd1db7356666748a"
            ]
        ]
    },
    {
        "id": "fd1db7356666748a",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 900,
        "y": 2580,
        "wires": [
            [
                "6fe2baae39839f1a"
            ]
        ]
    },
    {
        "id": "6fe2baae39839f1a",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 2580,
        "wires": [
            [
                "fb507dc5d4767c29"
            ]
        ]
    },
    {
        "id": "fb507dc5d4767c29",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordnerliste",
        "func": "const name = (msg.req.params.kunde || '').toLowerCase();\nconst arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === name);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return msg; }\nmsg.payload = Array.isArray(k.ordner) ? k.ordner : [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 2580,
        "wires": [
            [
                "72ecfc50ae08ef2f"
            ]
        ]
    },
    {
        "id": "72ecfc50ae08ef2f",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1390,
        "y": 2580,
        "wires": []
    },
    {
        "id": "841470fce5aa44c3",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 390,
        "y": 2620,
        "wires": [
            [
                "d024dbe76a3f0926"
            ]
        ]
    },
    {
        "id": "d024dbe76a3f0926",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2620,
        "wires": [
            [
                "48b16f710a226513"
            ]
        ]
    },
    {
        "id": "48b16f710a226513",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 900,
        "y": 2620,
        "wires": [
            [
                "c4605a91d07eacc9"
            ]
        ]
    },
    {
        "id": "c4605a91d07eacc9",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 2620,
        "wires": [
            [
                "96085ec8b042313e"
            ]
        ]
    },
    {
        "id": "96085ec8b042313e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner hinzufügen, Duplikate prüfen",
        "func": "// expects: msg.req.params.kunde, msg.payload (array aus datei), msg.req.body {name,label,ist_Produktionsstufe}\n\nconst kundeParam = (msg.req.params.kunde || '').trim().toLowerCase();\nconst body = msg.req.body || {};\nconst name = (body.name || '').trim();\nconst label = (body.label || '').trim();\nconst flag = !!body.ist_Produktionsstufe;\n\nif (!kundeParam) {\n    msg.statusCode = 400; msg.payload = { error: 'kunde fehlt' }; return [null, msg];\n}\nif (!name) {\n    msg.statusCode = 400; msg.payload = { error: 'name fehlt' }; return [null, msg];\n}\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === kundeParam);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return [null, msg]; }\n\nk.ordner = Array.isArray(k.ordner) ? k.ordner : [];\nconst exists = k.ordner.some(o => (o.name || '').trim().toLowerCase() === name.toLowerCase());\nif (exists) { msg.statusCode = 409; msg.payload = { error: 'Ordnername existiert bereits' }; return [null, msg]; }\n\nk.ordner.push({ name, label, ist_Produktionsstufe: flag });\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 2620,
        "wires": [
            [
                "ee9edf6773dc9e80"
            ],
            [
                "44446a7c726fc41a"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "9fe26839a1e98ab7",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "201 ok",
        "func": "msg.statusCode = 201;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 2600,
        "wires": [
            [
                "c3c1ad3d3e10693a"
            ]
        ]
    },
    {
        "id": "c3c1ad3d3e10693a",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2010,
        "y": 2600,
        "wires": []
    },
    {
        "id": "44446a7c726fc41a",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1550,
        "y": 2640,
        "wires": []
    },
    {
        "id": "3390d3aa2f43e28f",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders/:name",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 410,
        "y": 2700,
        "wires": [
            [
                "670347c94138255e"
            ]
        ]
    },
    {
        "id": "670347c94138255e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2700,
        "wires": [
            [
                "a9a1e815467da76c"
            ]
        ]
    },
    {
        "id": "a9a1e815467da76c",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 920,
        "y": 2700,
        "wires": [
            [
                "e2263c106be8ee44"
            ]
        ]
    },
    {
        "id": "e2263c106be8ee44",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1090,
        "y": 2700,
        "wires": [
            [
                "52cbb131108a02f7"
            ]
        ]
    },
    {
        "id": "52cbb131108a02f7",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner aktualisieren, Konflikte prüfen",
        "func": "const kundeParam = (msg.req.params.kunde || '').trim().toLowerCase();\nconst oldName = (msg.req.params.name || '').trim().toLowerCase();\nconst body = msg.req.body || {};\nconst newName = (body.name || '').trim();\nconst label = (body.label || '').trim();\nconst flag = !!body.ist_Produktionsstufe;\n\nif (!kundeParam || !oldName) {\n    msg.statusCode = 400; msg.payload = { error: 'kunde oder alter name fehlt' }; return [null, msg];\n}\nif (!newName) {\n    msg.statusCode = 400; msg.payload = { error: 'neuer name fehlt' }; return [null, msg];\n}\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === kundeParam);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return [null, msg]; }\n\nk.ordner = Array.isArray(k.ordner) ? k.ordner : [];\nconst idxOld = k.ordner.findIndex(o => (o.name || '').trim().toLowerCase() === oldName);\nif (idxOld < 0) { msg.statusCode = 404; msg.payload = { error: 'ordner (alt) nicht gefunden' }; return [null, msg]; }\n\n// Wenn Name geändert wird: Duplikate prüfen\nconst isRename = newName.toLowerCase() !== oldName;\nif (isRename) {\n    const conflict = k.ordner.some((o, i) =>\n        i !== idxOld && (o.name || '').trim().toLowerCase() === newName.toLowerCase()\n    );\n    if (conflict) { msg.statusCode = 409; msg.payload = { error: 'Ordnername existiert bereits' }; return [null, msg]; }\n}\n\n// Update\nk.ordner[idxOld] = { name: newName, label, ist_Produktionsstufe: flag };\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2700,
        "wires": [
            [
                "e4d5097ebd7590e3"
            ],
            [
                "64b77345d2c02e51"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "fd497a93ac24b99e",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "204 ok",
        "func": "msg.statusCode = 204;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2680,
        "wires": [
            [
                "93bdad8186170fba"
            ]
        ]
    },
    {
        "id": "64b77345d2c02e51",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1550,
        "y": 2720,
        "wires": []
    },
    {
        "id": "93bdad8186170fba",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2030,
        "y": 2680,
        "wires": []
    },
    {
        "id": "c6bc4f90d144350d",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "url": "/api/pb/customers/:kunde/folders/:name",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 420,
        "y": 2740,
        "wires": [
            [
                "38f613d2151f78ac"
            ]
        ]
    },
    {
        "id": "38f613d2151f78ac",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Stammdaten-Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2740,
        "wires": [
            [
                "a22736cc2f7c03c0"
            ]
        ]
    },
    {
        "id": "a22736cc2f7c03c0",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 2740,
        "wires": [
            [
                "d64ff09155af078f"
            ]
        ]
    },
    {
        "id": "d64ff09155af078f",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1110,
        "y": 2740,
        "wires": [
            [
                "0c7d50182f40a06c"
            ]
        ]
    },
    {
        "id": "0c7d50182f40a06c",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Ordner entfernen",
        "func": "const kundeParam = (msg.req.params.kunde || '').trim().toLowerCase();\nconst nameParam = (msg.req.params.name || '').trim().toLowerCase();\nif (!kundeParam || !nameParam) { msg.statusCode = 400; msg.payload = { error: 'kunde oder name fehlt' }; return [null, msg]; }\n\nlet arr = Array.isArray(msg.payload) ? msg.payload : [];\nconst k = arr.find(x => (x.kunde || '').toLowerCase() === kundeParam);\nif (!k) { msg.statusCode = 404; msg.payload = { error: 'kunde nicht gefunden' }; return [null, msg]; }\n\nk.ordner = Array.isArray(k.ordner) ? k.ordner : [];\nconst before = k.ordner.length;\nk.ordner = k.ordner.filter(o => (o.name || '').trim().toLowerCase() !== nameParam);\n\nif (k.ordner.length === before) {\n    msg.statusCode = 404; msg.payload = { error: 'ordner nicht gefunden' }; return [null, msg];\n}\n\nmsg.payload = JSON.stringify(arr, null, 2);\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 2780,
        "wires": [
            [
                "216f55f9767ff53a"
            ],
            [
                "948c245c80c18ed9"
            ]
        ],
        "outputLabels": [
            "Speichern",
            "Fehler"
        ]
    },
    {
        "id": "d4546258e4fd2c43",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "204 ok",
        "func": "msg.statusCode = 204;\nmsg.payload = { ok: true };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 2780,
        "wires": [
            [
                "69133e5578d8d519"
            ]
        ]
    },
    {
        "id": "948c245c80c18ed9",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 2820,
        "wires": []
    },
    {
        "id": "69133e5578d8d519",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2010,
        "y": 2780,
        "wires": []
    },
    {
        "id": "e4d5097ebd7590e3",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1650,
        "y": 2680,
        "wires": [
            [
                "fd497a93ac24b99e"
            ]
        ]
    },
    {
        "id": "216f55f9767ff53a",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1610,
        "y": 2780,
        "wires": [
            [
                "d4546258e4fd2c43"
            ]
        ]
    },
    {
        "id": "ee9edf6773dc9e80",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "kunden_stammdaten.json schreiben",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1650,
        "y": 2600,
        "wires": [
            [
                "9fe26839a1e98ab7"
            ]
        ]
    },
    {
        "id": "2fd8cd24ef3ca281",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "GET /api/pb/snapshot",
        "url": "/api/pb/snapshot",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 2860,
        "wires": [
            [
                "87c9602477bca030"
            ]
        ]
    },
    {
        "id": "87c9602477bca030",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 2860,
        "wires": [
            [
                "7181e0b3b5441717"
            ]
        ]
    },
    {
        "id": "7181e0b3b5441717",
        "type": "fs-ops-access",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "existiert Datei?",
        "path": "",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 750,
        "y": 2860,
        "wires": [
            [
                "4406e8602c76e676"
            ],
            [
                "572f7613c5171676"
            ]
        ]
    },
    {
        "id": "4406e8602c76e676",
        "type": "file in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "lesen (utf8)",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "x": 950,
        "y": 2860,
        "wires": [
            [
                "8bd88f7173449a9a"
            ]
        ]
    },
    {
        "id": "8bd88f7173449a9a",
        "type": "json",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "parse",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1120,
        "y": 2860,
        "wires": [
            [
                "0690323155aa8ef2"
            ]
        ]
    },
    {
        "id": "572f7613c5171676",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Fallback: []",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 950,
        "y": 2900,
        "wires": [
            [
                "0690323155aa8ef2"
            ]
        ]
    },
    {
        "id": "0690323155aa8ef2",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Version anhängen (global)",
        "func": "let ver = global.get('pb_version');\nif (!ver) { ver = String(Date.now()); global.set('pb_version', ver); }\nmsg.payload = { customers: Array.isArray(msg.payload) ? msg.payload : [], version: ver };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1340,
        "y": 2880,
        "wires": [
            [
                "b739f83a1f86db3c"
            ]
        ]
    },
    {
        "id": "b739f83a1f86db3c",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "200",
        "statusCode": "",
        "headers": {},
        "x": 1540,
        "y": 2880,
        "wires": []
    },
    {
        "id": "82033a023a5391bf",
        "type": "http in",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "PUT /api/pb/snapshot",
        "url": "/api/pb/snapshot",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 340,
        "y": 2980,
        "wires": [
            [
                "96edd07e868a5ac6"
            ]
        ]
    },
    {
        "id": "96edd07e868a5ac6",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Body parsen + prüfen",
        "func": "function safeParse(x){\n  if (x == null) return null;\n  if (Buffer.isBuffer(x)) { try { return JSON.parse(x.toString('utf8')); } catch { return null; } }\n  if (typeof x === 'string') { try { return JSON.parse(x); } catch { return null; } }\n  if (typeof x === 'object') return x;\n  return null;\n}\nconst body = safeParse(msg.payload);\nif (!body || !Array.isArray(body.customers) || typeof body.version !== 'string') {\n  msg.statusCode = 400;\n  msg.payload = { error: 'bad_payload' };\n  return [null, msg];\n}\nmsg.body = { customers: body.customers, version: body.version };\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 570,
        "y": 2980,
        "wires": [
            [
                "739e9b38e927c880"
            ],
            [
                "ec0b4bed560ac8d2"
            ]
        ]
    },
    {
        "id": "ec0b4bed560ac8d2",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "400 bad payload",
        "statusCode": "400",
        "headers": {},
        "x": 810,
        "y": 3020,
        "wires": []
    },
    {
        "id": "739e9b38e927c880",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Pfad setzen",
        "func": "msg.filename = global.get('PathStammdaten') + '/kunden_stammdaten.json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 2980,
        "wires": [
            [
                "4e39262379dd4dd2"
            ]
        ]
    },
    {
        "id": "4e39262379dd4dd2",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "Version vergleichen (global)",
        "func": "const currentVersion = global.get('pb_version') || '0';\nconst clientVersion  = String(msg.body?.version || '');\nif (clientVersion !== currentVersion) {\n  msg.statusCode = 409;\n  msg.payload = { error: 'version_conflict', currentVersion };\n  return [null, msg];\n}\nconst next = Array.isArray(msg.body.customers) ? msg.body.customers : [];\nmsg.payload = JSON.stringify(next, null, 2);\nmsg.nextVersion = String(Date.now());\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 1050,
        "y": 2980,
        "wires": [
            [
                "5df24669e97283b6"
            ],
            [
                "95f1c5e24f5f224e"
            ]
        ]
    },
    {
        "id": "95f1c5e24f5f224e",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "409 conflict",
        "statusCode": "409",
        "headers": {},
        "x": 1270,
        "y": 3020,
        "wires": []
    },
    {
        "id": "5df24669e97283b6",
        "type": "file",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "schreiben (overwrite)",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1300,
        "y": 2980,
        "wires": [
            [
                "bcad8f79ef187fef"
            ]
        ]
    },
    {
        "id": "bcad8f79ef187fef",
        "type": "function",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "200 + neue Version setzen",
        "func": "if (msg.nextVersion) { global.set('pb_version', msg.nextVersion); }\nmsg.statusCode = 200;\nmsg.payload = { ok: true, version: global.get('pb_version') || '0' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1550,
        "y": 2980,
        "wires": [
            [
                "5aece03cec227a21"
            ]
        ]
    },
    {
        "id": "5aece03cec227a21",
        "type": "http response",
        "z": "b1c585f0d25b86fd",
        "g": "b38df26cbb8bb4b3",
        "name": "200 ok",
        "statusCode": "200",
        "headers": {},
        "x": 1750,
        "y": 2980,
        "wires": []
    },
    {
        "id": "pt_status_in",
        "type": "http in",
        "z": "24039523dcf573b0",
        "name": "",
        "url": "/api/protools/status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "a2dad58a4cc5f504"
            ]
        ]
    },
    {
        "id": "pt_status_exec",
        "type": "exec",
        "z": "24039523dcf573b0",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "check Pro Tools",
        "x": 720,
        "y": 60,
        "wires": [
            [
                "pt_status_parse"
            ],
            [],
            []
        ]
    },
    {
        "id": "pt_status_parse",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "to JSON",
        "func": "const out = (msg.payload||'').toString().trim().toLowerCase();\nmsg.payload = { online: out === 'true' };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 910,
        "y": 60,
        "wires": [
            [
                "pt_status_out"
            ]
        ]
    },
    {
        "id": "pt_status_out",
        "type": "http response",
        "z": "24039523dcf573b0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 60,
        "wires": []
    },
    {
        "id": "pt_presets_in",
        "type": "http in",
        "z": "24039523dcf573b0",
        "name": "",
        "url": "/api/protools/presets",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "b3dcee3be9daa59d",
                "37f63096637fe26d"
            ]
        ]
    },
    {
        "id": "a2dad58a4cc5f504",
        "type": "OS",
        "z": "24039523dcf573b0",
        "name": "",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "e70a29f8781adf94"
            ]
        ]
    },
    {
        "id": "e70a29f8781adf94",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Befehle je nach OS",
        "func": "const platform = (msg?.payload?.platform) || process.platform;\n\nif (platform === 'win32') {\n    // Windows: prüft auf Prozess \"ProTools\"\n    msg.command = `powershell -NoProfile -Command \"Get-Process | Where-Object { $_.ProcessName -eq 'ProTools' } | Measure | ForEach-Object { $_.Count -gt 0 }\"`;\n} else if (platform === 'darwin') {\n    // macOS: prüft auf Prozess \"Pro Tools\"\n    msg.command = `osascript -e 'tell application \"System Events\" to (exists process \"Pro Tools\")'`;\n} else {\n    msg.command = `echo OS nicht unterstützt`;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 60,
        "wires": [
            [
                "pt_status_exec"
            ]
        ]
    },
    {
        "id": "cf5b4e3d9f7b919f",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Auswahl",
        "func": "// ===== Robust body lesen (String oder Objekt) =====\nlet body = msg.payload;\nif (Buffer.isBuffer(body)) {\n    try { body = JSON.parse(body.toString('utf8')); } catch { body = {}; }\n} else if (typeof body === 'string') {\n    try { body = JSON.parse(body); } catch { body = {}; }\n} else if (typeof body !== 'object' || body === null) {\n    body = {};\n}\n\n// Erwartetes Format:\n// { action: \"store\" | \"recall\", categories: { cat1: [{key}], cat2: [{key,quick?}], cat3: [{key}] } }\nconst action = (body.action || '').toLowerCase();\nconst cats = body.categories || {};\nconst cat1 = Array.isArray(cats.cat1) ? cats.cat1 : [];\nconst cat2 = Array.isArray(cats.cat2) ? cats.cat2 : [];\nconst cat3 = Array.isArray(cats.cat3) ? cats.cat3 : [];\n\n// ===== Globale Pfade & User holen =====\nconst PathMitarbeiter = global.get('PathMitarbeiter') || '';\nconst PathPTUser = global.get('PathPTUser') || '';\nconst activeUser = global.get('activeUser') || '';\n\n// ===== 9 Ausgänge vorbereiten =====\nconst outs = Array(9).fill(null);\n\n// kleine Helper zum Bauen der Payloads\nconst base = { action, PathMitarbeiter, PathPTUser, activeUser };\n\n// Mapping-Helfer: setzt outs[index] wenn Key in der Liste vorhanden ist\nfunction handleCat(items, matchKey, outIndex, extra = {}) {\n    const found = items.find(it => (it?.key || '').toLowerCase() === matchKey);\n    if (!found) return;\n    // quick bei cat2 optional durchreichen\n    outs[outIndex] = {\n        ...msg,\n        payload: { ...base, quick: !!found.quick, ...extra }\n    };\n}\n\n// ===== cat1 =====\nhandleCat(cat1, 'templates', 0);\nhandleCat(cat1, 'trackpresets', 1);\nhandleCat(cat1, 'pluginsettings', 2);\n\n// ===== cat2 =====\n// Achtung: deine UI liefert \"clipFxPresets\" → wir normalisieren auf lowercase:\nhandleCat(cat2, 'fadepresets', 3);\nhandleCat(cat2, 'clipfxpresets', 4);\nhandleCat(cat2, 'memorylocation', 5);\nhandleCat(cat2, 'trackdatatorecall', 6);\n\n// ===== cat3 =====\nhandleCat(cat3, 'keyboardshortcuts', 7);\nhandleCat(cat3, 'pluginmaps', 8);\n\n// Falls gar nichts ausgewählt war, kannst du optional 400 melden –\n// ich lasse das absichtlich als \"kein Output = kein Job\".\n// ganz am Ende der Funktion:\nmsg.job = msg.job || {};\nmsg.job.action = action;   // \"store\" | \"recall\"\n\nreturn outs;",
        "outputs": 9,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1140,
        "wires": [
            [
                "c3540eab39bc2683"
            ],
            [
                "a266be18af804bb0"
            ],
            [
                "15ed22f12517848f"
            ],
            [
                "2f9a0a1f4a3c0d01"
            ],
            [
                "926c052763c39e29"
            ],
            [
                "defb410130f27b91"
            ],
            [
                "ad680f0fcc01ddb6"
            ],
            [
                "97634934f5c4429f"
            ],
            []
        ],
        "outputLabels": [
            "Templates",
            "Track Presets",
            "Plug-In Settings",
            "Fade Presets",
            "Clip Effects Presets",
            "Memory Location Presets",
            "Track Data to Recall Presets",
            "Keyboard Shortcuts",
            "Plug-In Maps"
        ]
    },
    {
        "id": "c3540eab39bc2683",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Template Funktion",
        "func": "// Template Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action } = msg.payload || {};\n    msg.category = \"templates\";\n\n    // startCat nur 1x nebenbei senden\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    if (action === \"recall\") {\n        msg.templateSrc = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\n        msg.templateDest = `${PathPTUser}/Session Templates/${activeUser}`;\n        return [msg, startCat];\n    } else if (action === \"store\") {\n        msg.templateSrc = `${PathPTUser}/Session Templates/${activeUser}`;\n        msg.templateDest = `${PathMitarbeiter}/${activeUser}/immo24/templates`;\n        return [msg, startCat];\n    }\n\n    // ungültige Aktion\n    return [null, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"templates\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "dde28766e8809a51"
            ],
            [
                "e60e5ab898a0a6de"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "8d053651e71a88d0",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Copy Templates",
        "source": "templateSrc",
        "sourceType": "msg",
        "target": "templateDest",
        "targetType": "msg",
        "x": 1680,
        "y": 300,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "801fc15ef3777ecb",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Plugin Pfad durchsuchen",
        "path": "payload.PluginPath",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 930,
        "y": 700,
        "wires": [
            [
                "f9ae2e0d8b851b95"
            ]
        ]
    },
    {
        "id": "f9ae2e0d8b851b95",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Split Plugin-Ordner",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1150,
        "y": 700,
        "wires": [
            [
                "27d01ea6c29f13b3"
            ]
        ]
    },
    {
        "id": "27d01ea6c29f13b3",
        "type": "change",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Pfad zum user-Ordner bauen",
        "rules": [
            {
                "t": "set",
                "p": "payload.pluginName",
                "pt": "msg",
                "to": "files",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.userDir",
                "pt": "msg",
                "to": "payload.PluginPath & \"/\" & files & \"/\" & payload.activeUser",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 700,
        "wires": [
            [
                "3a65d89c850f97fd"
            ]
        ]
    },
    {
        "id": "717547741be93b38",
        "type": "fs-ops-stats",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.userDir",
        "filenameType": "msg",
        "stats": "stats",
        "sizeType": "msg",
        "x": 1580,
        "y": 660,
        "wires": [
            [
                "88826b980a9a9e60"
            ]
        ]
    },
    {
        "id": "88826b980a9a9e60",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Ist ein Verzeichnis?",
        "func": "// Prüfen ob Stat-Wert ein Verzeichnis ist\nif (msg.stats && typeof msg.stats.mode === \"number\") {\n    if ((msg.stats.mode & 57344) === 16384) {\n        // Ist ein Verzeichnis\n        return msg;\n    }\n}\n// Kein Verzeichnis: Nachricht verwerfen\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 700,
        "wires": [
            [
                "34ab116ea9fc7b9a"
            ]
        ]
    },
    {
        "id": "d59e642b1764df76",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Plug-In Settings Funktion",
        "func": "let PathMitarbeiter = msg.payload.PathMitarbeiter;\nlet activeUser = msg.payload.activeUser;\nlet pluginName = msg.payload.pluginName;\nlet userDir = msg.payload.userDir;\n\n// Ohne passenden payload keine Aktion\nif (msg.payload.action === \"recall\") {\n    msg.pluginsettingSrc = `${PathMitarbeiter}/${activeUser}/immo24/pluginsettings/${pluginName}`;\n    msg.pluginsettingDest = `${userDir}`;\n    return msg;\n} else if (msg.payload.action === \"store\") {\n    msg.pluginsettingSrc = `${userDir}`;\n    msg.pluginsettingDest = `${PathMitarbeiter}/${activeUser}/immo24/pluginsettings/${pluginName}`;\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 700,
        "wires": [
            [
                "46d02e8955535559"
            ]
        ]
    },
    {
        "id": "1c85a7b73c4d0534",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Copy Plug-In Settings",
        "source": "pluginsettingSrc",
        "sourceType": "msg",
        "target": "pluginsettingDest",
        "targetType": "msg",
        "x": 2520,
        "y": 700,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "926c052763c39e29",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Clip Effects Preset Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Clip Effects Presets`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets/Quick Presets`;\n\n    msg.category = \"clipfxpresets\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.clipeffectSrc = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets`;\n        msg.clipeffectDest = `${rootDir}/${activeUser}`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.tfx`,\n                    destname: `Quick Preset ${i}.tfx`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.clipeffectSrc = `${rootDir}/${activeUser}`;\n        msg.clipeffectDest = `${PathMitarbeiter}/${activeUser}/immo24/clipeffectspresets`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.tfx`,\n                    destname: `Quick Preset ${i}.tfx`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"clipfxpresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "eee3ed5815c3c52d",
                "1a5269fddad889e9"
            ],
            [
                "1a3576d54deb10e1"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "501cb80a18e2101f",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1140,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "eee3ed5815c3c52d",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Pfad durchsuchen",
        "path": "clipeffectSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1100,
        "wires": [
            [
                "7f28c8932dfe9550"
            ]
        ]
    },
    {
        "id": "5726ab925fa2402a",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.clipeffectSrc, msg.clipeffectDest\nif (!msg.files || !msg.clipeffectSrc || !msg.clipeffectDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.clipeffectSrc}/${msg.files}`;\nconst itemDest = `${msg.clipeffectDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt clipeffectSrc/Dest -> hier pro Item überschreiben:\nmsg.clipeffectSrc = itemSrc;\nmsg.clipeffectDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1080,
        "wires": [
            [
                "1f67eb9de416c2b3"
            ]
        ]
    },
    {
        "id": "ccccb265ef4fb1dc",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1320,
        "wires": [
            [
                "af2ab063726281c3"
            ]
        ]
    },
    {
        "id": "defb410130f27b91",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Memory Location Preset Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Memory Location Window`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets/Quick Presets`;\n\n    msg.category = \"memoryLocation\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.memorylocationSrc = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets`;\n        msg.memorylocationDest = `${rootDir}/${activeUser}`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.memorylocationSrc = `${rootDir}/${activeUser}`;\n        msg.memorylocationDest = `${PathMitarbeiter}/${activeUser}/immo24/memorylocationpresets`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"memoryLocation\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1380,
        "wires": [
            [
                "8e5fd46df3643f82",
                "9813dbafe6b048da"
            ],
            [
                "3882283dafc8f7ae"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "917f910377da205a",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Copy Memory Location Presets",
        "source": "memorylocationSrc",
        "sourceType": "msg",
        "target": "memorylocationDest",
        "targetType": "msg",
        "x": 2110,
        "y": 1320,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "c8ca1d82140028e8",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1380,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "dd0e50f3c1df94a2",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1400,
        "wires": [
            [
                "mem_quick_src_exists"
            ]
        ]
    },
    {
        "id": "8e5fd46df3643f82",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Pfad durchsuchen",
        "path": "memorylocationSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1340,
        "wires": [
            [
                "7c5744bd352c2266"
            ]
        ]
    },
    {
        "id": "bfc668c714f6589b",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1320,
        "wires": [
            [
                "ccccb265ef4fb1dc"
            ]
        ]
    },
    {
        "id": "af2ab063726281c3",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.memorylocationSrc, msg.memorylocationDest\nif (!msg.files || !msg.memorylocationSrc || !msg.memorylocationDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.memorylocationSrc}/${msg.files}`;\nconst itemDest = `${msg.memorylocationDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt memorylocationSrc/Dest -> hier pro Item überschreiben:\nmsg.memorylocationSrc = itemSrc;\nmsg.memorylocationDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1320,
        "wires": [
            [
                "mem_counter_inc_bulk"
            ]
        ]
    },
    {
        "id": "ad680f0fcc01ddb6",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "TrackData Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Track Data to Recall`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/trackdatarecallpresets/Quick Presets`;\n\n    msg.category = \"trackdatarecall\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.trackdataSrc = `${PathMitarbeiter}/${activeUser}/immo24/trackdatapresets`;\n        msg.trackdataDest = `${rootDir}/${activeUser}`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.trackdataSrc = `${rootDir}/${activeUser}`;\n        msg.trackdataDest = `${PathMitarbeiter}/${activeUser}/immo24/trackdatapresets`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"trackdatarecall\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1600,
        "wires": [
            [
                "d298d4ce858c6423",
                "83efdb60310b9f66"
            ],
            [
                "716f54db6d32889b"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "2bbec99d791c83db",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Copy TrackData Presets",
        "source": "trackdataSrc",
        "sourceType": "msg",
        "target": "trackdataDest",
        "targetType": "msg",
        "x": 2090,
        "y": 1560,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "f99608698a8bf030",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1620,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "467ae7fcbc6b7735",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1640,
        "wires": [
            [
                "41005d8cd172bc9d"
            ]
        ]
    },
    {
        "id": "d298d4ce858c6423",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Pfad durchsuchen",
        "path": "trackdataSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1560,
        "wires": [
            [
                "6abd7f2dbd599246"
            ]
        ]
    },
    {
        "id": "4de5265817a08368",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1560,
        "wires": [
            [
                "b58c7b938f4c91b8"
            ]
        ]
    },
    {
        "id": "b58c7b938f4c91b8",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1560,
        "wires": [
            [
                "1df69ea1c23c0c77"
            ]
        ]
    },
    {
        "id": "1df69ea1c23c0c77",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.trackdataSrc, msg.trackdataDest\nif (!msg.files || !msg.trackdataSrc || !msg.trackdataDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.trackdataSrc}/${msg.files}`;\nconst itemDest = `${msg.trackdataDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt trackdataSrc/Dest -> hier pro Item überschreiben:\nmsg.trackdataSrc = itemSrc;\nmsg.trackdataDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1560,
        "wires": [
            [
                "91137af6b7515c1b"
            ]
        ]
    },
    {
        "id": "97634934f5c4429f",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Keyboard Shortcut Funktion",
        "func": "// Memory Location Preset Funktion mit Error-Catch (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    let PathMitarbeiter = msg.payload.PathMitarbeiter;\n    let PathPTUser = msg.payload.PathPTUser;\n    let activeUser = msg.payload.activeUser;\n\n    let quickPresetJobs = [];\n    let rootDir = `${PathPTUser}/Pro Tools Presets/Keyboard Shortcuts`;\n    let archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortcuts/Quick Presets`;\n\n    msg.category = \"keyboardshortcuts\";\n\n    // ---- startCat nur 1x nebenbei senden ----\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // ---- Aktion verzweigen ----\n    if (msg.payload.action === \"recall\") {\n        msg.kbshortcutSrc = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortscuts`;\n        msg.kbshortcutDest = `${rootDir}/${activeUser}`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${archiveDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${rootDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n\n    } else if (msg.payload.action === \"store\") {\n        msg.kbshortcutSrc = `${rootDir}/${activeUser}`;\n        msg.kbshortcutDest = `${PathMitarbeiter}/${activeUser}/immo24/keyboardshortcuts`;\n\n        if (msg.payload.quick === true) {\n            for (let i = 1; i <= 5; i++) {\n                quickPresetJobs.push({\n                    src: `${rootDir}/Quick Preset ${i}.ptpreset`,\n                    destname: `Quick Preset ${i}.ptpreset`,\n                    destpath: `${archiveDir}`\n                });\n            }\n        }\n        msg.quickPresets = quickPresetJobs;\n        return [msg, startCat];\n    }\n\n    // Keine gültige Aktion\n    return [null, null];\n\n} catch (err) {\n    // Fehler an Aggregator melden\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"keyboardshortcuts\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1840,
        "wires": [
            [
                "9e68a0c8e7d4679a",
                "54f5060cfecb013f"
            ],
            [
                "673b872c6bbacb4a"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "9e68a0c8e7d4679a",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Pfad durchsuchen",
        "path": "kbshortcutSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 910,
        "y": 1780,
        "wires": [
            [
                "d3eacd5953e17d84"
            ]
        ]
    },
    {
        "id": "63f6495b795634b9",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Copy Pfade",
        "func": "// Erwartet: msg.files (Eintragname vom split), msg.kbshortcutSrc, msg.kbshortcutDest\nif (!msg.files || !msg.kbshortcutSrc || !msg.kbshortcutDest) return null;\n\n// Einzelpfade für diesen Eintrag\nconst itemSrc = `${msg.kbshortcutSrc}/${msg.files}`;\nconst itemDest = `${msg.kbshortcutDest}/${msg.files}`;\n\n// Bestehende Copy-Node nutzt kbshortcutSrc/Dest -> hier pro Item überschreiben:\nmsg.kbshortcutSrc = itemSrc;\nmsg.kbshortcutDest = itemDest;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1780,
        "wires": [
            [
                "e8576083d81a103e"
            ]
        ]
    },
    {
        "id": "2f9a0a1f4a3c0d01",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Fade Presets Funktion",
        "func": "// Fade Presets Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\n\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action, quick } = msg.payload || {};\n    if (!PathMitarbeiter || !PathPTUser || !activeUser || !action) return [null, null];\n\n    msg.category = \"fadePresets\";\n\n    // --- startCat NUR 1x pro Job+Kategorie senden (Flow-Flag) ---\n    let startCat = null;\n    const startKey = `startcat:${msg.job?.id || 'none'}:${msg.category}`;\n    if (!flow.get(startKey) && msg.job && msg.job.id) {\n        flow.set(startKey, true);\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    const rootDir = `${PathPTUser}/Fade Presets`;\n    const archiveDir = `${PathMitarbeiter}/${activeUser}/immo24/fadepresets`;\n    const folders = [\"Batch Fade\", \"Cross Fade\", \"Fade In\", \"Fade Out\"];\n\n    // Quelle/Ziel für Bulk\n    if (action === \"recall\") {\n        msg.fadeSrc = archiveDir;\n        msg.fadeDest = rootDir;\n    } else if (action === \"store\") {\n        msg.fadeSrc = rootDir;\n        msg.fadeDest = archiveDir;\n    } else {\n        return [null, startCat];\n    }\n\n    // Quick Presets vorbereiten (separat kopieren)\n    const doQuick = (quick === true || quick === \"true\");\n    msg.quickPresets = [];\n    if (doQuick) {\n        for (const folder of folders) {\n            for (let i = 1; i <= 5; i++) {\n                if (action === \"recall\") {\n                    msg.quickPresets.push({\n                        src: `${archiveDir}/${folder}/Quick Preset ${i}.fdpreset`,\n                        destname: `Quick Preset ${i}.fdpreset`,\n                        destpath: `${rootDir}/${folder}`\n                    });\n                } else {\n                    msg.quickPresets.push({\n                        src: `${rootDir}/${folder}/Quick Preset ${i}.fdpreset`,\n                        destname: `Quick Preset ${i}.fdpreset`,\n                        destpath: `${archiveDir}/${folder}`\n                    });\n                }\n            }\n        }\n    }\n\n    // Ordnerliste für Bulk übergeben\n    msg.folders = folders;\n\n    return [msg, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"fadePresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 880,
        "wires": [
            [
                "e0e4b5c2b9a1d7f5",
                "0c9f2f7f2db2d1f9"
            ],
            [
                "0e22a946caa8156b"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "0c9f2f7f2db2d1f9",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Split Ordner (4x)",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "folders",
        "x": 820,
        "y": 880,
        "wires": [
            [
                "d9b7b4ec5f1f3e7e"
            ]
        ]
    },
    {
        "id": "d9b7b4ec5f1f3e7e",
        "type": "change",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "scanSrc / destFolder bauen",
        "rules": [
            {
                "t": "set",
                "p": "scanFolder",
                "pt": "msg",
                "to": "folders",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "scanSrc",
                "pt": "msg",
                "to": "fadeSrc & \"/\" & folders",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "destFolder",
                "pt": "msg",
                "to": "fadeDest & \"/\" & folders",
                "tot": "jsonata"
            }
        ],
        "x": 1040,
        "y": 880,
        "wires": [
            [
                "a35b9f8b5f3c9a11"
            ]
        ]
    },
    {
        "id": "a35b9f8b5f3c9a11",
        "type": "fs-ops-dir",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "List .fdpreset im Ordner",
        "path": "scanSrc",
        "pathType": "msg",
        "filter": "*",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 1290,
        "y": 880,
        "wires": [
            [
                "f8f7f0fb2f6a5b33"
            ]
        ]
    },
    {
        "id": "f8f7f0fb2f6a5b33",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Split Dateien",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1490,
        "y": 880,
        "wires": [
            [
                "2f0a7a3d7b0c44a2"
            ]
        ]
    },
    {
        "id": "2f0a7a3d7b0c44a2",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Presets filtern",
        "func": "// erwartet: msg.files (Dateiname), msg.scanSrc, msg.destFolder\nconst name = msg.files;\nif (!name || !msg.scanSrc || !msg.destFolder) return null;\n\n// nur .fdpreset\nconst isFdpreset = /\\.fdpreset$/i.test(name);\n// Quick Presets ausschließen\nconst isQuick = /^Quick Preset\\s+[1-5]\\.fdpreset$/i.test(name);\n\nif (!isFdpreset || isQuick) return null;\n\nmsg.fileSrc   = `${msg.scanSrc}/${name}`;\nmsg.fileName  = name;\n// Zielordner existiert ggf. noch nicht – fs-ops-copy legt Datei im destFolder/destFilename ab\nmsg.destFolder = msg.destFolder;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 880,
        "wires": [
            [
                "22c35c48819fd2c5"
            ]
        ]
    },
    {
        "id": "3c1e6a6d7b1b2c44",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Copy .fdpreset (Bulk)",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "fileSrc",
        "sourceFilenameType": "msg",
        "destPath": "destFolder",
        "destPathType": "msg",
        "destFilename": "fileName",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 2140,
        "y": 880,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "e0e4b5c2b9a1d7f5",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Split Quick Presets",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 830,
        "y": 920,
        "wires": [
            [
                "bd97d6f6ce673d8c"
            ]
        ]
    },
    {
        "id": "5a8d0f1b3e2c4d66",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Presets kopieren (5×4)",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1540,
        "y": 920,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "f1ddf879ad3e29dc",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "templateDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1260,
        "y": 320,
        "wires": [
            [
                "0177cdfae37f423d"
            ]
        ]
    },
    {
        "id": "dde28766e8809a51",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "templateDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "0177cdfae37f423d"
            ],
            [
                "f1ddf879ad3e29dc"
            ]
        ]
    },
    {
        "id": "9813dbafe6b048da",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.destpath",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "dd0e50f3c1df94a2"
            ],
            [
                "4b6d8a94e30892b5"
            ]
        ]
    },
    {
        "id": "4b6d8a94e30892b5",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "quickPresets.destpath",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1440,
        "wires": [
            [
                "dd0e50f3c1df94a2"
            ]
        ]
    },
    {
        "id": "37f63096637fe26d",
        "type": "debug",
        "z": "24039523dcf573b0",
        "name": "POST",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 120,
        "wires": []
    },
    {
        "id": "9bb5182f2a01f7f2",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "memorylocationDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1360,
        "wires": [
            [
                "bfc668c714f6589b"
            ]
        ]
    },
    {
        "id": "7c5744bd352c2266",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "memorylocationDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1340,
        "wires": [
            [
                "bfc668c714f6589b"
            ],
            [
                "9bb5182f2a01f7f2"
            ]
        ]
    },
    {
        "id": "b3dcee3be9daa59d",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Job ID",
        "func": "// 2 Outputs: [weiter zum Flow, Start-Report an Aggregator]\nconst id = Date.now().toString(36) + Math.random().toString(36).slice(2, 8);\n\nmsg.job = {\n    id,\n    started: new Date().toISOString()\n};\n\n// HTTP response Handle zwischenspeichern\nflow.set(\"job:\" + id + \":res\", msg.res);\n\n// 1) Normal weiter\nconst next = RED.util.cloneMessage(msg);\n\n// 2) Start-Event (optional, registriert res auch im Aggregator)\nconst start = {\n    topic: \"report\",\n    payload: { type: \"start\" },\n    job: msg.job,\n    res: msg.res\n};\n\nreturn [next, start];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 50,
        "y": 1040,
        "wires": [
            [
                "cf5b4e3d9f7b919f",
                "fc844a7e96cc53cb"
            ],
            [
                "8c9f71b21e0933ff"
            ]
        ],
        "outputLabels": [
            "Auswahl",
            "Report"
        ]
    },
    {
        "id": "c031ce02b7ae1ff1",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Aggregator",
        "func": "// Aggregiert ohne Counts, nur Flags je Kategorie\nconst key = \"job:\" + (msg.job?.id || \"none\");\nlet st = flow.get(key) || {\n  started: msg.job?.started || new Date().toISOString(),\n  expect: {},    // cat → true (gestartet)\n  done: {},      // cat → true (fertig)\n  hasError: {},  // cat → true (Fehler aufgetreten)\n  hasSkipped: {} // cat → true (irgendwas übersprungen)\n};\n\n// 'start' kann res registrieren\nif (msg.topic === \"report\" && msg.payload?.type === \"start\" && msg.res) {\n  flow.set(key + \":res\", msg.res);\n}\n\nif (msg.topic === \"report\" && msg.payload) {\n  const p = msg.payload;\n\n  if (p.type === \"startCat\") {\n    const cat = p.category || \"unknown\";\n    st.expect[cat] = true;\n  }\n\n  if (p.type === \"skipped\") {\n    const cat = p.category || \"unknown\";\n    st.hasSkipped[cat] = true;\n  }\n\n  if (p.type === \"error\") {\n    const cat = p.category || \"unknown\";\n    st.hasError[cat] = true;\n  }\n\n  if (p.type === \"doneCat\") {\n    const cat = p.category || \"unknown\";\n    st.done[cat] = true;\n  }\n}\n\n// sichern\nflow.set(key, st);\n\n// fertig, wenn alle erwarteten Kategorien done sind\nconst expectedCats = Object.keys(st.expect);\nconst finished = expectedCats.length > 0 && expectedCats.every(cat => st.done[cat]);\n\nconst progressMsg = { ...msg, aggregated: st };\nif (finished) {\n  const finalizeMsg = { ...msg, aggregated: st, _ready: true };\n  return [progressMsg, finalizeMsg];\n}\nreturn [progressMsg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 1200,
        "wires": [
            [],
            [
                "89b0d90d58155de5"
            ]
        ],
        "outputLabels": [
            "Progress",
            "Finalize"
        ]
    },
    {
        "id": "89b0d90d58155de5",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Finalize → HTTP response",
        "func": "// Nur antworten, wenn _ready\nif (!msg._ready) return null;\n\nconst key = \"job:\" + (msg.job?.id || \"none\");\nconst st = msg.aggregated || flow.get(key) || { expect: {}, done: {}, hasError: {}, hasSkipped: {} };\n\n// Kategorien sortiert (optional)\nconst cats = Object.keys(st.expect);\n\n// details ohne Counts\nconst details = cats.map(cat => {\n  const error = !!st.hasError[cat];\n  const skipped = !!st.hasSkipped[cat];\n\n  const status = error ? \"error\" : (skipped ? \"partial\" : \"ok\");\n  const note = status === \"partial\" ? \"some items were not present\" : undefined;\n\n  return { category: cat, status, note };\n});\n\n// overall + HTTP-Status\nconst hasError = details.some(d => d.status === \"error\");\nconst hasPartial = details.some(d => d.status === \"partial\");\nconst overall = hasError ? \"error\" : \"ok\";\n\n// res holen\nconst res = flow.get(key + \":res\");\nif (!res) {\n  flow.set(key, null);\n  flow.set(key + \":res\", null);\n  return null;\n}\n\n// Aktion, die wir schon in \"Auswahl\" auf msg.job.action gesetzt haben\nconst action = msg.job?.action || \"unknown\";\n\nmsg.res = res;\n// -> 207 jetzt auch bei \"partial\", nicht nur error\nmsg.statusCode = (hasError || hasPartial) ? 207 : 200;\n\nmsg.payload = {\n  action,             // \"store\" | \"recall\"\n  overall,            // \"ok\" | \"error\"\n  details,            // [{ category, status, note? }]\n  jobId: msg.job?.id,\n  started: st.started,\n  finished: new Date().toISOString(),\n  // Text fürs UI (Frontend nutzt bevorzugt \"message\")\n  message: hasError\n    ? \"Vorgang abgeschlossen – Fehler aufgetreten\"\n    : (hasPartial\n      ? \"Vorgang abgeschlossen – mit Hinweisen\"\n      : (action === \"store\" ? \"Store erfolgreich\" : \"Recall erfolgreich\"))\n};\n\n// Cleanup\nflow.set(key, null);\nflow.set(key + \":res\", null);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 1200,
        "wires": [
            [
                "70e019b4dabfee92",
                "cf04cf1b1b45cbc5"
            ]
        ]
    },
    {
        "id": "70e019b4dabfee92",
        "type": "http response",
        "z": "24039523dcf573b0",
        "name": "HTTP 200/207",
        "statusCode": "",
        "headers": {},
        "x": 3340,
        "y": 1200,
        "wires": []
    },
    {
        "id": "cf04cf1b1b45cbc5",
        "type": "debug",
        "z": "24039523dcf573b0",
        "name": "HTTP RESPONSE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 1260,
        "wires": []
    },
    {
        "id": "fc844a7e96cc53cb",
        "type": "debug",
        "z": "24039523dcf573b0",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 800,
        "wires": []
    },
    {
        "id": "958a9bcb116f0244",
        "type": "link in",
        "z": "24039523dcf573b0",
        "name": "REPORT IN",
        "links": [
            "8c9f71b21e0933ff",
            "3882283dafc8f7ae",
            "716f54db6d32889b",
            "1a3576d54deb10e1",
            "673b872c6bbacb4a",
            "e60e5ab898a0a6de",
            "b5c5c6741c0f3ad0",
            "0e22a946caa8156b",
            "97dbf2e19dec5ed0"
        ],
        "x": 2755,
        "y": 1260,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "8c9f71b21e0933ff",
        "type": "link out",
        "z": "24039523dcf573b0",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 185,
        "y": 880,
        "wires": []
    },
    {
        "id": "mem_counter_inc_bulk",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1320,
        "wires": [
            [
                "917f910377da205a"
            ]
        ]
    },
    {
        "id": "mem_counter_dec_done",
        "type": "function",
        "z": "24039523dcf573b0",
        "name": "Counter -- & DONE",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nlet n = flow.get(key) || 0;\nif (n > 0) n--; else n = 0;\nflow.set(key, n);\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: \"report\",\n    payload: { type: \"doneCat\", category: cat },\n    job: msg.job\n  });\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 2710,
        "y": 1140,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "mem_quick_src_exists",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1400,
        "wires": [
            [
                "mem_counter_inc_quick"
            ],
            [
                "mem_report_skipped"
            ]
        ]
    },
    {
        "id": "mem_counter_inc_quick",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1380,
        "wires": [
            [
                "c8ca1d82140028e8"
            ]
        ]
    },
    {
        "id": "mem_report_skipped",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "bf4eee564e09bce7",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1420,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "3882283dafc8f7ae",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1460,
        "wires": []
    },
    {
        "id": "e2f3a4b5c6d7e8f1",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "CATCH memoryLocation",
        "scope": [
            "8e5fd46df3643f82",
            "917f910377da205a",
            "c8ca1d82140028e8",
            "4b6d8a94e30892b5",
            "9bb5182f2a01f7f2",
            "7c5744bd352c2266",
            "9813dbafe6b048da"
        ],
        "uncaught": false,
        "x": 610,
        "y": 1420,
        "wires": [
            [
                "f1e2d3c4b5a69788"
            ]
        ]
    },
    {
        "id": "f1e2d3c4b5a69788",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "bf4eee564e09bce7",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'memoryLocation';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "3882283dafc8f7ae"
            ]
        ]
    },
    {
        "id": "585a9df6e2d4fc8f",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "CATCH trackdata",
        "scope": [
            "2bbec99d791c83db",
            "f99608698a8bf030",
            "0390d6ddd4e2c499",
            "32c6fc7eee758dc2",
            "6abd7f2dbd599246",
            "d298d4ce858c6423",
            "83efdb60310b9f66"
        ],
        "uncaught": false,
        "x": 580,
        "y": 1640,
        "wires": [
            [
                "5ce80ee7862fa202"
            ]
        ]
    },
    {
        "id": "5ce80ee7862fa202",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'trackdatarecall';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1680,
        "wires": [
            [
                "716f54db6d32889b"
            ]
        ]
    },
    {
        "id": "6abd7f2dbd599246",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackdataDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1560,
        "wires": [
            [
                "4de5265817a08368"
            ],
            [
                "0390d6ddd4e2c499"
            ]
        ]
    },
    {
        "id": "0390d6ddd4e2c499",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackdataDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1600,
        "wires": [
            [
                "4de5265817a08368"
            ]
        ]
    },
    {
        "id": "91137af6b7515c1b",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1560,
        "wires": [
            [
                "2bbec99d791c83db"
            ]
        ]
    },
    {
        "id": "83efdb60310b9f66",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.destpath",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1640,
        "wires": [
            [
                "467ae7fcbc6b7735"
            ],
            [
                "32c6fc7eee758dc2"
            ]
        ]
    },
    {
        "id": "32c6fc7eee758dc2",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "quickPresets.destpath",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1680,
        "wires": [
            [
                "467ae7fcbc6b7735"
            ]
        ]
    },
    {
        "id": "41005d8cd172bc9d",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1640,
        "wires": [
            [
                "8cb029efa37424c0"
            ],
            [
                "b45491f8febc2229"
            ]
        ]
    },
    {
        "id": "8cb029efa37424c0",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1620,
        "wires": [
            [
                "f99608698a8bf030"
            ]
        ]
    },
    {
        "id": "b45491f8febc2229",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "21da7a611532cde9",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1660,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "716f54db6d32889b",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "21da7a611532cde9",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1680,
        "wires": []
    },
    {
        "id": "4ffb2321785ac98b",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "CATCH clipeffects",
        "scope": [
            "eee3ed5815c3c52d",
            "1a5269fddad889e9",
            "7f28c8932dfe9550",
            "1961473680376c87",
            "9b7306709391a052",
            "501cb80a18e2101f",
            "5659f0cda1297389"
        ],
        "uncaught": false,
        "x": 590,
        "y": 1180,
        "wires": [
            [
                "6f4c05fec7be2cb3"
            ]
        ]
    },
    {
        "id": "6f4c05fec7be2cb3",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'clipfxpresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1220,
        "wires": [
            [
                "1a3576d54deb10e1"
            ]
        ]
    },
    {
        "id": "7f28c8932dfe9550",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "clipeffectDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1100,
        "wires": [
            [
                "ecac37490d9bab96"
            ],
            [
                "9b7306709391a052"
            ]
        ]
    },
    {
        "id": "ecac37490d9bab96",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1080,
        "wires": [
            [
                "c9e0e810f99a762b"
            ]
        ]
    },
    {
        "id": "c9e0e810f99a762b",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1080,
        "wires": [
            [
                "5726ab925fa2402a"
            ]
        ]
    },
    {
        "id": "1f67eb9de416c2b3",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1080,
        "wires": [
            [
                "5659f0cda1297389"
            ]
        ]
    },
    {
        "id": "5659f0cda1297389",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Copy Clip Effects Presets",
        "source": "clipeffectSrc",
        "sourceType": "msg",
        "target": "clipeffectDest",
        "targetType": "msg",
        "x": 2090,
        "y": 1080,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "9b7306709391a052",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "clipeffectDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1120,
        "wires": [
            [
                "ecac37490d9bab96"
            ]
        ]
    },
    {
        "id": "db8c2123cd78a2a1",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1160,
        "wires": [
            [
                "47f58a92faa4b273"
            ],
            [
                "4f8384d0182832a6"
            ]
        ]
    },
    {
        "id": "8ed53db524f61578",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1160,
        "wires": [
            [
                "db8c2123cd78a2a1"
            ]
        ]
    },
    {
        "id": "1961473680376c87",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "quickPresets.destpath",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1200,
        "wires": [
            [
                "8ed53db524f61578"
            ]
        ]
    },
    {
        "id": "1a5269fddad889e9",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.destpath",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1180,
        "wires": [
            [
                "8ed53db524f61578"
            ],
            [
                "1961473680376c87"
            ]
        ]
    },
    {
        "id": "1a3576d54deb10e1",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1220,
        "wires": []
    },
    {
        "id": "47f58a92faa4b273",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "70677eb1b82c5a42",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1140,
        "wires": [
            [
                "501cb80a18e2101f"
            ]
        ]
    },
    {
        "id": "4f8384d0182832a6",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "70677eb1b82c5a42",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1180,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "f149ab4d6c3361d7",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "CATCH trackdata",
        "scope": [
            "2bbec99d791c83db",
            "f99608698a8bf030",
            "0390d6ddd4e2c499",
            "32c6fc7eee758dc2",
            "6abd7f2dbd599246",
            "d298d4ce858c6423",
            "83efdb60310b9f66"
        ],
        "uncaught": false,
        "x": 580,
        "y": 1880,
        "wires": [
            [
                "ec8625296b55c237"
            ]
        ]
    },
    {
        "id": "ec8625296b55c237",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'keyboardshortcuts';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1920,
        "wires": [
            [
                "673b872c6bbacb4a"
            ]
        ]
    },
    {
        "id": "673b872c6bbacb4a",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 875,
        "y": 1920,
        "wires": []
    },
    {
        "id": "d3eacd5953e17d84",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "kbshortcutDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1110,
        "y": 1780,
        "wires": [
            [
                "bda8dd2c31472a75"
            ],
            [
                "983f0f1fddf2f572"
            ]
        ]
    },
    {
        "id": "bda8dd2c31472a75",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "split files",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "files",
        "x": 1300,
        "y": 1780,
        "wires": [
            [
                "5c7b329f612ecf44"
            ]
        ]
    },
    {
        "id": "5c7b329f612ecf44",
        "type": "switch",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Presets rausfiltern",
        "property": "files",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "Quick Presets",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1490,
        "y": 1780,
        "wires": [
            [
                "63f6495b795634b9"
            ]
        ]
    },
    {
        "id": "983f0f1fddf2f572",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "kbshortcutDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1320,
        "y": 1820,
        "wires": [
            [
                "bda8dd2c31472a75"
            ]
        ]
    },
    {
        "id": "e8576083d81a103e",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1870,
        "y": 1780,
        "wires": [
            [
                "916a53a295dcad47"
            ]
        ]
    },
    {
        "id": "916a53a295dcad47",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Copy Keyboard Shortcuts",
        "source": "kbshortcutSrc",
        "sourceType": "msg",
        "target": "kbshortcutDest",
        "targetType": "msg",
        "x": 2090,
        "y": 1780,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "54f5060cfecb013f",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.destpath",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 920,
        "y": 1860,
        "wires": [
            [
                "0a7ff522ecc866b5"
            ],
            [
                "0f74cb45dd82a5ba"
            ]
        ]
    },
    {
        "id": "0a7ff522ecc866b5",
        "type": "split",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "split quick",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "quickPresets",
        "x": 1130,
        "y": 1860,
        "wires": [
            [
                "5b841c6ebce3b6fa"
            ]
        ]
    },
    {
        "id": "0f74cb45dd82a5ba",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "quickPresets.destpath",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1140,
        "y": 1900,
        "wires": [
            [
                "0a7ff522ecc866b5"
            ]
        ]
    },
    {
        "id": "5b841c6ebce3b6fa",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1330,
        "y": 1860,
        "wires": [
            [
                "26a33c971f7b20c7"
            ],
            [
                "b938dced525b1034"
            ]
        ]
    },
    {
        "id": "26a33c971f7b20c7",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1840,
        "wires": [
            [
                "0cfb6f4a3d4d0171"
            ]
        ]
    },
    {
        "id": "b938dced525b1034",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "7ca6f5ba8382e25f",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1570,
        "y": 1880,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "0cfb6f4a3d4d0171",
        "type": "fs-ops-copy",
        "z": "24039523dcf573b0",
        "g": "7ca6f5ba8382e25f",
        "name": "Quick Presets kopieren",
        "sourcePath": "",
        "sourcePathType": "str",
        "sourceFilename": "quickPresets.src",
        "sourceFilenameType": "msg",
        "destPath": "quickPresets.destpath",
        "destPathType": "msg",
        "destFilename": "quickPresets.destname",
        "destFilenameType": "msg",
        "link": false,
        "overwrite": true,
        "x": 1810,
        "y": 1840,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "e60e5ab898a0a6de",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 1025,
        "y": 380,
        "wires": []
    },
    {
        "id": "0177cdfae37f423d",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1470,
        "y": 300,
        "wires": [
            [
                "8d053651e71a88d0"
            ]
        ]
    },
    {
        "id": "0455b0dd8e131085",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "CATCH template",
        "scope": [
            "8d053651e71a88d0",
            "f1ddf879ad3e29dc",
            "dde28766e8809a51"
        ],
        "uncaught": false,
        "x": 720,
        "y": 340,
        "wires": [
            [
                "c27c1122548ae7b8"
            ]
        ]
    },
    {
        "id": "c27c1122548ae7b8",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "32425cc956c27352",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'templates';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "e60e5ab898a0a6de"
            ]
        ]
    },
    {
        "id": "a266be18af804bb0",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Track Presets Funktion",
        "func": "// trackkpreset Funktion (Outputs: 2)\n// Out1 = normal weiter, Out2 = startCat / error\ntry {\n    const { PathMitarbeiter, PathPTUser, activeUser, action } = msg.payload || {};\n    msg.category = \"trackpresets\";\n\n    // startCat nur 1x nebenbei senden\n    let startCat = null;\n    if (msg.job && msg.job.id) {\n        startCat = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    if (action === \"recall\") {\n        msg.trackkpresetSrc = `${PathMitarbeiter}/${activeUser}/immo24/trackpresets`;\n        msg.trackkpresetDest = `${PathPTUser}/Track Presets/${activeUser}`;\n        return [msg, startCat];\n    } else if (action === \"store\") {\n        msg.trackkpresetSrc = `${PathPTUser}/Track Presets/${activeUser}`;\n        msg.trackkpresetDest = `${PathMitarbeiter}/${activeUser}/immo24/trackpresets`;\n        return [msg, startCat];\n    }\n\n    // ungültige Aktion\n    return [null, startCat];\n\n} catch (err) {\n    const errorMsg = {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"trackpresets\", message: err.message },\n        job: msg.job\n    };\n    return [null, errorMsg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "122a96507f2fb522"
            ],
            [
                "b5c5c6741c0f3ad0"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "2aaacffa74b4ebdc",
        "type": "fs-extra-copy",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Copy Track Presets",
        "source": "trackpresetSrc",
        "sourceType": "msg",
        "target": "trackpresetDest",
        "targetType": "msg",
        "x": 1690,
        "y": 480,
        "wires": [
            [
                "mem_counter_dec_done"
            ]
        ]
    },
    {
        "id": "1b464dea68e4fbcb",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "trackpresetDest",
        "dirnameType": "msg",
        "recursive": false,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1260,
        "y": 500,
        "wires": [
            [
                "f319bb1b3f5a5649"
            ]
        ]
    },
    {
        "id": "122a96507f2fb522",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "trackpresetDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1050,
        "y": 480,
        "wires": [
            [
                "f319bb1b3f5a5649"
            ],
            [
                "1b464dea68e4fbcb"
            ]
        ]
    },
    {
        "id": "b5c5c6741c0f3ad0",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 1025,
        "y": 560,
        "wires": []
    },
    {
        "id": "f319bb1b3f5a5649",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1470,
        "y": 480,
        "wires": [
            [
                "2aaacffa74b4ebdc"
            ]
        ]
    },
    {
        "id": "7bf21c3b7172136f",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "CATCH trackpresets",
        "scope": [
            "2aaacffa74b4ebdc",
            "1b464dea68e4fbcb",
            "122a96507f2fb522"
        ],
        "uncaught": false,
        "x": 730,
        "y": 520,
        "wires": [
            [
                "ddf7a61881eb3321"
            ]
        ]
    },
    {
        "id": "ddf7a61881eb3321",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "45092586c8772558",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'trackpresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 560,
        "wires": [
            [
                "b5c5c6741c0f3ad0"
            ]
        ]
    },
    {
        "id": "0e22a946caa8156b",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 885,
        "y": 960,
        "wires": []
    },
    {
        "id": "22c35c48819fd2c5",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1910,
        "y": 880,
        "wires": [
            [
                "3c1e6a6d7b1b2c44",
                "8b5cc652c67109bc"
            ]
        ]
    },
    {
        "id": "bd97d6f6ce673d8c",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Src existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.src",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1030,
        "y": 920,
        "wires": [
            [
                "cb629a6342c84f4d"
            ],
            [
                "7956ea8999198d23"
            ]
        ]
    },
    {
        "id": "7956ea8999198d23",
        "type": "function",
        "z": "24039523dcf573b0",
        "d": true,
        "g": "aba0adf3e81a1c0b",
        "name": "REPORT SKIPPED",
        "func": "node.send({\n  topic: \"report\",\n  payload: { type: \"skipped\", category: msg.category || \"unknown\" },\n  job: msg.job\n});\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 1270,
        "y": 960,
        "wires": [
            [
                "c031ce02b7ae1ff1"
            ]
        ]
    },
    {
        "id": "cb629a6342c84f4d",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Counter ++ (quick)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 920,
        "wires": [
            [
                "49e52f42aa4489e3"
            ]
        ]
    },
    {
        "id": "6de7257c65f1e165",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "CATCH fadepresets",
        "scope": [
            "a35b9f8b5f3c9a11",
            "3c1e6a6d7b1b2c44",
            "5a8d0f1b3e2c4d66",
            "bd97d6f6ce673d8c",
            "49e52f42aa4489e3",
            "5d719dadc9ded89c",
            "8b5cc652c67109bc",
            "f7a0dd6dcd042919"
        ],
        "uncaught": false,
        "x": 590,
        "y": 920,
        "wires": [
            [
                "0c2c43bf90d12f7b"
            ]
        ]
    },
    {
        "id": "0c2c43bf90d12f7b",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'fadepresets';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 960,
        "wires": [
            [
                "0e22a946caa8156b"
            ]
        ]
    },
    {
        "id": "321d3cfaf3ad264f",
        "type": "catch",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "CATCH pluginsettings",
        "scope": [
            "801fc15ef3777ecb",
            "717547741be93b38",
            "1c85a7b73c4d0534",
            "3a65d89c850f97fd",
            "46d02e8955535559",
            "5438f780f5fc4fff"
        ],
        "uncaught": false,
        "x": 600,
        "y": 740,
        "wires": [
            [
                "c122ef2968a5229e"
            ]
        ]
    },
    {
        "id": "c122ef2968a5229e",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "ERROR → report + counter -- + doneCat",
        "func": "const category = msg.category || 'pluginsettings';\n\n// 1) Fehlertext bestimmen\nconst e = msg.error || {};\nconst message = e.message || (typeof e === 'string' ? e : (e && e.toString ? e.toString() : 'unknown error'));\n\n// 2) error an Aggregator senden\nnode.send({\n  topic: 'report',\n  payload: { type: 'error', category, message },\n  job: msg.job\n});\n\n// 3) pending-Counter dekrementieren (falls zuvor ++ passiert ist)\nconst key = `pending:${msg.job?.id || 'none'}:${category}`;\nlet n = flow.get(key) || 0;\nif (n > 0) {\n  n = n - 1;\n  flow.set(key, n);\n}\n\n// 4) Wenn nichts mehr pending → doneCat, damit Aggregator abschließen kann\nif (n === 0 && msg.job && msg.job.id) {\n  node.send({\n    topic: 'report',\n    payload: { type: 'doneCat', category },\n    job: msg.job\n  });\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 780,
        "wires": [
            [
                "97dbf2e19dec5ed0"
            ]
        ]
    },
    {
        "id": "34ab116ea9fc7b9a",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Counter ++ (bulk)",
        "func": "const cat = msg.category || \"unknown\";\nconst key = `pending:${msg.job?.id || 'none'}:${cat}`;\nflow.set(key, (flow.get(key) || 0) + 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1950,
        "y": 700,
        "wires": [
            [
                "d59e642b1764df76"
            ]
        ]
    },
    {
        "id": "97dbf2e19dec5ed0",
        "type": "link out",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "REPORT OUT",
        "mode": "link",
        "links": [
            "958a9bcb116f0244"
        ],
        "x": 885,
        "y": 780,
        "wires": []
    },
    {
        "id": "15ed22f12517848f",
        "type": "function",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Start CAT",
        "func": "// Plug-In Settings Start (Outputs: 2)\n// Out1 = passthrough, Out2 = startCat / error\ntry {\n    // Grunddaten / Kategorie\n    const { PathPTUser } = msg.payload || {};\n    msg.category = \"pluginsettings\";\n\n    // (Optional) hier weiterhin den Basis-Pfad setzen:\n    msg.payload = msg.payload || {};\n    msg.payload.PluginPath = `${PathPTUser}/Plug-In Settings`;\n\n    // startCat nur 1× pro Job/Kategorie senden\n    let report = null;\n    const jobId = msg.job?.id || \"none\";\n    const key = `startcat:${jobId}:${msg.category}`;\n    if (!flow.get(key) && msg.job && msg.job.id) {\n        flow.set(key, true);\n        report = {\n            topic: \"report\",\n            payload: { type: \"startCat\", category: msg.category },\n            job: msg.job\n        };\n    }\n\n    // Out1: normal weiter in deinen Scan/Stats-Flow\n    // Out2: startCat (oder null, wenn schon gesendet)\n    return [msg, report];\n\n} catch (err) {\n    // Fehler direkt reporten (Out2)\n    return [null, {\n        topic: \"report\",\n        payload: { type: \"error\", category: \"pluginsettings\", message: err.message },\n        job: msg.job\n    }];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 700,
        "wires": [
            [
                "801fc15ef3777ecb"
            ],
            [
                "97dbf2e19dec5ed0"
            ]
        ],
        "outputLabels": [
            "",
            "REPORT IN"
        ]
    },
    {
        "id": "46d02e8955535559",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "pluginsettingDest",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 2270,
        "y": 760,
        "wires": [
            [
                "1c85a7b73c4d0534"
            ],
            [
                "5438f780f5fc4fff"
            ]
        ]
    },
    {
        "id": "5438f780f5fc4fff",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "pluginsettingDest",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2480,
        "y": 780,
        "wires": [
            [
                "1c85a7b73c4d0534"
            ]
        ]
    },
    {
        "id": "3a65d89c850f97fd",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "7152f8cea3400281",
        "name": "",
        "path": "",
        "pathType": "str",
        "filename": "payload.userDir",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1590,
        "y": 740,
        "wires": [
            [
                "717547741be93b38"
            ],
            []
        ]
    },
    {
        "id": "8b5cc652c67109bc",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Zielpfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "destFolder",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 2050,
        "y": 940,
        "wires": [
            [
                "3c1e6a6d7b1b2c44"
            ],
            [
                "f7a0dd6dcd042919"
            ]
        ]
    },
    {
        "id": "f7a0dd6dcd042919",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "destFolder",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 2260,
        "y": 960,
        "wires": [
            [
                "3c1e6a6d7b1b2c44"
            ]
        ]
    },
    {
        "id": "49e52f42aa4489e3",
        "type": "fs-ops-access",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Quick Pfad existiert?",
        "path": "",
        "pathType": "str",
        "filename": "quickPresets.destpath",
        "filenameType": "msg",
        "read": false,
        "write": false,
        "throwerror": false,
        "x": 1520,
        "y": 980,
        "wires": [
            [
                "5a8d0f1b3e2c4d66"
            ],
            [
                "5d719dadc9ded89c"
            ]
        ]
    },
    {
        "id": "5d719dadc9ded89c",
        "type": "fs-ops-mkdir",
        "z": "24039523dcf573b0",
        "g": "aba0adf3e81a1c0b",
        "name": "Ordner anlegen",
        "path": "",
        "pathType": "str",
        "dirname": "quickPresets.destpath",
        "dirnameType": "msg",
        "recursive": true,
        "mode": "755",
        "fullpath": "directory",
        "fullpathType": "msg",
        "x": 1800,
        "y": 960,
        "wires": [
            [
                "5a8d0f1b3e2c4d66"
            ]
        ]
    }
]